{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#godotsteam-documentation","title":"GodotSteam Documentation","text":"<p>Welcome!  If you find any mistakes or have some additions to make, please check out our documentation repository here.</p>"},{"location":"#where-do-i-start","title":"Where Do I Start?","text":""},{"location":"#fastest-start","title":"Fastest Start","text":""},{"location":"#gdextension-gdnative-plug-ins","title":"GDExtension / GDNative Plug-ins","text":"<p>Most users will want to install the GDExtension or GDNative plug-in to quickly use GodotSteam. To get started:</p> <ul> <li> Open your Godot editor</li> <li> Click on the 'Assets' tab</li> <li> Search for 'GodotSteam'</li> <li> If using Godot 4.x, install the GDExtension 4.1 / 4.2 plug-in</li> <li> If using Godot 3.x, install the GDNative plug-in</li> </ul> <p>You may need to restart your browser but the plug-in does not need to be enabled manually.  Check by calling the Steam class.</p>"},{"location":"#pre-compiled-bundles","title":"Pre-Compiled Bundles","text":"<p>Or, similar to Godot itself, you can download the pre-compiled editor / template versions from Github; which are linked below.</p> <ul> <li> Download the Pre-Compile Editor / Template bundle below</li> <li> Extract it</li> <li> Run the editor</li> </ul>"},{"location":"#differences-between-pre-compiles-and-plug-ings","title":"Differences Between Pre-Compiles and Plug-ings","text":"<p>For the most part, the pre-compiles and plug-ins are functionally the same. One major difference is the plug-ins have no in-editor documentation.</p> <p>GDNative, however, has no access to Steam constants or enums, an issue with Rich Presence on Windows, others which are documented in the Common Issues section.</p>"},{"location":"#master-dedicated-servers","title":"Master / Dedicated Servers","text":"<p>The GodotSteam Server builds are meant for master or player-hosted / run dedicated servers and have the same available options as the standard GodotSteam builds: pre-compiled editor / template bundles, GDExtension plug-in, and GDNative plug-in.  The server builds have Steam server classes and very few of the standard classes.</p>"},{"location":"#c-sharp-users","title":"C-Sharp Users","text":"<p>As there are currently no .NET-enabled versions of GodotSteam, you will want to download the GodotSteam C# Bindings from LauraWebdev. Also check out ChickenSoft for other C# tools and tips.</p> <p>These downloads contain everything you need to start working with Steamworks. Previous versions of all branches can be found on Github.</p> <p>Pre-compiled editors and template zips are self-contained and have everything you need to work with GodotSteam. The GDNative and GDExtension plug-ins require an official version of Godot Engine.</p> <ul> <li> <p> Godot 4.1.x / Godot 4.2.x Versions</p> <p> [ | 4.2.2 ] [ | 1.60 ] [ | 4.9 ] </p> <p>  Pre-compiled Editor and Templates</p> <p> GDExtension | Godot Asset Library</p> <p>  MultiplayerPeer Editor and Templates</p> </li> <li> <p> Server 4.1.x / 4.2.x Versions</p> <p> [ | 4.2.2 ] [ | 1.59 ] [ | 4.3 ] </p> <p>  Server Pre-Compiled Editors and Templates</p> <p>  Server GDExtension</p> </li> <li> <p> Godot 3.5.3 Versions</p> <p> [ | 3.5.3 ] [ | 1.60 ] [ | 3.26 ] </p> <p>  Pre-compiled Editors and Templates</p> <p>  GDNative | Godot Asset Library</p> </li> <li> <p> Server 3.5.3 Versions</p> <p> [ | 3.5.3 ] [ | 1.59 ] [ | 3.3 ] </p> <p>  Server Pre-compiled Editors and Templates</p> <p>  Server GDNative | Godot Asset Library</p> </li> </ul> <p>Roll up your sleeves and build your own versions of GodotSteam. More instructions are available on each branch's readme page or up above under the Compiling tab.</p> <ul> <li> <p> Godot 4.x Branches</p> <p> Module</p> <p> GDExtension Plug-in</p> <p> MultiplayerPeer Module</p> </li> <li> <p> Server 4.x Branches</p> <p> Server Module</p> <p> Server GDExtension</p> </li> <li> <p> Godot 3.x Branches</p> <p> Module</p> <p> GDNative Plug-in</p> </li> <li> <p> Server 3.x Branches</p> <p> Server Module</p> <p>: GDNative Plug-in</p> </li> </ul>"},{"location":"#download-it","title":"Download It","text":""},{"location":"#compile-it-yourself","title":"Compile It Yourself","text":""},{"location":"#requirements","title":"Requirements","text":"<p>If you are compiling the module, GDNative, or GDExtension version yourself, there are a few things you'll need to start working regardless of which flavor you decide to try out.</p> <ul> <li> <p> Steamworks SDK</p> <p>While we suggest the latest version of Valve's Steamworks SDK 1.59 or newer, the older versions work well too.</p> <p> Log In and Download The SDK</p> </li> <li> <p> Godot Engine Source</p> <p>You will need the version that matches your GodotSteam version. Use the tags section in Github.</p> <p> Grab the Engine Source</p> </li> </ul> <p>Just make sure there are no compatibility breaks between the SDK and GodotSteam; usually noted in the readme's.</p> <ul> <li> <p> Tutorials</p> <p>There currently is a wide selection of tutorials available with more in the works. Feel free to submit corrections or new ones  So far there are topics such as:</p> <p> Initializing Steam</p> <p> Lobbies</p> <p> Stats and Achievements</p> <p> See More Tutorials</p> </li> <li> <p> External Resources</p> <p>A list of things related to Godot and Steam like video and text tutorials, linked to other tools and plug-ins, and other Steam API projects.</p> <p> External Resources</p> </li> <li> <p> Compiling How-To Guides</p> <p>If you want to build GdotoSteam from scratch, use one of these compiling how-to guides to continue on:</p> <p> Module How-To</p> <p> Multiplayer Peer How-To</p> <p> GDNative How-To</p> <p> GDExtension How-To</p> <p> Server How-To</p> </li> <li> <p> GodotSteam Example Project</p> <p>A working example of some GodotSteam features based on current tutorials.</p> Godot 3.xGodot 4.x <p> Example 3.x Project Source</p> <p> Godot Asset Library</p> <p> GitHub Drop-in ZIP</p> <p> Example 4.x Project Source</p> <p> Godot Asset Library</p> <p> GitHub Drop-in ZIP</p> </li> </ul> <p>Finally got your Steam store page up? Whether you are about to release your game, already did, or are just tinkering away at it, you have your game added to the list of Games Using GodotSteam section.</p> <ul> <li> <p> E-Mail Your Game</p> <p>Please include your Steam store page and up to five additional links like social platforms, Discord invite links, development website, devlog, or anything relevant to your game or studio.</p> <p> Get To Typing</p> </li> <li> <p> PR Submit Your Game</p> <p>You can create your own entry in our documentation by submitting a pull request on Github. Make sure not to add any more than six additional links. You can view other entries to see how the submission should be formatted.</p> <p> Create A Pull Request</p> </li> </ul> <ul> <li> <p> Github Issues</p> <p>These should only be used for actual bugs in the project. Please direct questions to either an e-mail or Discord.</p> <p> Create An Issue</p> </li> <li> <p> By E-Mail</p> <p>Send me an e-mail with as many details as you can about your issue. Unless you are just saying hi.</p> <p> Send A Support E-Mail</p> </li> <li> <p> Community Support</p> <p>A bunch of really smart folks can usually help out with issues; especially things like MultiplayerPeer.</p> <p> Chat With Us On Discord</p> </li> </ul> <p>Want to help out? There are a few ways and all of them get you listed in our contributors section. Yes, even for tiny corrections.</p> <ul> <li> <p> Pull Requests</p> <p>A huge help is the contributions of fixes and additions through pull-requests on GitHub. </p> <p> All GodotSteam Repos</p> <p> Check Out Our To-Do List</p> </li> <li> <p> Donations</p> <p>You can provide donations for the project through Github Sponsors. One-time or reoccuring donors get a variety of perks like access to our sponsors-only repo, special Discord roles, and my undying love.</p> <p> GitHub Sponsors</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#have-a-game-using-godotsteam","title":"Have A Game Using GodotSteam?","text":""},{"location":"#need-support","title":"Need Support?","text":""},{"location":"#contributing-and-donating","title":"Contributing and Donating","text":""},{"location":"blog/","title":"GodotSteam News","text":""},{"location":"blog/2024/07/09/first-post-is-the-best-post/","title":"First Post Is The Best Post","text":"<p>OK, here we go... the first news post for GodotSteam.  A good place to keep all the updates and such for the project.</p>"},{"location":"blog/2024/07/09/first-post-is-the-best-post/#steamworks-sdk-160","title":"Steamworks SDK 1.60","text":"<p>There is a new SDK with functions for the Game Recording beta features Valve just rolled out.  It also has some updates to UGC and other little bits.  These changes are now live in GodotSteam 4.9 (Godot 4.x / GDExtension / MultiplayerPeer) as well as GodotSteam 3.26 (Godot  3.x / GDNative).</p> <p>The docs haven't been fully updated for it yet though; nor have the in-editor docs for pre-compiled module versions.  That should be coming in another, smaller patch soon.</p>"},{"location":"blog/2024/07/09/first-post-is-the-best-post/#godotsteam-components","title":"GodotSteam Components","text":"<p>Finally, our first update about GodotSteam Components.  The first round of tools will be:</p> <ul> <li>SteamAchievementIcon node</li> <li>Inventory Item Editor</li> <li>Steamworks VDF Editor</li> <li>SteamLobby node</li> <li>SteamChat node</li> </ul> <p>You can check out the Projects page for it to find more details about what will be available and what all is planned.  Github Sponsors will get access to it in September and public roll-out will happen sometime in the following months.</p>"},{"location":"blog/2024/07/09/first-post-is-the-best-post/#skillet-updates","title":"Skillet Updates","text":"<p>Skillet is coming along nicely and the public repo should be available sometime in October. The store page should be live in August, with the game finally releasing in early December of this year!</p> <p></p> <p>Development sessions happen each Monday, Wednesday, and Friday on our Discord channel. Starts around noon CST and runs for about three hours; when it is not cancceled.</p> <p>Hopefully soon there will be something interesting enough to show.</p>"},{"location":"changelog/gdextension/","title":"Godot 4.x GDExtension Change-Log","text":"<p>A history of all changes to the gdextension branch.</p>"},{"location":"changelog/gdextension/#version-49","title":"Version 4.9","text":"<ul> <li>Added: missing <code>user_achievement_icon_fetched</code> callback</li> <li>Added: new functions and enums to Apps class</li> <li>Added: new Steam Timeline class functions, enums, and constants</li> <li>Added: new functions to UGC class</li> <li>Added: new enum BetaBranchFlags</li> <li>Added: new value NETWORKING_CONFIG_IP_LOCAL_HOST_ALLOW_WITHOUT_AUTH for NetworkingConfigValue enum</li> <li>Changed: updated for Steamworks SDK 1.60</li> <li>Changed: <code>network_messages_session_failed</code> callback now returns the Steam ID associated with the user whose session failed</li> <li>Changed: <code>global_stats_received</code> had call result name change under-the-hood, does not affect anything</li> <li>Changed: <code>sendMessages()</code> now returns the message result</li> <li>Changed: <code>getQueryUGCResult()</code> now passes back additional value total_files_size</li> <li>Changed: enum RemoteStoragePlatform now cast as uint32_t, fixes Rust compatibility, thanks to GreenFox</li> <li>Changed: <code>item_installed</code> signal now returns additional data - legacy_content and manifest_id</li> <li>Fixed: incorrect signal name for <code>inventory_definition_update</code>, thanks to Foxushka</li> </ul>"},{"location":"changelog/gdextension/#version-48","title":"Version 4.8","text":"<ul> <li>Added: doc_classes back in for Godot 4.3 or higher</li> <li>Added: Steam Matchmaking response handlers, thanks to jeremybeier</li> <li>Added: all missing Messages and Sockets constants</li> <li>Changed: Networking Messages, Sockets, and Utils now use Steam IDs instead of identity system</li> <li>Changed: UserUGCListSortOrder enums for readability</li> <li>Changed: UGCContentDescriptorID enums for readability</li> <li>Changed: <code>getResultStatus()</code> now returns the integer / enum</li> <li>Changed: cleaned up <code>addItemPreviewFile()</code>, <code>check_file_signature</code>, and <code>showGamepadTextInput()</code></li> <li>Changed: various bits and pieces</li> <li>Changed: IP logic for all related functions</li> <li>Changed: <code>addFavoriteGame()</code>, <code>initiateGameConnection()</code>, <code>terminateGameConnection()</code>, and <code>removeFavoriteGame()</code> now take strings for IP</li> <li>Changed: <code>getAuthSessionTicket()</code> now defaults to 0 for Steam ID</li> <li>Changed: IP address now accepted instead of IP references</li> <li>Fixed: <code>getFriendCount()</code> has correct bit-wise value</li> <li>Fixed: server browser functionality, thanks to jeremybeier</li> <li>Fixed: wrong string IP conversions, thanks to jeremybeier</li> <li>Fixed: server list request filters, thanks to jeremybeier</li> <li>Fixed: typo with UGC_MATCHING_UGC_TYPE_ITEMS enum</li> <li>Fixed: minor case issue with Workshop enums</li> <li>Fixed: <code>playerDetails()</code>, <code>requestFavoritesServerList()</code>, <code>requestInternetServerList()</code>, <code>requestSpectatorServerList()</code>, <code>requestFriendsServerList()</code>, <code>requestHistoryServerList()</code>, and <code>pingServer()</code>, thanks to jeremybeier</li> <li>Fixed: regressions caused by minor update</li> <li>Fixed: typo with NETWORKING_CONFIG_TYPE_STRING enum</li> <li>Fixed: typo with LOBBY_COMPARISON_EQUAL_TO_GREATER_THAN</li> <li>Fixed: in-editor docs</li> <li>Removed: Networking Types identity system and related bits</li> <li>Removed: P2P Networking constants as they are duplicates of the P2PSend enum</li> <li>Removed: previous, non-functioning Matchmaking Server call results</li> <li>Removed: <code>getIdentity()</code> as it is redundant now</li> </ul>"},{"location":"changelog/gdextension/#version-47","title":"Version 4.7","text":"<ul> <li>Changed: minor organization and readability changes</li> <li>Fixed: <code>htmlInit()</code> not returning bool for success</li> <li>Fixed: regression in <code>receiveMessagesOnChannel()</code></li> <li>Fixed: missing argument bind in <code>getListenSocketAddress()</code></li> <li>Removed: unused docs XML</li> </ul>"},{"location":"changelog/gdextension/#version-463","title":"Version 4.6.3","text":"<ul> <li>Changed: returned values for getFriendGamePlayed, thanks to SlejmUr</li> <li>Changed: <code>getItemPrice()</code> now returns base price and price, thanks to SlejmUr</li> <li>Changed: <code>getFriendMessage()</code> and callback <code>connected_friend_chat_message</code> now returns the type, thanks to SlejmUr</li> <li>Changed: updated in-editor docs with changes</li> <li>Changed: updated submodule to Godot-cpp 4.2.2</li> <li>Fixed: missing info_flags key in <code>getSessionConnectionInfo()</code>, thanks to SlejmUr</li> <li>Fixed: <code>getServerDetails()</code> not sending back needed struct, thanks to SlejmUr</li> </ul>"},{"location":"changelog/gdextension/#version-462","title":"Version 4.6.2","text":"<ul> <li>Added: internal notes about where enums are found</li> <li>Added: minor extra helper functions from Steam's client header</li> <li>Added: <code>getSteamID32()</code> function to convert SteamID64 to SteamID</li> <li>Changed: replaced deprecated Controller struct with Inputs struct in <code>getDigitalActionData()</code></li> <li>Changed: leaderboard details max now set at highest instead of zero by default</li> <li>Fixed: incorrect constant for PUBLISHED_FILE_UPDATE_HANDLE_INVALID</li> <li>Fixed: <code>getAllLobbyData()</code> sending back all pairs, thanks to freehuntx</li> </ul>"},{"location":"changelog/gdextension/#version-461","title":"Version 4.6.1","text":"<ul> <li>Skipped to keep versioning the game with 4.x module</li> </ul>"},{"location":"changelog/gdextension/#version-46","title":"Version 4.6","text":"<ul> <li>Added: new Remote Storage enum to WorkshopFileType</li> <li>Added: two new UGC enums to ItemState and ItemPreviewType</li> <li>Added: two new Friends class constants</li> <li>Added: new function <code>dismissGamepadTextInput()</code></li> <li>Added: new Remote Play enum, form factor for VR headset</li> <li>Added: two new result enums; not supported and family size limit exceeded</li> <li>Added: three new enums to NetworkingConfigValue</li> <li>Added: new general constant ACCOUNT_ID_INVALID</li> <li>Changed: FEATURE_KIOSK_MODE enum now deprecated</li> <li>Changed: minor housekeeping by rearranging some functions</li> <li>Changed: k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress was replaced by k_ESteamNetworkingConfig_SDRClient_DevTicket, value is the same but reference changed</li> <li>Changed: updated in-editor docs</li> <li>Fixed: spelling error in <code>getProfileItemPropertyInt()</code> bind</li> <li>Removed: App Lists class functions, callbacks, etc. due to SDK 1.59 changes</li> <li>Removed: Remote Play enums mistakenly added as constants</li> </ul>"},{"location":"changelog/gdextension/#version-454","title":"Version 4.5.4","text":"<ul> <li>Added: missing k_nSteamNetworkingSend_AutoRestartBrokenSession to constants</li> <li>Added: two missing Input constants: INPUT_HANDLE_ALL_CONTROLLERS and INPUT_MAX_ACTIVE_LAYERS</li> <li>Changed: <code>getInputTypeForHandle()</code> now returns int / enum instead of string for device models</li> <li>Changed: <code>createBrowser</code> now like module version</li> <li>Changed: <code>html_browser_ready</code> now call result instead of callback</li> <li>Changed: order of constants to be alphabetic</li> <li>Changed: changed returned variable name to <code>need_to_accept_tos</code> in <code>item_updated</code> callback</li> <li>Changed: Github Actions scripts, one for Vulkan and another for version numbers</li> </ul>"},{"location":"changelog/gdextension/#version-453","title":"Version 4.5.3","text":"<ul> <li>Fixed: <code>requestClanOfficerList()</code> using wrong internal function, thanks to sepTN</li> </ul>"},{"location":"changelog/gdextension/#version-452","title":"Version 4.5.2","text":"<ul> <li>Fixed: crashes on <code>generateItems()</code>, <code>startPurchase()</code>, and <code>exchangeItems()</code>, thanks to sepTN</li> </ul>"},{"location":"changelog/gdextension/#version-451","title":"Version 4.5.1","text":"<ul> <li>Fixed: app ID automatically being set to 480, now default is 0 which makes GodotSteam ignore auto-setting app ID</li> </ul>"},{"location":"changelog/gdextension/#version-45","title":"Version 4.5","text":"<ul> <li>Added: two new arguments to <code>steamInit()</code> and <code>steamInitEx()</code> to set your app ID and run_callbacks interally, thanks to GreenFox</li> <li>Added: two Music class callbacks</li> <li>Changed: <code>generateItems()</code>, <code>exchangeItems()</code>, <code>getItemsByID()</code>, and <code>startPurchase()</code> all list-based arguments are now PoolIntArrays</li> <li>Changed: <code>getItemsByID()</code> now takes one argument, counts the elements in the passed array instead</li> <li>Changed: <code>getItemsWithPrices()</code> no longer requires any arguments passed to it</li> <li>Changed: in-editor docs have been updated</li> <li>Fixed: <code>getResultItems()</code> now returns all item data</li> <li>Fixed: missing DEFVAL for <code>steamInitEx()</code></li> <li>Fixed: Joy Con name in <code>getInputTypeForHandle()</code></li> <li>Removed: <code>getNumItemsWithPrices()</code> as it was unnecessary</li> </ul>"},{"location":"changelog/gdextension/#version-443","title":"Version 4.4.3","text":"<ul> <li>Fixed: <code>requestEquippedProfileItems()</code> was missing method bind, thanks to BOTLANNER</li> <li>Fixed: <code>get_ticket_for_web_api</code> callback for getting actual ticket buffer, thanks to dicarne</li> <li>Fixed: compiler complaining about comparison between Steam enum and GodotSteam enum for <code>steamInitEx()</code></li> <li>Fixed: <code>getListenSocketAddress()</code> fixed to provide the actual address and optional port</li> <li>Changed: different defaults in Github Actions files</li> <li>Changed: <code>createBrowser()</code> now sends proper NULL when empty string passed</li> <li>Changed: <code>html_browser_ready</code> from callback to proper call result</li> <li>Changed: cast handle in <code>setSize()</code> as Steam HHTMLBrowser</li> <li>Removed: unnecessary steam_appid.txt from zips in Github Actions</li> </ul>"},{"location":"changelog/gdextension/#version-442","title":"Version 4.4.2","text":"<ul> <li>Changed: bump for Godot 4.1.2</li> </ul>"},{"location":"changelog/gdextension/#version-441","title":"Version 4.4.1","text":"<ul> <li>Fixed: missing descriptions for some in-editor functions/signals</li> <li>Fixed: <code>receiveMessagesOnChannel()</code>, <code>receiveMessagesOnPollGroup()</code>, and <code>receiveMessagesOnConnection()</code> had overwriting dictionary keys</li> </ul>"},{"location":"changelog/gdextension/#version-44","title":"Version 4.4","text":"<ul> <li>Added: new enums and constant related to new Steam initialization function</li> <li>Added: new enums for NetworkingConfigValue</li> <li>Added: new intialization function <code>steamInitEx()</code> that is more verbose</li> <li>Added: new UGC function <code>getUserContentDescriptorPreferences()</code></li> <li>Added: new Remote Play function <code>startRemotePlayTogether()</code></li> <li>Changed: UGC function<code>setItemTags()</code> to have new argument for admin tags</li> <li>Changed: compatible with Steamworks SDK 1.58</li> </ul>"},{"location":"changelog/gdextension/#version-431","title":"Version 4.3.1","text":"<ul> <li>Fixed: wrong variant type for join_requested</li> </ul>"},{"location":"changelog/gdextension/#version-43","title":"Version 4.3","text":"<ul> <li>Added: full GodotSteam documentation into the editor</li> <li>Added: <code>steamShutdown()</code> to allow Steamworks to be manually shutdown</li> <li>Added: <code>requestEquippedProfileItems()</code> function and <code>equipped_profile_items</code> callback</li> <li>Added: Steam Deck as Steam Input type</li> <li>Changed: all enums are now directly linked to their SDK counterparts</li> <li>Changed: <code>getDigitalActionData()</code> returned keys are now state and active</li> <li>Changed: names of some Steam enums to be cleaner and leaner</li> <li>Changed: <code>getAppInstallDir()</code> now returns dictionary with absolute path and install size</li> <li>Fixed: some missing enum binds</li> <li>Fixed: missing function argument binds</li> <li>Fixed: <code>get_ticket_for_web_api</code> sending back strings</li> <li>Removed: enums that are not in the SDK but Valve's docs</li> </ul>"},{"location":"changelog/gdextension/#version-425","title":"Version 4.2.5","text":"<ul> <li>Changed: updated submodule for Godot 4.1.1</li> <li>Fixed: more stuff in godotsteam.gdextension file</li> </ul>"},{"location":"changelog/gdextension/#version-424","title":"Version 4.2.4","text":"<ul> <li>Added: new Input callback <code>input_gamepad_slot_change</code></li> <li>Added: new User callback <code>get_ticket_for_web_api</code></li> <li>Added: new User function <code>getAuthTicketForWebApi()</code></li> <li>Changed: <code>getAuthSessionTicket()</code> argument is now optional, defaults to NULL</li> </ul>"},{"location":"changelog/gdextension/#version-423","title":"Version 4.2.3","text":"<ul> <li>Added: new return values for <code>overlay_toggled</code>; this will break compatibility with this</li> <li>Added: new Input and Parental Settings enums</li> <li>Added: new UGC Content Descriptor ID enums</li> <li>Added: new UGC functions <code>removeContentDescriptor()</code>, <code>addContentDescriptor()</code>, and <code>getQueryUGCContentDescriptors()</code></li> <li>Added: new signal <code>filter_text_dictionary_changed</code></li> <li>Changed: <code>getAuthSessionTicket()</code> now uses networking identities</li> <li>Changed: <code>gamepad_text_input_dismissed</code> now passes back the app ID</li> <li>Changed: Steam Input max analog and digital actions values</li> <li>Removed: ERegisterActivationCodeResult due to removal in SDK</li> </ul>"},{"location":"changelog/gdextension/#version-422","title":"Version 4.2.2","text":"<ul> <li>Changed: names of all godotsteam dll/so/dylib files to be less verbose</li> </ul>"},{"location":"changelog/gdextension/#version-421","title":"Version 4.2.1","text":"<ul> <li>Added: compiled dylib files for OSX, thanks to definitelyokay</li> <li>Fixed: names of OSX files in the godotsteam.gdextension file</li> </ul>"},{"location":"changelog/gdextension/#version-42","title":"Version 4.2","text":"<ul> <li>Changed: brought the plug-in version up to speed with the module version</li> </ul>"},{"location":"changelog/gdnative/","title":"GDNative Change-Log","text":"<p>A history of all changes to the gdnative branch.</p>"},{"location":"changelog/gdnative/#version-326","title":"Version 3.26","text":"<ul> <li>Added: missing <code>user_achievement_icon_fetched</code> callback</li> <li>Added: new functions to Apps class</li> <li>Added: new Steam Timeline class functions</li> <li>Added: new functions to UGC class</li> <li>Changed: updated for Steamworks SDK 1.60</li> <li>Changed: <code>network_messages_session_failed</code> callback now returns the Steam ID associated with the user whose session failed</li> <li>Changed: <code>global_stats_received</code> had call result name change under-the-hood, does not affect anything</li> <li>Changed: <code>sendMessages()</code> now returns the message result</li> <li>Changed: <code>getQueryUGCResult()</code> now passes back additional value total_files_size</li> <li>Changed: <code>item_installed</code> signal now returns additional data - legacy_content and manifest_id</li> <li>Fixed: incorrect signal name for <code>inventory_definition_update</code>, thanks to Foxushka</li> </ul>"},{"location":"changelog/gdnative/#version-325","title":"Version 3.25","text":"<ul> <li>Added: Steam Matchmaking response handlers, thanks to jeremybeier</li> <li>Added: all missing Messages and Sockets constants</li> <li>Changed: Networking Messages, Sockets, and Utils now use Steam IDs instead of identity system</li> <li>Changed: cleaned up <code>addItemPreviewFile()</code>, <code>check_file_signature</code>, and <code>showGamepadTextInput()</code></li> <li>Changed: various bits and pieces</li> <li>Changed: IP logic for all related functions</li> <li>Changed: <code>addFavoriteGame()</code>, <code>initiateGameConnection()</code>, <code>terminateGameConnection()</code>, and <code>removeFavoriteGame()</code> now take strings for IP</li> <li>Changed: <code>getAuthSessionTicket()</code> now defaults to 0 for Steam ID</li> <li>Changed: IP address now accepted instead of IP references</li> <li>Fixed: <code>getFriendCount()</code> has correct bit-wise value</li> <li>Fixed: server browser functionality, thanks to jeremybeier</li> <li>Fixed: wrong string IP conversions, thanks to jeremybeier</li> <li>Fixed: server list request filters, thanks to jeremybeier</li> <li>Fixed: <code>playerDetails()</code>, <code>requestFavoritesServerList()</code>, <code>requestInternetServerList()</code>, <code>requestSpectatorServerList()</code>, <code>requestFriendsServerList()</code>, <code>requestHistoryServerList()</code>, and <code>pingServer()</code>, thanks to jeremybeier</li> <li>Fixed: regressions caused by minor update</li> <li>Removed: Networking Types identity system and related bits</li> <li>Removed: P2P Networking constants as they are duplicates of the P2PSend enum</li> <li>Removed: previous, non-functioning Matchmaking Server call results</li> <li>Removed: <code>getIdentity()</code> as it is redundant now</li> </ul>"},{"location":"changelog/gdnative/#version-324","title":"Version 3.24","text":"<ul> <li>Changed: <code>createBrowser</code> now accepts empty strings like the godot3 branch</li> <li>Changed: minor organizational things, variable naming, etc.</li> <li>Changed: <code>getItemPrice()</code> now returns base price and price, thanks to SlejmUr</li> <li>Fixed: missing info_flags key in <code>getSessionConnectionInfo()</code>, thanks to SlejmUr</li> <li>Fixed: <code>requestClanOfficerList()</code> using wrong SDK call</li> <li>Fixed: issues with <code>getResultItems()</code></li> <li>Fixed: <code>addRequestLobbyListDistanceFilter()</code></li> <li>Fixed: <code>getServerDetails()</code> not sending back needed struct, thanks to SlejmUr</li> <li>Fixed: regressions in <code>receiveMessagesOnChannel()</code>, <code>receiveMessagesOnConnection()</code>, and <code>receiveMessagesOnPollGroup()</code></li> <li>Fixed: <code>getConnectionRealTimeStatus()</code> checking the wrong value, thanks to tamper2</li> <li>Fixed: missing cast on <code>setSize()</code></li> <li>Fixed: <code>addRequiredTagGroup()</code> backported from godot3 branch</li> <li>Removed: unused internal variables</li> </ul>"},{"location":"changelog/gdnative/#version-3231","title":"Version 3.23.1","text":"<ul> <li>Added: internal notes about where enums are found</li> <li>Added: minor extra helper functions from Steam's client header</li> <li>Added: <code>getSteamID32()</code> function to convert SteamID64 to SteamID</li> <li>Changed: replaced deprecated Controller struct with Inputs struct in <code>getDigitalActionData()</code></li> <li>Changed: in-editor docs</li> <li>Changed: leaderboard details max now set at highest instead of zero by default</li> <li>Fixed: incorrect constant for PUBLISHED_FILE_UPDATE_HANDLE_INVALID</li> <li>Fixed: <code>getAllLobbyData()</code> sending back all pairs, thanks to freehuntx</li> </ul>"},{"location":"changelog/gdnative/#version-323","title":"Version 3.23","text":"<ul> <li>Added: two new Friends class constants</li> <li>Added: new function <code>dismissGamepadTextInput()</code></li> <li>Added: new general constant ACCOUNT_ID_INVALID</li> <li>Removed: App Lists class functions, callbacks, etc. due to SDK 1.59 changes</li> </ul>"},{"location":"changelog/gdnative/#version-3224","title":"Version 3.22.4","text":"<ul> <li>Added: missing k_nSteamNetworkingSend_AutoRestartBrokenSession to constants</li> <li>Added: two missing Input constants: INPUT_HANDLE_ALL_CONTROLLERS and INPUT_MAX_ACTIVE_LAYERS</li> <li>Changed: <code>getInputTypeForHandle()</code> now returns int / enum instead of string for device models</li> <li>Changed: order of constants to be alphabetic</li> <li>Changed: changed returned variable name to <code>need_to_accept_tos</code> in <code>item_updated</code> callback</li> </ul>"},{"location":"changelog/gdnative/#version-3223","title":"Version 3.22.3","text":"<ul> <li>Changed: moved constants to separate file like in Godot 4.x branches</li> <li>Fixed: <code>requestClanOfficerList()</code> using wrong internal function, thanks to sepTN</li> </ul>"},{"location":"changelog/gdnative/#version-3222","title":"Version 3.22.2","text":"<ul> <li>Changed: reverted <code>steamInit()</code> and <code>steamInitEx()</code> as new methods won't work with GDNative</li> <li>Removed: all enums as they cannot be used in GDNative</li> </ul>"},{"location":"changelog/gdnative/#version-3221","title":"Version 3.22.1","text":"<ul> <li>Added: two new arguments to <code>steamInit()</code> and <code>steamInitEx()</code> to set your app ID and run_callbacks interally, thanks to GreenFox</li> <li>Fixed: issue with callback that caused compiling failure in Linux</li> </ul>"},{"location":"changelog/gdnative/#version-322","title":"Version 3.22","text":"<ul> <li>Added: two Music class callbacks</li> <li>Changed: <code>generateItems()</code>, <code>exchangeItems()</code>, <code>getItemsByID()</code>, and <code>startPurchase()</code> all list-based arguments are now PoolIntArrays</li> <li>Changed: <code>getItemsByID()</code> now takes one argument, counts the elements in the passed array instead</li> <li>Changed: <code>getItemsWithPrices()</code> no longer requires any arguments passed to it</li> <li>Changed: in-editor docs have been updated</li> <li>Fixed: <code>getResultItems()</code> now returns all item data</li> <li>Fixed: missing DEFVAL for <code>steamInitEx()</code></li> <li>Fixed: Joy Con name in <code>getInputTypeForHandle()</code></li> <li>Removed: <code>getNumItemsWithPrices()</code> as it was unnecessary</li> </ul>"},{"location":"changelog/gdnative/#version-3213","title":"Version 3.21.3","text":"<ul> <li>Fixed: <code>requestEquippedProfileItems()</code> was missing method bind, thanks to BOTLANNER</li> <li>Fixed: <code>get_ticket_for_web_api</code> callback for getting actual ticket buffer, thanks to dicarne</li> <li>Fixed: compiler complaining about comparison between Steam enum and GodotSteam enum for <code>steamInitEx()</code></li> <li>Fixed: <code>getListenSocketAddress()</code> fixed to provide the actual address and optional port</li> <li>Changed: <code>createBrowser()</code> now sends proper NULL when empty string passed</li> <li>Changed: <code>html_browser_ready</code> from callback to proper call result</li> <li>Changed: cast handle in <code>setSize()</code> as Steam HHTMLBrowser</li> <li>Removed: unnecessary steam_appid.txt from zips in Github Actions</li> </ul>"},{"location":"changelog/gdnative/#version-3212","title":"Version 3.21.2","text":"<ul> <li>Fixed: missing descriptions for some in-editor functions/signals</li> <li>Fixed: <code>receiveMessagesOnChannel()</code>, <code>receiveMessagesOnPollGroup()</code>, and <code>receiveMessagesOnConnection()</code> had overwriting dictionary keys</li> </ul>"},{"location":"changelog/gdnative/#version-321","title":"Version 3.21","text":"<ul> <li>Added: new enums and constant related to new Steam initialization function</li> <li>Added: new enums for NetworkingConfigValue</li> <li>Added: new intialization function <code>steamInitEx()</code> that is more verbose</li> <li>Added: new UGC function <code>getUserContentDescriptorPreferences(0</code></li> <li>Added: new Remote Play function <code>startRemotePlayTogether()</code></li> <li>Changed: UGC function<code>setItemTags()</code> to have new argument for admin tags</li> <li>Changed: compatible with Steamworks SDK 1.58</li> </ul>"},{"location":"changelog/gdnative/#version-3201","title":"Version 3.20.1","text":"<ul> <li>Fixed: wrong variant type for <code>join_requested</code></li> </ul>"},{"location":"changelog/gdnative/#version-320","title":"Version 3.20","text":"<ul> <li>Added: <code>steamShutdown()</code> to allow Steamworks to be manually shutdown</li> <li>Added: <code>requestEquippedProfileItems()</code> function and <code>equipped_profile_items</code> callback</li> <li>Added: Steam Deck as Steam Input type</li> <li>Changed: all enums are now directly linked to their SDK counterparts</li> <li>Changed: <code>getDigitalActionData()</code> returned keys are now state and active</li> <li>Changed: names of some Steam enums to be cleaner and leaner</li> <li>Changed: <code>getAppInstallDir()</code> now returns dictionary with absolute path and install size</li> <li>Fixed: missing function argument binds</li> <li>Removed: enums that are not in the SDK but Valve's docs</li> </ul>"},{"location":"changelog/gdnative/#version-362","title":"Version 3.6.2","text":"<ul> <li>Added: new Input callback <code>input_gamepad_slot_change</code></li> <li>Added: new User callback <code>get_ticket_for_web_api</code></li> <li>Added: new User function <code>getAuthTicketForWebApi()</code></li> <li>Fixed: <code>lobby_match_list</code> callback, but no sends the lobby count along with the lobby list array (only in GDNative due to weird GDNative bug)</li> <li>Changed: <code>getAuthSessionTicket()</code> argument is now optional, defaults to NULL</li> </ul>"},{"location":"changelog/gdnative/#version-361","title":"Version 3.6.1","text":"<ul> <li>Added: new return values for <code>overlay_toggled</code>; this will break compatibility with this</li> <li>Added: new UGC functions <code>removeContentDescriptor()</code>, <code>addContentDescriptor()</code>, and <code>getQueryUGCContentDescriptors()</code></li> <li>Added: new signal <code>filter_text_dictionary_changed</code></li> <li>Changed: <code>getAuthSessionTicket()</code> now uses networking identities</li> <li>Changed: <code>gamepad_text_input_dismissed</code> now passes back the app ID</li> <li>Changed: Steam Input max analog and digital actions values</li> <li>Fixed: <code>lobby_match_list</code> callback, but it now passes back the lobby count too</li> <li>Removed: ERegisterActivationCodeResult due to removal in SDK</li> </ul>"},{"location":"changelog/gdnative/#version-36","title":"Version 3.6","text":"<ul> <li>Changed: brought the plug-in version up to speed with the module version</li> </ul>"},{"location":"changelog/gdnative/#version-351","title":"Version 3.5.1","text":"<ul> <li>Changed: <code>createSteamID()</code> function to use proper 64-bit int</li> <li>Changed: brought the plug-in version up to speed with the module version</li> <li>Changed: output from <code>subscribe_item</code>, <code>unsubscribe_item</code> file_id to uint64_t</li> <li>Fixed: some new compiling quirks</li> <li>Removed: <code>setIdentitySteamID()</code> and <code>getIdentitySteamID()</code></li> </ul>"},{"location":"changelog/gdnative/#version-35","title":"Version 3.5","text":"<ul> <li>Fixed: incorrect type for <code>getAppListBuildId()</code></li> </ul>"},{"location":"changelog/gdnative/#version-341","title":"Version 3.4.1","text":"<ul> <li>Fixed: OSX naming of DyLib files</li> </ul>"},{"location":"changelog/gdnative/#version-34","title":"Version 3.4","text":"<ul> <li>Added: <code>setDLCContext()</code>, <code>getProfileItemPropertyString()</code>, <code>getProfileItemPropertyInt()</code>, <code>hasEquippedProfileItem()</code>, <code>getPublicIP()</code>, <code>getPSNID()</code>, <code>getStadiaID()</code>, <code>getXboxPairwiseID()</code> functions</li> <li>Added: handle arguments to HTML Surface class functions</li> <li>Added: inventory handle arguments to Inventory class functions</li> <li>Added: networking identity references into new Networking class functions</li> <li>Added: <code>equipped_profile_items_changed</code>, <code>equipped_profile_items</code> callbacks</li> <li>Added: additional data types to signals</li> <li>Changed: many functions in Networking Sockets and Networking Types classes</li> <li>Changed: newtorking identity maps</li> <li>Changed: various argument names to fall in line with module version</li> <li>Changed: renamed some signals</li> <li>Fixed: <code>serverInit()</code>, <code>advertiseGame()</code> functions</li> <li>Fixed: <code>getSessionID()</code> using wrong type in Remote Play class</li> <li>Fixed: various incorrect types in Screenshots class</li> <li>Fixed: wrong int type for inventory update handle</li> <li>Fixed: not casting app ID for <code>addFavoriteGame()</code></li> <li>Fixed: wrong int type for server ID in <code>getLobbyGameServer()</code></li> <li>Removed: <code>requestAllProofOfPurchaseKeys()</code>, <code>requestAppProofOfPurchaseKey()</code> functions and related callbacks</li> <li>Removed: leading dash from signal / callback function names</li> </ul>"},{"location":"changelog/gdnative/#version-33","title":"Version 3.3","text":"<ul> <li>Added: missing D_METHOD to all functions, should show the right argument names in-editor</li> <li>Added: Input origin enums for PS5 and Steam Deck</li> <li>Added: Input Types, Input Glyph Style, Input Glyph Size, and Input Configuration Enable Type enums</li> <li>Added: <code>getConnectionRealTimeStatus()</code>, <code>configureConnectionLanes()</code>, <code>connectP2PCustomSignaling()</code>, <code>receivedP2PCustomSignal()</code>, <code>getCertificateRequest()</code>, <code>setCertificate()</code>, <code>resetIdentity()</code>, <code>runNetworkingCallbacks()</code>, <code>beginAsyncRequestFakeIP()</code>, <code>getFakeIP()</code>, <code>createListenScoketP2PFakeIP()</code>, <code>getRemoveFakeIPForConnection()</code>, and <code>createFakeUDPPort()</code> functions and callback to NetworkingSockets class</li> <li>Added: <code>dismissFloatingGamepadTextInput()</code> function to Utils class</li> <li>Added: <code>setTimeCreatedDateRange()</code> and <code>setTimeUpdatedDateRange()</code> to UGC class</li> <li>Added: NetworkingeDebugOutputType enums for NetworkingUtils</li> <li>Added: missing constant binds for Server API, OverlayToWebPageMode</li> <li>Added: server branch merged in</li> <li>Fixed: minor compiler warnings</li> <li>Fixed: empty file hash being returned by <code>file_details_result</code> callback</li> <li>Fixed: a variety of small bugs and possible crashes, thanks to qarmin</li> <li>Fixed: missing binds for <code>getFriendsGroupName()</code>, <code>getFriendsGroupMembersList()</code>, <code>getFriendsGroupIDByIndex()</code>, <code>getFriendsGroupCount()</code>, <code>getFriendMessage()</code>, <code>getFriendCoplayTime()</code>, <code>getFriendCoplayGame()</code>, <code>getCoplayFriendCount()</code>, <code>getCoplayFriend()</code>, <code>getClanTag()</code>, <code>getClanName()</code>, <code>getClanCount()</code>, <code>getClanChatMessage()</code>, <code>getClanByIndex()</code>, <code>getClanActivityCounts()</code>, <code>fileWriteAsync()</code>, <code>fileWriteStreamCancel()</code>, <code>fileWriteStreamClose()</code>, <code>fileWriteStreamOpen()</code>, <code>fileWriteStreamWriteChunk()</code>, <code>getCachedUGCCount()</code>, <code>getUGCDownloadProgress()</code>, <code>getUGCDetails()</code>, <code>fileReadAsync()</code>, <code>getOPFSettings()</code>, <code>getOPFStringForApp()</code>, <code>getVideoURL()</code>, <code>isBroadcasting()</code> functions</li> <li>Fixed: <code>setPNGIcon()</code> and <code>updateCurrentEntryCoverArt()</code> in Music Remote class</li> <li>Fixed: missing <code>getUGCDetails()</code> and <code>getUGCDownloadProgress()</code> functions</li> <li>Changed: spacing in default arguments in [godotsteam.h]</li> <li>Changed: renamed STEAM_GAMESERVER_CALLBACK as STEAM_CALLBACK</li> <li>Changed: updated doc_class file for in-editor documentation</li> <li>Changed: updated to Steamworks 1.53</li> <li>Changed: <code>lobby_data_update</code>, removed lobby data queries as they should be done manually</li> <li>Changed: minor tweaks under-the-hood</li> <li>Changed: various generic 'int' to their actual types</li> <li>Changed: renamed servers and server stats to game server and game server stats respectively, to match SDK</li> <li>Changed: SteamNetworkingQuickConnectionStatus to SteamNetConnectionRealTimeStatus_t per Steamworks SDK 1.53, causes a break in previous GodotSteam versions</li> <li>Changed: <code>getConfigValueInfo()</code>, removed name and next value from return dictionary as they are no longer passed by function in SDK 1.53</li> <li>Changed: rearranged functions in godotsteam.cpp class binds to match [godotsteam.h] order</li> <li>Changed: enum constant binds to match [godotsteam.h] enum order</li> <li>Removed: unused callback <code>new_launch_query_parameters</code>, <code>broadcast_upload_start</code>, <code>broadcast_upload_stop</code></li> <li>Removed: <code>allocateMessage()</code> as it shouldn't be used solo</li> <li>Removed: <code>getQuickConnectionStatus()</code> and <code>getFirstConfigValue()</code> as they were removed from SDK 1.53</li> <li>Removed: <code>setDebugOutputFunction()</code> from Networking Utils</li> <li>Removed: unused structs</li> <li>Removed: SteamGameServer_RunCallbacks function</li> </ul>"},{"location":"changelog/gdnative/#version-32","title":"Version 3.2","text":"<ul> <li>Added: new helper functions for newer networking classes, translations for steamnetworkingtypes</li> <li>Changed: now works in Godot 3.4</li> <li>Fixed: various compiler warnings</li> </ul>"},{"location":"changelog/gdnative/#version-311","title":"Version 3.1.1","text":"<ul> <li>Removed: not logged in as a failure condition for <code>steamInit()</code></li> </ul>"},{"location":"changelog/gdnative/#version-31","title":"Version 3.1**","text":"<ul> <li>Added: various Steam Deck specific functions, thanks to EIREXE</li> <li>Added: new AppLists class of functions and callbacks</li> <li>Added: new or missing App functions, callbacks, and enums</li> <li>Added: OverlayToWebPageMode enum and <code>unread_chat_messages_changed</code> callback for Friends class</li> <li>Added: new Input functions and callbacks</li> <li>Added: new Parental Settings fuctions, callback, and enums</li> <li>Added: new Remote Storage functions, callback, and enums</li> <li>Added: new UGC functions, callbacks, and enum</li> <li>Added: memory allocation corrections</li> <li>Changed: updated various Input class functions</li> <li>Changed: lots of argument names internally, has no effect on usage</li> <li>Fixed: some enum names</li> <li>Fixed: various server list filter functions in Matchmaking Servers class</li> <li>Fixed: <code>getGameCoordinatorServerLogin()</code> in Networking Sockets class</li> <li>Removed: <code>receiveRelayAuthTicket()</code>, <code>findRelayAuthTicketForServer()</code>, <code>getHostedDedicatedServerAddress()</code>, and <code>getGameCoordinatorServerLogin()</code> as they rely on datagram header that was removed from base SDK</li> <li>Removed: second call for steam_api.h in godotsteam.cpp</li> </ul>"},{"location":"changelog/gdnative/#version-301","title":"Version 3.0.1**","text":"<ul> <li>Fixed: two issues with godotsteam.cpp that causes compiling error on Linux</li> </ul>"},{"location":"changelog/gdnative/#version-300","title":"Version 3.0.0**","text":"<ul> <li>Added: all missing functions to bring GDNative version in-line with module version</li> <li>Changed: rebuilt and restructured layout of project folder</li> <li>Removed: enums as they don't work in GDNative</li> <li>Removed: default arguments for functions as they don't work in GDNative</li> </ul>"},{"location":"changelog/gdnative/#version-210","title":"Version 2.1.0**","text":"<ul> <li>Added: Steamworks P2P functions thanks to Antokolos</li> </ul>"},{"location":"changelog/gdnative/#version-200","title":"Version 2.0.0**","text":"<ul> <li>Added: all current GodotSteam functions and signals</li> <li>Added: [godotsteam.h] file</li> <li>Changed: compile process; thanks to willnationsdev</li> <li>Changed: various parts of the CPP files</li> <li>Removed: pre-compiled TSCN and TRES files</li> </ul>"},{"location":"changelog/gdnative/#version-110","title":"Version 1.1.0**","text":"<ul> <li>Added: [godotsteam.h] file</li> <li>Added: <code>getCurrentGameLanguage()</code></li> <li>Added: Pre-compiled engines and templates for Linux, Mac, and Windows</li> <li>Added: change log to documentation</li> <li>Changed: various parts of the CPP files</li> <li>Changed: minor things in godotsteam.cpp</li> <li>Removed: pre-compiled TSCN and TRES files</li> </ul>"},{"location":"changelog/gdnative/#version-100","title":"Version 1.0.0**","text":"<ul> <li>Added: most pre-existing GodotSteam code over</li> <li>Added: GodotSteam GDNative documentation</li> <li>Changed: SConstruct file from GDNative to support architecture recognition or accept bit arguement in SCONS</li> <li>Bugs: Windows does not work for compiling yet, waiting for GDNative update</li> </ul>"},{"location":"changelog/godot2/","title":"Godot 2.x Change-Log","text":"<p>A history of all to the godot2 branch.</p>"},{"location":"changelog/godot2/#version-110","title":"Version 1.10","text":"<ul> <li>Added: more verbose response to <code>steamInit()</code>, now returns a dictionary</li> <li>Added: missing initialization constants</li> <li>Changed: <code>steamInit()</code> to give actual response on Steamworks status (from bool to int)</li> <li>Changed: minor formatting to match Godot 3 version</li> <li>Fixed: <code>currentAppID</code> not utilized correctly</li> <li>Removed: unneeded <code>gameInfo</code> struct</li> </ul>"},{"location":"changelog/godot2/#version-193","title":"Version 1.9.3","text":"<ul> <li>Added: networking functions, thanks to Antokolos</li> <li>Added: compiling flag for Linux and Mac, need for new Steamworks 1.44</li> <li>Changed: linked against Steamworks 1.44</li> <li>Fixed: issue with leaderboard upload returning false no matter what</li> </ul>"},{"location":"changelog/godot2/#version-192","title":"Version 1.9.2","text":"<ul> <li>Added: <code>persona_state_change</code> callback</li> <li>Changed: <code>getFriendAvatar()</code> to <code>getPlayerAvatar()</code></li> <li>Changed: <code>avatar_loaded</code> now sends back Steam ID of avatar, thanks to avencherus</li> <li>Fixed: issue with avatar and Steam ID on Linux compile</li> <li>Fixed: <code>join_requested</code> signal, thanks to Fischer96</li> </ul>"},{"location":"changelog/godot2/#version-191","title":"Version 1.9.1","text":"<ul> <li>Added: additional user statistics and achievement signals</li> <li>Changed: minor notations</li> <li>Fixed: Linux not compiling correctly with new Friends and Matchmaking updates</li> <li>Fixed: various Friends functions not providing correct data</li> <li>Fixed: missing bind methods for integers</li> </ul>"},{"location":"changelog/godot2/#version-190","title":"Version 1.9.0","text":"<ul> <li>Added: all remaining matchmaking functions</li> <li>Added: all remaining friend functions</li> <li>Changed: <code>getRecentPlayers()</code> to include timestamp</li> <li>Changed: naming of <code>leaderboard_handle</code> and <code>leaderboard_entries</code> for consistency</li> <li>Changed: <code>getAchievement()</code> to dictionary, thanks to jandrewlong</li> <li>Fixed: invite functions giving incorrect steam ids</li> <li>Fixed: <code>getInstalledDepots()</code>, <code>getDLCDownloadProgress()</code>, <code>getItemUpdateProgress()</code>, <code>getSubscribedItems()</code></li> <li>Removed: <code>setGameInfo()</code>, <code>clearGameInfo()</code>, <code>inviteFriend()</code></li> </ul>"},{"location":"changelog/godot2/#version-180","title":"Version 1.8.0","text":"<ul> <li>Added: <code>getAchievementDisplayAttribute()</code>, <code>getAchievementName()</code>, <code>getAchievementIcon()</code>, <code>getImageRGBA()</code>, and <code>getImageSize()</code>, thanks to marcelofg55</li> <li>Added: all missing SteamApps functions</li> <li>Changed: NULL statements for achievement functions</li> <li>Changed: cleaned up and organized signal functions in godotteam.h</li> <li>Fixed: issue with <code>getAchievement()</code> failing to compile</li> <li>Removed: <code>hasOtherApp()</code> function</li> </ul>"},{"location":"changelog/godot2/#version-170","title":"Version 1.7.0","text":"<ul> <li>Added: <code>getCurrentBetaName()</code>, <code>addScreenshotToLibrary()</code>, and <code>setLocation()</code>, thanks to marcelofg55</li> <li>Added: Steam controller functionality, thanks to marcelofg55</li> <li>Added: more workshop functionality</li> <li>Changed: various small maintenance</li> <li>Fixed: compiling error on Linux</li> </ul>"},{"location":"changelog/godot2/#version-160","title":"Version 1.6.0","text":"<ul> <li>Added: <code>getFileNameAndSize()</code>, <code>getQuota()</code>, <code>getSyncPlatforms()</code> functions</li> <li>Changed: small corrections with Steam ID variable</li> <li>Fixed: small things with <code>getQuota()</code></li> </ul>"},{"location":"changelog/godot2/#version-151","title":"Version 1.5.1","text":"<ul> <li>Added: <code>getNumAchievements()</code>, <code>getAchievementAchievedPercent()</code>, <code>requestGlobalAchievementPercentages()</code> functions</li> <li>Added: related signals to new functions</li> <li>Added: minor notes</li> <li>Removed: is_valid for <code>updateLeaderboardHandle()</code></li> <li>Removed: deprecated function <code>requestAppProofOfPurchaseKey()</code></li> <li>Removed: callback for <code>requestAppProofOfPurchaseKey()</code></li> <li>Removed: commented out deprecated functions</li> </ul>"},{"location":"changelog/godot2/#version-150","title":"Version 1.5.0","text":"<ul> <li>Added: more Screenshot features</li> <li>Added: notes for callback</li> <li>Changed: documentation to reflect new features and signals</li> <li>Fixed: types in <code>validate_auth_ticket_response</code></li> </ul>"},{"location":"changelog/godot2/#version-140","title":"Version 1.4.0","text":"<ul> <li>Added: Auth Session functions added to Godot 3 branch, thanks to marcelofg55</li> <li>Added: Auth Session constants</li> </ul>"},{"location":"changelog/godot2/#version-130","title":"Version 1.3.0","text":"<ul> <li>Added: <code>getNumberOfCurrentPlayers()</code>, thanks to marcelofg55</li> <li>Added: <code>leaderboard_uploaded</code> and <code>number_of_current_players</code> callbacks, thanks to marcelofg55</li> <li>Changed: signals in godotsteam.h with CCallback instead of SteamCallback</li> </ul>"},{"location":"changelog/godot2/#version-121","title":"Version 1.2.1","text":"<ul> <li>Changed: instances of int32 and int64 to int32_t and int64_t respectively; mostly for Linux compilation</li> <li>Changed: readme to reflect Godot 3 release</li> </ul>"},{"location":"changelog/godot2/#version-120","title":"Version 1.2.0","text":"<ul> <li>Added: Remote Storage functionality for Steam Cloud, thanks to marcelofg55</li> <li>Added: new functions to documentation</li> <li>Changed: SCsub file to include \"no-pie\" fix for Ubuntu 16.10 and higher</li> </ul>"},{"location":"changelog/godot2/#version-110_1","title":"Version 1.1.0","text":"<ul> <li>Added: <code>getCurrentGameLanguage()</code></li> <li>Added: Pre-compiled engines and templates for Windows</li> <li>Added: change log to documentation</li> <li>Changed: minor things in godotsteam.cpp</li> </ul>"},{"location":"changelog/godot3/","title":"Godot 3.x Change-Log","text":"<p>A history of all to the godot3 branch.</p>"},{"location":"changelog/godot3/#version-326","title":"Version 3.26","text":"<ul> <li>Added: missing <code>user_achievement_icon_fetched</code> callback</li> <li>Added: new functions and enums to Apps class</li> <li>Added: new Steam Timeline class functions, enums, and constants</li> <li>Added: new functions to UGC class</li> <li>Added: new enum BetaBranchFlags</li> <li>Added: new value NETWORKING_CONFIG_IP_LOCAL_HOST_ALLOW_WITHOUT_AUTH for NetworkingConfigValue enum</li> <li>Changed: updated for Steamworks SDK 1.60</li> <li>Changed: <code>network_messages_session_failed</code> callback now returns the Steam ID associated with the user whose session failed</li> <li>Changed: <code>global_stats_received</code> had call result name change under-the-hood, does not affect anything</li> <li>Changed: <code>sendMessages()</code> now returns the message result</li> <li>Changed: <code>getQueryUGCResult()</code> now passes back additional value total_files_size</li> <li>Changed: enum RemoteStoragePlatform now cast as uint32_t, fixes Rust compatibility, thanks to GreenFox</li> <li>Changed: <code>item_installed</code> signal now returns additional data - legacy_content and manifest_id</li> <li>Fixed: incorrect signal name for <code>inventory_definition_update</code>, thanks to Foxushka</li> </ul>"},{"location":"changelog/godot3/#version-325","title":"Version 3.25","text":"<ul> <li>Added: Steam Matchmaking response handlers, thanks to jeremybeier</li> <li>Added: all missing Messages and Sockets constants</li> <li>Changed: Networking Messages, Sockets, and Utils now use Steam IDs instead of identity system</li> <li>Changed: UserUGCListSortOrder enums for readability</li> <li>Changed: UGCContentDescriptorID enums for readability</li> <li>Changed: <code>getResultStatus()</code> now returns the integer / enum</li> <li>Changed: cleaned up <code>addItemPreviewFile()</code>, <code>check_file_signature</code>, and <code>showGamepadTextInput()</code></li> <li>Changed: various bits and pieces</li> <li>Changed: IP logic for all related functions</li> <li>Changed: <code>addFavoriteGame()</code>, <code>initiateGameConnection()</code>, <code>terminateGameConnection()</code>, and <code>removeFavoriteGame()</code> now take strings for IP</li> <li>Changed: <code>getAuthSessionTicket()</code> now defaults to 0 for Steam ID</li> <li>Changed: IP address now accepted instead of IP references</li> <li>Fixed: <code>getFriendCount()</code> has correct bit-wise value</li> <li>Fixed: server browser functionality, thanks to jeremybeier</li> <li>Fixed: wrong string IP conversions, thanks to jeremybeier</li> <li>Fixed: server list request filters, thanks to jeremybeier</li> <li>Fixed: typo with UGC_MATCHING_UGC_TYPE_ITEMS enum</li> <li>Fixed: minor case issue with Workshop enums</li> <li>Fixed: <code>playerDetails()</code>, <code>requestFavoritesServerList()</code>, <code>requestInternetServerList()</code>, <code>requestSpectatorServerList()</code>, <code>requestFriendsServerList()</code>, <code>requestHistoryServerList()</code>, and <code>pingServer()</code>, thanks to jeremybeier</li> <li>Fixed: regressions caused by minor update</li> <li>Fixed: typo with NETWORKING_CONFIG_TYPE_STRING enum</li> <li>Fixed: typo with LOBBY_COMPARISON_EQUAL_TO_GREATER_THAN</li> <li>Fixed: in-editor docs</li> <li>Removed: Networking Types identity system and related bits</li> <li>Removed: P2P Networking constants as they are duplicates of the P2PSend enum</li> <li>Removed: previous, non-functioning Matchmaking Server call results</li> <li>Removed: <code>getIdentity()</code> as it is redundant now</li> </ul>"},{"location":"changelog/godot3/#version-324","title":"Version 3.24","text":"<ul> <li>Changed: internal argument for <code>executeJavascript()</code> to match godot4</li> <li>Changed: returned values for <code>getFriendGamePlayed()</code>, thanks to SlejmUr</li> <li>Changed: <code>getItemPrice()</code> now returns base price and price, thanks to SlejmUr</li> <li>Changed: <code>getFriendMessage()</code> and callback <code>connected_friend_chat_message</code> now returns the type, thanks to SlejmUr</li> <li>Changed: updated in-editor docs with changes</li> <li>Changed: minor organizational things, variable naming, etc.</li> <li>Fixed: missing info_flags key in <code>getSessionConnectionInfo()</code>, thanks to SlejmUr</li> <li>Fixed: <code>getServerDetails()</code> not sending back needed struct, thanks to SlejmUr</li> <li>Removed: unused internal variables</li> </ul>"},{"location":"changelog/godot3/#version-3231","title":"Version 3.23.1","text":"<ul> <li>Added: internal notes about where enums are found</li> <li>Added: minor extra helper functions from Steam's client header</li> <li>Added: <code>getSteamID32()</code> function to convert SteamID64 to SteamID</li> <li>Changed: replaced deprecated Controller struct with Inputs struct in <code>getDigitalActionData()</code></li> <li>Changed: in-editor docs</li> <li>Changed: leaderboard details max now set at highest instead of zero by default</li> <li>Fixed: incorrect constant for PUBLISHED_FILE_UPDATE_HANDLE_INVALID</li> <li>Fixed: <code>getAllLobbyData()</code> sending back all pairs, thanks to freehuntx</li> </ul>"},{"location":"changelog/godot3/#version-323","title":"Version 3.23","text":"<ul> <li>Added: new Remote Storage enum to WorkshopFileType</li> <li>Added: two new UGC enums to ItemState and ItemPreviewType</li> <li>Added: two new Friends class constants</li> <li>Added: new function <code>dismissGamepadTextInput()</code></li> <li>Added: new Remote Play enum, form factor for VR headset</li> <li>Added: two new result enums; not supported and family size limit exceeded</li> <li>Added: three new enums to NetworkingConfigValue</li> <li>Added: new general constant ACCOUNT_ID_INVALID</li> <li>Changed: FEATURE_KIOSK_MODE enum now deprecated</li> <li>Changed: minor housekeeping by rearranging some functions</li> <li>Changed: k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress was replaced by k_ESteamNetworkingConfig_SDRClient_DevTicket, value is the same but reference changed</li> <li>Changed: updated in-editor docs</li> <li>Fixed: spelling error in <code>getProfileItemPropertyInt()</code> bind</li> <li>Removed: App Lists class functions, callbacks, etc. due to SDK 1.59 changes</li> <li>Removed: Remote Play enums mistakenly added as constants</li> </ul>"},{"location":"changelog/godot3/#version-3224","title":"Version 3.22.4","text":"<ul> <li>Added: missing k_nSteamNetworkingSend_AutoRestartBrokenSession to constants</li> <li>Added: two missing Input constants: INPUT_HANDLE_ALL_CONTROLLERS and INPUT_MAX_ACTIVE_LAYERS</li> <li>Changed: <code>getInputTypeForHandle()</code> now returns int / enum instead of string for device models</li> <li>Changed: updated in-editor docs for missing content</li> <li>Changed: order of constants to be alphabetic</li> <li>Changed: changed returned variable name to <code>need_to_accept_tos</code> in <code>item_updated</code> callback</li> <li>Changed: Github Actions scripts, one for Vulkan and another for version numbers</li> </ul>"},{"location":"changelog/godot3/#version-3223","title":"Version 3.22.3","text":"<ul> <li>Changed: moved constants to separate file like in Godot 4.x branches</li> <li>Fixed: backported fixes for in-editor docs, thanks to sepTN</li> <li>Fixed: <code>requestClanOfficerList()</code> using wrong internal function, thanks to _sepTN</li> </ul>"},{"location":"changelog/godot3/#version-3222","title":"Version 3.22.2","text":"<ul> <li>Fixed: app ID automatically being set to 480, now default is 0 which makes GodotSteam ignore auto-setting app ID</li> </ul>"},{"location":"changelog/godot3/#version-3221","title":"Version 3.22.1","text":"<ul> <li>Added: two new arguments to <code>steamInit()</code> and <code>steamInitEx()</code> to set your app ID and run_callbacks interally, thanks to GreenFox</li> <li>Fixed: issue with callback that caused compiling failure in Linux</li> </ul>"},{"location":"changelog/godot3/#version-322","title":"Version 3.22","text":"<ul> <li>Added: two Music class callbacks</li> <li>Changed: <code>generateItems()</code>, <code>exchangeItems()</code>, <code>getItemsByID()</code>, and <code>startPurchase()</code> all list-based arguments are now PoolIntArrays</li> <li>Changed: <code>getItemsByID()</code> now takes one argument, counts the elements in the passed array instead</li> <li>Changed: <code>getItemsWithPrices()</code> no longer requires any arguments passed to it</li> <li>Changed: in-editor docs have been updated</li> <li>Fixed: <code>getResultItems()</code> now returns all item data</li> <li>Fixed: missing DEFVAL for <code>steamInitEx()</code></li> <li>Fixed: Joy Con name in <code>getInputTypeForHandle()</code></li> <li>Removed: <code>getNumItemsWithPrices()</code> as it was unnecessary</li> </ul>"},{"location":"changelog/godot3/#version-3213","title":"Version 3.21.3","text":"<ul> <li>Fixed: <code>requestEquippedProfileItems()</code> was missing method bind, thanks to BOTLANNER</li> <li>Fixed: <code>get_ticket_for_web_api</code> callback for getting actual ticket buffer, thanks to dicarne</li> <li>Fixed: compiler complaining about comparison between Steam enum and GodotSteam enum for <code>steamInitEx()</code></li> <li>Fixed: <code>getListenSocketAddress()</code> fixed to provide the actual address and optional port</li> <li>Changed: <code>createBrowser()</code> now sends proper NULL when empty string passed</li> <li>Changed: <code>html_browser_ready</code> from callback to proper call result</li> <li>Changed: cast handle in <code>setSize()</code> as Steam HHTMLBrowser</li> <li>Removed: unnecessary <code>steam_appid.txt</code> from zips in Github Actions</li> </ul>"},{"location":"changelog/godot3/#version-3212","title":"Version 3.21.2","text":"<ul> <li>Fixed: missing descriptions for some in-editor functions/signals</li> <li>Fixed: <code>receiveMessagesOnChannel()</code>, <code>receiveMessagesOnPollGroup()</code>, and <code>receiveMessagesOnConnection()</code> had overwriting dictionary keys</li> </ul>"},{"location":"changelog/godot3/#version-321","title":"Version 3.21","text":"<ul> <li>Added: new enums and constant related to new Steam initialization function</li> <li>Added: new enums for <code>NetworkingConfigValue</code></li> <li>Added: new intialization function <code>steamInitEx()</code> that is more verbose</li> <li>Added: new UGC function <code>getUserContentDescriptorPreferences()</code></li> <li>Added: new Remote Play function <code>startRemotePlayTogether()</code></li> <li>Changed: UGC function<code>setItemTags()</code> to have new argument for admin tags</li> <li>Changed: compatible with Steamworks SDK 1.58</li> <li>Changed: in-editor docs now reflect all</li> <li>Fixed: <code>gamepad_text_input_dismissed</code> signal passing back string instead of int for <code>app_id</code> </li> </ul>"},{"location":"changelog/godot3/#version-3201","title":"Version 3.20.1","text":"<ul> <li>Fixed: wrong variant type for <code>join_requested</code></li> </ul>"},{"location":"changelog/godot3/#version-320","title":"Version 3.20","text":"<ul> <li>Added: full GodotSteam documentation into the editor</li> <li>Added: <code>steamShutdown()</code> to allow Steamworks to be manually shutdown</li> <li>Added: <code>requestEquippedProfileItems()</code> function and <code>equipped_profile_items</code> callback</li> <li>Added: Steam Deck as Steam Input typ</li> <li>Changed: all enums are now directly linked to their SDK counterparts</li> <li>Changed: <code>getDigitalActionData()</code> returned keys are now state and active</li> <li>Changed: names of some Steam enums to be cleaner and leaner</li> <li>Changed: <code>getAppInstallDir()</code> now returns dictionary with absolute path and install size</li> <li>Fixed: some missing enum binds</li> <li>Fixed: missing function argument binds</li> <li>Removed: enums that are not in the SDK but Valve's docs</li> </ul>"},{"location":"changelog/godot3/#version-3193","title":"Version 3.19.3","text":"<ul> <li>Added: new Input callback <code>input_gamepad_slot_change</code></li> <li>Added: new User callback <code>get_ticket_for_web_api</code></li> <li>Added: new User function <code>getAuthTicketForWebApi()</code></li> <li>Changed: <code>getAuthSessionTicket()</code> argument is now optional, defaults to NULL</li> </ul>"},{"location":"changelog/godot3/#version-3192","title":"Version 3.19.2","text":"<ul> <li>Added: new return values for <code>overlay_toggled</code>; this will break compatibility with this</li> <li>Added: new Input and Parental Settings enums</li> <li>Added: new UGC Content Descriptor ID enums</li> <li>Added: new UGC functions <code>removeContentDescriptor()</code>, <code>addContentDescriptor()</code>, and <code>getQueryUGCContentDescriptors()</code></li> <li>Added: new signal <code>filter_text_dictionary_changed</code></li> <li>Changed: <code>getAuthSessionTicket()</code> now uses networking identities</li> <li>Changed: <code>gamepad_text_input_dismissed</code> now passes back the app ID</li> <li>Changed: Steam Input max analog and digital actions values</li> <li>Removed: ERegisterActivationCodeResult due to removal in SDK</li> </ul>"},{"location":"changelog/godot3/#version-3191","title":"Version 3.19.1","text":"<ul> <li>Fixed: issue with UGC tags occasionally getting lost upon update, thanks to EIREXE</li> </ul>"},{"location":"changelog/godot3/#version-319","title":"Version 3.19","text":"<ul> <li>Changed: various backports from godot4 branch</li> <li>Fixed: various lobby list functions now return the <code>server_list_request</code> handle</li> <li>Fixed: need for godotsteam.sh file on some Linux systems, thanks to mikix</li> <li>Fixed: typo in returned dictionary for <code>createSocketPair()</code></li> <li>Fixed: <code>requestInternetServerList()</code> causing crashes</li> </ul>"},{"location":"changelog/godot3/#version-3185","title":"Version 3.18.5","text":"<ul> <li>Fixed: <code>createListenSocketP2P()</code></li> <li>Fixed: other issues with reading array size</li> </ul>"},{"location":"changelog/godot3/#version-3184","title":"Version 3.18.4","text":"<ul> <li>Changed: documentation updates for Doxygen, thanks to Ralian</li> <li>Removed: <code>isCyberCafe()</code> function</li> </ul>"},{"location":"changelog/godot3/#version-3183","title":"Version 3.18.3","text":"<ul> <li>Added: networking type message constants</li> <li>Added: more descriptions and tutorial links to in-editor docs</li> <li>Fixed: <code>getLobbyData()</code> not returning UTF-8 encoded string</li> <li>Fixed: <code>sendLobbyChatMsg()</code> truncating non-English strings</li> <li>Removed: <code>MarketingMessageFlags</code> as they don't exist in the header files</li> </ul>"},{"location":"changelog/godot3/#version-3182","title":"Version 3.18.2","text":"<ul> <li>Changed: minor internal variable names</li> <li>Fixed: <code>filterText()</code> truncating input; thanks to tcoxon</li> </ul>"},{"location":"changelog/godot3/#version-3181","title":"Version 3.18.1","text":"<ul> <li>Added: link to SDK placeholder</li> <li>Added: more descriptions to in-editor docs</li> <li>Fixed: some regressions that made their way into 3.18</li> </ul>"},{"location":"changelog/godot3/#version-318","title":"Version 3.18","text":"<ul> <li>Added: <code>avatar_image_loaded</code> callback to get raw response from Steamworks</li> <li>Changed: project layout to be Git clone friendly</li> <li>Fixed: incorrectly named io_failure for steamworks_error signal, thanks to raulsntos</li> <li>Fixed: <code>getSessionConnectionInfo()</code> using old networking struct</li> <li>Removed: unused networking stricts</li> </ul>"},{"location":"changelog/godot3/#version-3175","title":"Version 3.17.5","text":"<ul> <li>Changed: <code>submitItemUpdate()</code> to use null if no notes are passed, thanks to mashumafi</li> <li>Removed: unused server signals</li> </ul>"},{"location":"changelog/godot3/#version-3174","title":"Version 3.17.4","text":"<ul> <li>Changed: <code>leaderboard_scores_downloaded</code> and <code>leaderboard_score_updated</code> now pass back their handles; this is incompatible with earlier versions</li> <li>Fixed: issue where <code>leaderboard_score_uploaded</code> would not fire if passed <code>leaderboard_handle</code> was not internally stored</li> </ul>"},{"location":"changelog/godot3/#version-3173","title":"Version 3.17.3","text":"<ul> <li>Fixed: <code>getVoice()</code> and <code>getAvailableVoice()</code> functions</li> <li>Removed: all server functionality, put back into server branch</li> </ul>"},{"location":"changelog/godot3/#version-3172","title":"Version 3.17.2","text":"<ul> <li>Fixed: location data structs for new Networking classes, thanks to Kryx-Ikyr</li> </ul>"},{"location":"changelog/godot3/#version-3171","title":"Version 3.17.1","text":"<ul> <li>Fixed: missing comma in <code>getVideoURL()</code> argument function</li> <li>Fixed: argument name mismatch with file_details_result</li> <li>Fixed: wrong int type for inventory update handle</li> <li>Fixed: not casting app ID for <code>addFavoriteGame()</code></li> <li>Fixed: wrong int type for server ID in <code>getLobbyGameServer()</code></li> <li>Fixed: not casting account ID for <code>createQueryUserUGCRequest()</code></li> </ul>"},{"location":"changelog/godot3/#version-317","title":"Version 3.17","text":"<ul> <li>Added: new functions, enums for Steamworks SDK 1.55</li> <li>Fixed: <code>getPublicIP()</code> in Game Servers class</li> </ul>"},{"location":"changelog/godot3/#version-3161","title":"Version 3.16.1","text":"<ul> <li>Fixed: issues with <code>getPSNID()</code> and <code>getStadiaID()</code> functions when compiling on Linux</li> </ul>"},{"location":"changelog/godot3/#version-316","title":"Version 3.16","text":"<ul> <li>Added: new enums for Community Profile item types and properties in Friends class</li> <li>Added: new functions <code>hasEquippedProfileItem()</code>, <code>getProfileItemPropertyString()</code>, and <code>getProfileItemPropertyInt()</code> in Friends class</li> <li>Added: new callbacks/signals <code>equipped_profile_items_changed</code> and <code>equipped_profile_items</code> in Friends class</li> <li>Added: new networking identity types</li> <li>Added: new functions <code>setXboxPairwiseID()</code>, <code>getXboxPairwiseID()</code>, <code>setPSNID()</code>, <code>getPSNID()</code>, <code>setStadiaID()</code>, and <code>getStadiaID()</code> to Networking Types class</li> <li>Changed: minor correction to <code>createListenSocketP2P()</code> in attempt to fix possible crash</li> </ul>"},{"location":"changelog/godot3/#version-315","title":"Version 3.15","text":"<ul> <li>Changed: <code>sendMessageToConnection()</code> and <code>sendMessages()</code> now take PoolByteArrays to send any data</li> <li>Fixed: issue with receiving messages, now allows more than one at a time; thanks to Frostings</li> <li>Fixed: <code>getQueryUGCChildren()</code> not working correctly; thanks to EIREXE</li> </ul>"},{"location":"changelog/godot3/#version-314","title":"Version 3.14","text":"<ul> <li>Added: inventory handle argument to various Inventory class functions, defaults to 0 to use internally store argument</li> <li>Changed: various Inventory class functions to send back the new inventory handle as well as storing it internally</li> <li>Fixed: various string issues; thanks to Green Fox</li> <li>Fixed: <code>file_read_async_complete</code> call result not sending back the file buffer</li> <li>Fixed: missing variant type for <code>avatar_loaded</code> signal</li> <li>Fixed: <code>enumerate_following_list</code> calling the wrong signal name</li> <li>Fixed: print of Steamworks error didn't contain signal name</li> <li>Fixed: some variable and argument names</li> <li>Fixed: <code>deserializeResult()</code> to accept incoming PoolByteArray buffer</li> <li>Fixed: various message functions in new networking classes; thanks to Avantir-Chaosfire</li> </ul>"},{"location":"changelog/godot3/#version-3133","title":"Version 3.13.3","text":"<ul> <li>Fixed: get correct size of lobby message in <code>sendLobbyChatMsg()</code>; thanks to GreenFox</li> </ul>"},{"location":"changelog/godot3/#version-3132","title":"Version 3.13.2","text":"<ul> <li>Fixed: various functions and callbacks that sent back scrambled IP addresses</li> </ul>"},{"location":"changelog/godot3/#version-3131","title":"Version 3.13.1","text":"<ul> <li>Changed: all HTML Surface functions can now have the handle passed to them or not; will use internal handle if not passed</li> <li>Changed: all HTML Surface callbacks now send back their browser handles, if applicable</li> <li>Changed: <code>fileWrite()</code> and <code>fileWriteAsync()</code> now allow you to pass size or not; will determine if not passed</li> <li>Fixed: <code>fileWrite()</code> and <code>fileWriteAsync()</code> passing wrong byte array size</li> </ul>"},{"location":"changelog/godot3/#version-313","title":"Version 3.13","text":"<ul> <li>Added: missing function <code>getPlaybackStatus()</code> to Music class</li> <li>Added: missing function <code>setDurationControlOnlineState()</code> to Users class</li> <li>Added: missing signals for Matchmaking Servers</li> <li>Added: missing PropertyInfo data for signals</li> <li>Changed: <code>serverInit()</code> now takes the individual arguments and no longer a dictionary of arguments</li> <li>Changed: <code>getAppName()</code>, <code>getAppListInstallDir()</code>, and <code>getAppListBuildId()</code> in App Lists to use uint32_t instead of uint32</li> <li>Changed: <code>initGameServer()</code> to use correct arguments</li> <li>Changed: all signal / callback names for Game Server class to lower-case to match the all others</li> <li>Changed: <code>server_connect_failure</code>, <code>policy_response</code>, <code>client_group_status</code> callback to match function names</li> <li>Changed: various variables in Game Server class callbacks to match the others</li> <li>Changed: <code>setMaxPlayerCount()</code> argument to players_max from max to be more clear</li> <li>Changed: <code>setPasswordProtected()</code> argument to password_protected from password to be more clear</li> <li>Changed: call result / signal stat_received to stats_received</li> <li>Changed: <code>createCookieContainer()</code> now sends back the cookie_handle</li> <li>Changed: <code>checkResultSteamID()</code> changed argument name to match</li> <li>Changed: <code>getItemsWithPrices()</code> return dictionary name</li> <li>Changed: <code>getAppID()</code> now returns uint32_t</li> <li>Changed: <code>getFavoriteGames()</code> to have more distinct port names in return dictionary</li> <li>Changed: some returned types and argument types to better match their Steamworks counterparts</li> <li>Changed: names of some keys and some integer types in <code>getQueryUGCResult()</code> return dictionary</li> <li>Changed: keys in <code>getBeaconDetails()</code> return dictionary to be more clear</li> <li>Changed: removed data_size argument from various Remote Storage functions and get size internally</li> <li>Changed: <code>playerDetails()</code> and <code>serverRules()</code> IP argument to a string</li> <li>Changed: various Networking Messages, Networking Sockets, and Networking Utils functions to use internal struct system with Networking Type functions</li> <li>Changed: a variety of miscellaneous small and corrections</li> <li>Fixed: some missing function binds</li> <li>Fixed: <code>lobby_message</code> callback data, thanks to kongo555</li> <li>Fixed: missing default value for <code>getAvailableP2PPacketSize()</code>, <code>readP2PPacket()</code>, <code>sendP2PPacket()</code></li> <li>Fixed: <code>getAnalogActionData()</code> so the return dictionary has the right keys</li> <li>Fixed: <code>getUserSteamFriends()</code>, <code>getUserSteamGroups()</code> to give the correct Steam ID back</li> <li>Fixed: <code>getFriendGamePlayed()</code> using wrong key name in return dictionary</li> <li>Fixed: <code>toIdentityString()</code> to provide the correct string data</li> <li>Fixed: <code>parseIdentityString()</code> to properly parse back the string data</li> <li>Fixed: <code>getSesssionConnectionInfo()</code> now passes back all data</li> <li>Fixed: <code>getLocalPingLocation()</code> should return both the ping and location ID in a dictionary</li> <li>Fixed: <code>getPingToDataCenter()</code>, <code>getPOPList()</code>, <code>parsePingLocationString()</code>, <code>closeConnection()</code>, <code>getAuthenticationStatus()</code>, <code>getConnectionInfo()</code>, <code>createSocketPair()</code> functions</li> <li>Removed: <code>requestAllProofOfPurchaseKeys()</code> and <code>requestAppProofOfPurchaseKey()</code> as they are deprecated</li> <li>Removed: <code>gameplay_stats</code> signal from Game Server class as it wasn't connected to anything</li> <li>Removed: <code>getUserDataFolder()</code> as it is deprecated</li> <li>Removed: leading _ in front of callbacks and call results internally</li> <li>Removed: <code>initGameServer()</code> as it is unnecessary</li> <li>Removed: <code>connectByIPAddress()</code>, <code>isPingMeasurementInProgress()</code>, <code>setLinkedLobby()</code> as they are not in the SDK</li> </ul>"},{"location":"changelog/godot3/#version-3121","title":"Version 3.12.1","text":"<ul> <li>Fixed: incorrect case on <code>app_installed</code> and <code>app_uninstalled</code>, thanks to craftablescience</li> </ul>"},{"location":"changelog/godot3/#version-312","title":"Version 3.12","text":"<ul> <li>Added: missing D_METHOD to all functions, should show the right argument names in-editor</li> <li>Added: Input origin enums for PS5 and Steam Deck</li> <li>Added: Input Types, Input Glyph Style, Input Glyph Size, and Input Configuration Enable Type enums</li> <li>Added: <code>getConnectionRealTimeStatus()</code>, <code>configureConnectionLanes()</code>, <code>connectP2PCustomSignaling()</code>, <code>receivedP2PCustomSignal()</code>, <code>getCertificateRequest()</code>, <code>setCertificate()</code>, <code>resetIdentity()</code>, <code>runNetworkingCallbacks()</code>, <code>beginAsyncRequestFakeIP()</code>, <code>getFakeIP()</code>, <code>createListenScoketP2PFakeIP()</code>, <code>getRemoveFakeIPForConnection()</code>, and <code>createFakeUDPPort()</code> functions and callback to NetworkingSockets class</li> <li>Added: <code>dismissFloatingGamepadTextInput()</code> function to Utils class</li> <li>Added: <code>setTimeCreatedDateRange()</code> and <code>setTimeUpdatedDateRange()</code> to UGC class</li> <li>Added: NetworkingeDebugOutputType enums for NetworkingUtils</li> <li>Added: missing constant binds for Server API, OverlayToWebPageMode</li> <li>Fixed: minor compiler warnings</li> <li>Fixed: empty file hash being returned by file_details_result callback</li> <li>Fixed: a variety of small bugs and possible crashes, thanks to qarmin</li> <li>Fixed: missing binds for <code>getFriendsGroupName()</code>, <code>getFriendsGroupMembersList()</code>, <code>getFriendsGroupIDByIndex()</code>, <code>getFriendsGroupCount()</code>, <code>getFriendMessage()</code>, <code>getFriendCoplayTime()</code>, <code>getFriendCoplayGame()</code>, <code>getCoplayFriendCount()</code>, <code>getCoplayFriend()</code>, <code>getClanTag()</code>, <code>getClanName()</code>, <code>getClanCount()</code>, <code>getClanChatMessage()</code>, <code>getClanByIndex()</code>, <code>getClanActivityCounts()</code>, <code>fileWriteAsync()</code>, <code>fileWriteStreamCancel()</code>, <code>fileWriteStreamClose()</code>, <code>fileWriteStreamOpen()</code>, <code>fileWriteStreamWriteChunk()</code>, <code>getCachedUGCCount()</code>, <code>getUGCDownloadProgress()</code>, <code>getUGCDetails()</code>, <code>fileReadAsync()</code>, <code>getOPFSettings()</code>, <code>getOPFStringForApp()</code>, <code>getVideoURL()</code>, <code>isBroadcasting()</code> functions</li> <li>Fixed: <code>setPNGIcon()</code> and <code>updateCurrentEntryCoverArt()</code> in Music Remote class</li> <li>Fixed: missing <code>getUGCDetails()</code> and <code>getUGCDownloadProgress()</code> functions</li> <li>Changed: updated doc_class file for in-editor documentation</li> <li>Changed: updated to Steamworks 1.53</li> <li>Changed: lobby_data_update, removed lobby data queries as they should be done manually</li> <li>Changed: minor tweaks under-the-hood</li> <li>Changed: various generic 'int' to their actual types</li> <li>Changed: renamed servers and server stats to game server and game server stats respectively, to match SDK</li> <li>Changed: SteamNetworkingQuickConnectionStatus to SteamNetConnectionRealTimeStatus_t per Steamworks SDK 1.53, causes a break in previous GodotSteam versions</li> <li>Changed: <code>getConfigValueInfo()</code>, removed name and next value from return dictionary as they are no longer passed by function in SDK 1.53</li> <li>Changed: rearranged functions in godotsteam.cpp class binds to match [godotsteam.h] order</li> <li>Changed: enum constant binds to match [godotsteam.h] enum order</li> <li>Removed: unused callback <code>new_launch_query_parameters</code>, <code>broadcast_upload_start</code>, <code>broadcast_upload_stop</code></li> <li>Removed: <code>allocateMessage()</code> as it shouldn't be used solo</li> <li>Removed: <code>getQuickConnectionStatus()</code> and <code>getFirstConfigValue()</code> as they were removed from SDK 1.53</li> <li>Removed: <code>setDebugOutputFunction()</code> from Networking Utils</li> </ul>"},{"location":"changelog/godot3/#version-3111","title":"Version 3.11.1","text":"<ul> <li>Removed: unused structs</li> </ul>"},{"location":"changelog/godot3/#version-311","title":"Version 3.11","text":"<ul> <li>Added: server branch merged into master</li> <li>Changed: spacing in default arguments in [godotsteam.h]</li> <li>Changed: renamed STEAM_GAMESERVER_CALLBACK as STEAM_CALLBACK</li> <li>Removed: <code>SteamGameServer_RunCallbacks()</code> function</li> </ul>"},{"location":"changelog/godot3/#version-3105","title":"Version 3.10.5","text":"<ul> <li>Added: more helper functions for newer networking classes, translations for steamnetworkingtypes</li> <li>Fixed: lots of compiler warnings on Linux, thanks to gregcsokas</li> </ul>"},{"location":"changelog/godot3/#version-3104","title":"Version 3.10.4","text":"<ul> <li>Added: new helper functions for newer networking classes, translations for steamnetworkingtypes</li> <li>Fixed: default argument inputInit function, thanks to hhyyrylainen</li> </ul>"},{"location":"changelog/godot3/#version-3103","title":"Version 3.10.3","text":"<ul> <li>Changed: various internal variable / arguments names for clarity, will affect signal-returned dictionaries</li> </ul>"},{"location":"changelog/godot3/#version-3102","title":"Version 3.10.2","text":"<ul> <li>Removed: not logged in as error condition in <code>steamInit()</code> function</li> </ul>"},{"location":"changelog/godot3/#version-3101","title":"Version 3.10.1","text":"<ul> <li>Changed: various compilation errors for OSX, thanks to SapphireMH</li> <li>Removed: <code>receiveRelayAuthTicket()</code>, <code>findRelayAuthTicketForServer()</code>, <code>getHostedDedicatedServerAddress()</code>, and <code>getGameCoordinatorServerLogin()</code> as they rely on datagram header that was removed from base SDK</li> </ul>"},{"location":"changelog/godot3/#version-310","title":"Version 3.10","text":"<ul> <li>Added: various Steam Deck specific functions, thanks to EIREXE</li> <li>Added: new AppLists class of functions and callbacks</li> <li>Added: new or missing App functions, callbacks, and enums</li> <li>Added: OverlayToWebPageMode enum and <code>unread_chat_messages_changed</code> callback for Friends class</li> <li>Added: new Input functions and callbacks</li> <li>Added: new Parental Settings fuctions, callback, and enums</li> <li>Added: new Remote Storage functions, callback, and enums</li> <li>Added: new UGC functions, callbacks, and enum</li> <li>Added: memory allocation corrections</li> <li>Changed: updated various Input class functions</li> <li>Changed: lots of argument names internally, has no effect on usage</li> <li>Fixed: some enum names</li> <li>Fixed: various server list filter functions in Matchmaking Servers class</li> <li>Fixed: <code>receivedRelayAuthTicket()</code>, <code>getGameCoordinatorServerLogin()</code>, <code>FindRelayAuthTicketForServer()</code> in Networking Sockets class</li> <li>Removed: second call for steam_api.h in godotsteam.cpp</li> </ul>"},{"location":"changelog/godot3/#version-397","title":"Version 3.9.7","text":"<ul> <li>Added: two Matchmaking Server call results</li> <li>Added: <code>requestHandle()</code> to various HTTP functions so handle can be passed</li> <li>Added: new internal variables for Matchmaking Servers</li> <li>Added: <code>setSyncPlatforms()</code> in Remote Storage, actual function was missing</li> <li>Changed: <code>serverRequest()</code> is now <code>serverListRequest()</code></li> <li>Changed: various HTTP callbacks now return cookieHandle as well</li> <li>Fixed: issue where lobby chat messages were truncated for every accented character used</li> <li>Fixed: <code>pingServer()</code>, <code>playerDetails()</code>, <code>serverRules()</code> functions in Matchmaking Servers</li> <li>Fixed: <code>receiveMessagesOnChannel()</code>, <code>receiveMessagesOnPollGroup()</code>, <code>receiveMessagesOnConnection()</code> in Networking Sockets, should now return an array of messages</li> <li>Fixed: <code>connectByIPAddress()</code>, <code>createSocketPair()</code> in Networking Sockets</li> <li>Fixed: <code>network_messages_session_request</code> callback, now provides identity of remote host</li> <li>Fixed: <code>network_connection_status_changed</code> callback, now provides the full connection information</li> <li>Removed: unnecessary bool from <code>setLeaderboardDetailsMax()</code></li> </ul>"},{"location":"changelog/godot3/#version-396","title":"Version 3.9.6","text":"<ul> <li>Added: ability to provide different locations for custom modules, thanks to dsnopek</li> <li>Changed: <code>gamepad_text_input_dismissed</code> to return submitted boolean and use UTF8 string, thanks to EIREXE</li> </ul>"},{"location":"changelog/godot3/#version-395","title":"Version 3.9.5","text":"<ul> <li>Added: <code>setLeaderboardDetailsMax()</code> function back in to set the internal details variable</li> <li>Fixed: <code>leaderboard_scores_downloaded</code> sigal to provide the actual details for leaderboard results</li> </ul>"},{"location":"changelog/godot3/#version-394","title":"Version 3.9.4","text":"<ul> <li>Fixed: conversion issue in <code>getGlobalStatInt()</code> and <code>getGlobalStatIntHistory()</code> that caused compiling failure on Linux</li> </ul>"},{"location":"changelog/godot3/#version-393","title":"Version 3.9.3","text":"<ul> <li>Changed: restored <code>getGlobalStatInt()</code> and <code>getGlobalStatIntHistory()</code> functions</li> </ul>"},{"location":"changelog/godot3/#version-392","title":"Version 3.9.2","text":"<ul> <li>Added: <code>getNextMostAchievedAchievementInfo()</code> function, moved out of <code>getMostAchievedAchievementInfo()</code></li> <li>Fixed: <code>getMostAchievedAchievementInfo()</code> causing a crash</li> </ul>"},{"location":"changelog/godot3/#version-391","title":"Version 3.9.1","text":"<ul> <li>Added: documentation to P2P functions, constants, and signals; thanks to blaze-the-star</li> <li>Fixed: <code>destroyResult()</code> and <code>getResultItemProperty()</code> being bound to the wrong functions</li> <li>Fixed: incorrect function bind from pull request</li> <li>Removed: unused C++ line from config.py for Mac, which caused compiling issues</li> <li>Removed: <code>storeStats()</code> from <code>setAchievement()</code>, <code>resetAllStats()</code> as it should be called manually after them</li> <li>Removed: <code>requestCurrentStats()</code> from <code>storeStats()</code> as it should be called manually</li> </ul>"},{"location":"changelog/godot3/#version-39","title":"Version 3.9","text":"<ul> <li>Added: new UGC functions <code>addRequiredTagGroup()</code>, <code>getQueryUGCNumTags()</code>, <code>getQueryUGCTag()</code>, <code>getQueryUGCTagDisplayName()</code></li> <li>Added: new Friends function <code>activateGameOverlayInviteDialogConnectString()</code></li> <li>Added: default values to leaderboard functions, you can now pass handles for specific leaderboards or use the internally-stored, last-called handle</li> <li>Added: multiple controller types from Input function <code>getInputTypeForHandle()</code></li> <li>Changed: minor readability to function arguments and defaults</li> <li>Changed: additional spacing and readability to overall module</li> <li>Changed: replaced leaderboardDetailsMax with k_cLeaderboardDetailsMax</li> <li>Changed: applied EIREXE's UTF-16 fix module-wide</li> <li>Changed: minor corrections to comments and added missing comments</li> <li>Changed: some additional code to some call results and callbacks</li> <li>Changed: metadata length for UGC to 5000 from 255, thanks to EIREXE</li> <li>Changed: <code>beginAuthSession()</code> to use new auth function arguments</li> <li>Changed: <code>cancelAuthTicket()</code> to actually use the Steamworks function</li> <li>Fixed: renamed <code>addItemToFavorite()</code> to <code>addItemToFavorites()</code> to match SDK</li> <li>Fixed: incorrect class check in some UGC functions</li> <li>Fixed: minor corrections to various functions</li> <li>Fixed: <code>destroyResult()</code> and <code>getResultItemProperty()</code> being bound to the wrong functions</li> <li>Removed: <code>setLeaderboardDetailsMax()</code> as it is unnecessary</li> <li>Removed: <code>getAuthSessionTicketID()</code> as it is no longer useful due to auth function</li> </ul>"},{"location":"changelog/godot3/#version-382","title":"Version 3.8.2","text":"<ul> <li>Added: different avatar constants</li> <li>Changed: array deletions for Clang, thanks to SapphireMH</li> <li>Changed: initializing char text, thanks to SapphireMH</li> <li>Fixed: <code>createQueryUserUGCRequest()</code> being commented out accidentally</li> <li>Fixed: logic check for <code>setOverlayNotificationPosition()</code>, thanks to SapphireMH</li> <li>Fixed: UTF8 not being handled correctly in some UGC functions, thanks to EIREXE</li> </ul>"},{"location":"changelog/godot3/#version-381","title":"Version 3.8.1","text":"<ul> <li>Added: extra newline beween each class section for readability</li> <li>Added: new signal, steamworks_error, currently used for call results failures</li> <li>Changed: cleared most items from to-do list</li> <li>Changed: <code>getSyncPlatforms()</code> now returns a dictionary with the bitwise and full name version of the platform</li> <li>Changed: separated callbacks and call results in the godotsteam.cpp into two categories</li> </ul>"},{"location":"changelog/godot3/#version-38","title":"Version 3.8","text":"<ul> <li>Added: default argument to <code>steamInit()</code> to pull all current stats or not, defaults to true so no one has to change anything</li> <li>Added: new SteamNetworkingMessages class; with functions, callbacks, constants, and enums</li> <li>Added: all missing functions due to 5 argument limit in Godot</li> <li>Changed: filterText updated to match new SDK 1.50 function</li> <li>Changed: HTTP class <code>setCookie()</code> to <code>setHTTPCookie()</code> to prevent confusion with HTML <code>setCookie()</code></li> <li>Changed: moved <code>fileLoadDialogReponse()</code> into <code>html_file_open_dialog</code> callback as it must follow the call anyway</li> <li>Fixed: <code>retrieveConnectionDetails()</code> and <code>getAllLobbyData()</code> functions</li> <li>Fixed: (probably) various NetworkingSockets and NetworkingUtils functions</li> </ul>"},{"location":"changelog/godot3/#version-37","title":"Version 3.7","text":"<ul> <li>Added: Networking Sockets class - all functions, enums, structs, and callbacks (still beta in Steamworks)</li> <li>Added: Networking Utils class - all functions, enums, structs, and callbacks (still beta in Steamworks)</li> <li>Added: Game Search callbacks, enums, and functions</li> <li>Added: missing Steam Parties functions</li> <li>Changed: bIOFailure argument naming in godotsteam.cpp to ioFailure</li> <li>Fixed: issue where Cyrillic characters did not display correctly or at all</li> <li>Fixed: call result for <code>JoinParty()</code>, was previously callback</li> <li>Removed: mingw_patch.py since it fixes one issue but creates additional issues</li> </ul>"},{"location":"changelog/godot3/#version-361","title":"Version 3.6.1","text":"<ul> <li>Changed: function <code>getLobbyDataByIndex()</code> to <code>getAllLobbyData()</code></li> <li>Changed: commented out <code>getAllLobbyData()</code> until crash is fixed</li> <li>Fixed: issue where not having the game installed or owning the game caused a crash</li> </ul>"},{"location":"changelog/godot3/#version-36","title":"Version 3.6","text":"<ul> <li>Added: newest functions for Apps, Friends, and UserStats</li> <li>Added: all functions and callbacks for Videos</li> <li>Added: MinGW patch file for people using MinGW, thanks to MichaelBelousov</li> <li>Added: all remaining Remote Storage, Utils, and Users functions and callbacks</li> <li>Changed: some User callbacks were actually call results</li> <li>Changed: moved callback code block to end of function block in godotsteam.cpp</li> <li>Fixed: incorrect signal link for <code>unsubscribe_item</code> and <code>subscribe_item</code> callbacks</li> </ul>"},{"location":"changelog/godot3/#version-35","title":"Version 3.5","text":"<ul> <li>Added: all Music Remote functions, callbacks, enums, and constants</li> <li>Added: all Parties functions, callbacks, enums, and constants</li> <li>Added: placeholders for function classes not added yet</li> <li>Changed: minor tweaks to layout, comments, etc.</li> <li>Changed: swapped <code>getAuthSessionTicketID()</code> and <code>getAuthSessionTicket()</code> to make more sense</li> <li>Changed: moved pragma into Windows if</li> <li>Fixed: <code>getAuthSessionTicket()</code> to properly give buffer, thanks to EIREXE</li> </ul>"},{"location":"changelog/godot3/#version-341","title":"Version 3.4.1","text":"<ul> <li>Added: organization separators for all binds</li> <li>Changed: enums are now callable as constants in Godot</li> <li>Changed: case on enums</li> <li>Fixed: some mis-spelling in enums</li> </ul>"},{"location":"changelog/godot3/#version-34","title":"Version 3.4","text":"<ul> <li>Added: <code>getAuthSessionTicketID()</code> to aquire additional ticket data</li> <li>Added: additional pragma to silence offset warnings in Steamworks SDK itself</li> <li>Changed: <code>steamInit()</code> status results to use internal enums</li> <li>Changed: <code>getLeaderboardSortMethod()</code> now returns a dictionary with result and verbal response</li> <li>Changed: <code>getLeaderboardDisplayType()</code> now returns a dictionary with result and verbal response</li> <li>Changed: <code>getLeaderboardEntries()</code> to have a default failure response</li> <li>Changed: <code>leaderboard_scores_downloaded</code> callback now incorporates <code>getDownloadLeaderboardEntry()</code> to streamline process, callback returns the result array now</li> <li>Changed: complete overhaul of enums and constants</li> <li>Changed: leaderboardDetailsMax default from 0 to 10</li> <li>Fixed: various void functions</li> <li>Fixed: casting for <code>addRequestLobbyListNumericalFilter()</code>, <code>addRequestLobbyListStringFilter()</code>, <code>addRequestLobbyListDistanceFilter()</code></li> <li>Fixed: <code>setItemTags()</code>, thanks to EIREXE</li> <li>Fixed: missing publishedFileID in return from <code>GetQueryUGCResult()</code></li> <li>Fixed: <code>getGlobalStatInt()</code> and <code>getGlobalStatIntHistory()</code></li> <li>Removed: <code>getLeaderboardHandle()</code> as redundant</li> <li>Removed: <code>getDownloadedLeaderboardEntry()</code> as it should not be called manually, has been added to <code>leaderboard_scores_download</code> callback</li> </ul>"},{"location":"changelog/godot3/#version-332","title":"Version 3.3.2","text":"<ul> <li>Added: all Inventory functions, callbacks, and enums</li> <li>Added: rule to suppress MSVC-only warning about strcpy</li> <li>Fixed: minor corrections to Inputs, especially those copied over from Controllers (deprecated)</li> <li>Fixed: tons of warnings for callbacks in Unix compiling</li> <li>Fixed: printf warnings for int</li> <li>Removed: unnecessary browserHandle argument from HTML functions</li> <li>Removed: unnecessary browserHandle returns from HTML callbacks</li> <li>Removed: unnecessary cookieHandle argument from HTTP functions</li> <li>Removed: unnecessary cookieHandle returns from HTTP callbacks</li> </ul>"},{"location":"changelog/godot3/#version-331","title":"Version 3.3.1","text":"<ul> <li>Added: all HTML Surface functions, callbacks, and enums</li> <li>Added: all HTTP functions, callbacks, and enums</li> <li>Changed: <code>sendRemotePlayTogetherInvite()</code> now works since it was added back to the SDK</li> <li>Fixed: (probably) output for <code>getLaunchCommandLine()</code></li> </ul>"},{"location":"changelog/godot3/#version-33","title":"Version 3.3","text":"<ul> <li>Added: all Steam Input functions; used to be Steam Controller</li> <li>Added: all Steam Input constants</li> <li>Added: new Apps functions</li> <li>Added: missing Friends functions</li> <li>Added: missing Screenshots functions</li> <li>Added: all missing Screenshot constants</li> <li>Changed: removed Steam Controller as it is now deprecated</li> <li>Changed: split up call results and callbacks in [godotsteam.h] for editing ease</li> <li>Changed: <code>user_stats_received</code> to <code>current_stats_received</code> for <code>requestCurrentStats()</code> callback / signal</li> <li>Changed: sorted Apps and Friends functions alphabetically like Steamworks Docs to find new functions easier</li> <li>Changed: <code>getAchievementIcon()</code>; now returns the handle</li> <li>Changed: <code>getInputTypeForHandle()</code> to output verbose controller type</li> <li>Changed: SteamInput function init to <code>inputInit()</code></li> <li>Changed: SteamInput function shutdown to <code>inputShutdown()</code></li> <li>Removed: <code>user_achievement_icon_fetched</code> signal / callback as it is never called</li> </ul>"},{"location":"changelog/godot3/#version-321_1","title":"Version 3.2.1","text":"<ul> <li>Added: back some needed UGC constants</li> <li>Changed: int to uint32 in some for loops</li> <li>Fixed: compiling issues on Linux</li> </ul>"},{"location":"changelog/godot3/#version-320_1","title":"Version 3.2.0","text":"<ul> <li>Added: all remaining UGC functions and callbacks</li> <li>Added: all new Remote Play functions and callbacks</li> <li>Added: remaining UGC constants and enums</li> <li>Added: relevant Remote Storage callbacks for UGC</li> <li>Added: back some needed UGC constants</li> <li>Changed: renamed some UGC enums for consistency</li> <li>Changed: <code>getItemDownloadInfo()</code> to give proper default return</li> <li>Fixed: a few missing default returns</li> <li>Removed: non-listed UGC enums</li> </ul>"},{"location":"changelog/godot3/#version-31","title":"Version 3.1","text":"<ul> <li>Added: all remaining User Stats functions</li> <li>Added: missing User Stats constants, mostly leaderboard stuff</li> <li>Added: missing default return values in some functions</li> <li>Changed: <code>getAchievementAndUnlockTime()</code> to return actual data</li> <li>Changed: <code>user_achievement_icon_fetched</code> callback to return icon data for parsing in-game</li> <li>Changed: value in D_METHOD for <code>setLeaderboardDetailsMax()</code> to match function</li> <li>Changed: <code>getDownloadedLeaderboardEntry()</code> to use handle correctly</li> <li>Fixed: delete used memory in <code>getInstalledDepots()</code></li> </ul>"},{"location":"changelog/godot3/#version-302","title":"Version 3.0.2","text":"<ul> <li>Added: more verbose response to <code>steamInit()</code>, now returns a dictionary</li> <li>Added: missing initialization constants</li> <li>Changed: <code>steamInit()</code> to give actual response on Steamworks status (from bool to int)</li> <li>Fixed: <code>currentAppID()</code> not utilized correctly</li> </ul>"},{"location":"changelog/godot3/#version-301","title":"Version 3.0.1","text":"<ul> <li>Added: MacOS C++ rule back in for compiling</li> <li>Added: all missing Steam Utils functions (except deprecated or non-relevant functions)</li> <li>Added: additional ENUMS for Steam Utils</li> <li>Added: missing failure conditions for some Steam Utils functions</li> <li>Changed: output for <code>getFriendGamePlayed()</code> to show game information even if no valid lobby</li> <li>Changed: order of previous Steam Utils functions to be alphabetical with new ones</li> <li>Changed: <code>gamepad_text_input_dismissed</code> callback</li> <li>Fixed: <code>lobby_message</code> bug, thanks to Frostings</li> </ul>"},{"location":"changelog/godot3/#version-30","title":"Version 3.0","text":"<ul> <li>Added: missing Matchmaking signals-callbacks</li> <li>Added: missing User signals-callbacks</li> <li>Added: missing Utility signals-callbacks</li> <li>Added: <code>join_requested</code>, <code>screenshot_requested</code> callback</li> <li>Changed: merged Godot 3.0.6 into Master branch</li> <li>Changed: callback descriptions updated</li> <li>Changed: organization of cpp and h files for better readability</li> <li>Changed: signal <code>lobby_message_received</code> to <code>lobby_message</code></li> <li>Changed: <code>server_connect</code> and <code>server_disconnected</code> renamed to <code>steam_server_connect</code> and <code>steam_server_disconnected</code> respectively</li> <li>Changed: <code>leaderboard_loaded</code>, <code>leaderboard_uploaded</code>, and <code>leaderboard_entries_loaded</code> renamed to <code>leaderboard_find_result</code>, <code>leaderboard_score_uploaded</code>, and <code>leaderboard_scores_downloaded</code> respectively</li> <li>Changed: <code>workshop_item_created</code>, <code>workshop_item_installed</code>, and <code>item_updated</code> renamed to <code>item_created</code>, <code>item_installed</code>, and <code>workshop_item_updated</code> respectively</li> <li>Changed: renamed workshop to UGC to match Steamworks</li> <li>Fixed: <code>addFavoriteGame()</code> and <code>getItemInstallInfo()</code> functions</li> <li>Removed: <code>connection_changed</code> signal</li> </ul>"},{"location":"changelog/godot3/#version-285","title":"Version 2.8.5","text":"<ul> <li>Added: Networking functions, thanks to Antokolos</li> <li>Changed: linked against Steamworks 1.44</li> <li>Fixed: <code>leaderboard_uploaded</code> always returning false even when successful</li> </ul>"},{"location":"changelog/godot3/#version-284","title":"Version 2.8.4","text":"<ul> <li>Added: <code>persona_state_change</code> callback</li> <li>Added: additional user statistics and achievement signals</li> <li>Added: <code>join_game_requested</code> signal, thanks to Fischer96</li> <li>Changed: dictionary term 'ret' to 'success' in <code>getImageRGBA()</code> and <code>getImageSize()</code></li> <li>Changed: dictionary term 'buf' to 'buffer' in <code>getImageRGBA()</code></li> <li>Changed: <code>getFriendAvatar()</code> to <code>getPlayerAvatar()</code></li> <li>Changed: <code>avatar_loaded</code> now sends back Steam ID of avatar, thanks to avencherus</li> <li>Fixed: lots of fixes, thanks to marcelofg55</li> <li>Fixed: issue with avatar and Steam ID on Linux compile</li> <li>Fixed: <code>join_requested</code> signal, thanks to Fischer96</li> <li>Fixed: <code>getImageRGBA()</code></li> <li>Fixed: <code>getDownloadedLeaderboardEntry()</code> returning wrong SteamID, thanks to marcelofg55</li> <li>Removed: <code>drawAvatar()</code></li> </ul>"},{"location":"changelog/godot3/#version-283","title":"Version 2.8.3","text":"<ul> <li>Added: additional user statistics and achievement signals</li> <li>Changed: minor notations</li> </ul>"},{"location":"changelog/godot3/#version-282","title":"Version 2.8.2","text":"<ul> <li>Fixed: Linux not compiling correctly with new Friends and Matchmaking updates</li> <li>Fixed: various Friends functions not providing correct data</li> </ul>"},{"location":"changelog/godot3/#version-281","title":"Version 2.8.1","text":"<ul> <li>Added: additional missing lobby signals</li> <li>Fixed: various lobby functions due to incorrect Steam lobby ID</li> <li>Fixed: some bind methods</li> <li>Fixed: config.py still using env</li> <li>Fixed: location of core Godot includes</li> </ul>"},{"location":"changelog/godot3/#version-280","title":"Version 2.8.0","text":"<ul> <li>Added: all remaining matchmaking functions</li> <li>Added: all remaining friend functions</li> <li>Changed: <code>getRecentPlayers()</code> to include timestamp</li> <li>Changed: naming of leaderboard_handle and leaderboard_entries for consistency</li> <li>Changed: <code>getAchievement()</code> to dictionary, thanks to jandrewlong</li> <li>Fixed: invite functions giving incorrect steam ids</li> <li>Fixed: <code>getInstalledDepots()</code>, <code>getDLCDownloadProgress()</code>, <code>getItemUpdateProgress()</code>, <code>getSubscribedItems()</code></li> <li>Removed: <code>setGameInfo()</code>, <code>clearGameInfo()</code>, <code>inviteFriend()</code></li> </ul>"},{"location":"changelog/godot3/#version-270","title":"Version 2.7.0","text":"<ul> <li>Added: <code>getAchievementDisplayAttribute()</code>, <code>getAchievementName()</code>, <code>getAchievementIcon()</code>, <code>getImageRGBA()</code>, and <code>getImageSize()</code>, thanks to marcelofg55</li> <li>Added: all missing SteamApps functions</li> <li>Changed: NULL statements for achievement functions</li> <li>Changed: cleaned up and organized signal functions in godotteam.h</li> <li>Fixed: issue with dictionary formatting in a function</li> <li>Fixed: missing NULL statement</li> <li>Fixed: issue with getAchievement failing to compile</li> <li>Removed: <code>hasOtherApp()</code> function</li> </ul>"},{"location":"changelog/godot3/#version-260","title":"Version 2.6.0","text":"<ul> <li>Added: <code>getCurrentBetaName()</code>, <code>addScreenshotToLibrary()</code>, and <code>setLocation()</code>, thanks to marcelofg55</li> <li>Added: Steam controller functionality, thanks to marcelofg55</li> <li>Added: more workshop functionality</li> <li>Changed: various small maintenance</li> </ul>"},{"location":"changelog/godot3/#version-250","title":"Version 2.5.0","text":"<ul> <li>Added: <code>getFileNameAndSize()</code>, <code>getQuota()</code>, <code>getSyncPlatforms()</code> functions</li> <li>Changed: small corrections with Steam ID variable</li> <li>Fixed: small things with <code>getQuota()</code></li> </ul>"},{"location":"changelog/godot3/#version-241","title":"Version 2.4.1","text":"<ul> <li>Added: <code>getNumAchievements()</code>, <code>getAchievementAchievedPercent()</code>, <code>requestGlobalAchievementPercentages()</code> functions</li> <li>Added: related signals to new functions</li> <li>Added: some notes</li> <li>Fixed: <code>leaderboard_update</code> signal</li> <li>Removed: deprecated function <code>requestAppProofOfPurchaseKey()</code></li> <li>Removed: related callback to <code>requestAppProofOfPurchaseKey()</code></li> <li>Removed: commented out deprecated functions</li> </ul>"},{"location":"changelog/godot3/#version-240","title":"Version 2.4.0","text":"<ul> <li>Added: more Screenshot features</li> <li>Added: notes for callback</li> <li>Fixed: types in <code>validate_auth_ticket_response</code></li> </ul>"},{"location":"changelog/godot3/#version-230","title":"Version 2.3.0","text":"<ul> <li>Added: implemented Auth Session functions, thanks to marcelofg55</li> </ul>"},{"location":"changelog/godot3/#version-221","title":"Version 2.2.1","text":"<ul> <li>Fixed: <code>getFileTimestamp()</code> and <code>getSteamID()</code> return types, thanks to marcelofg55</li> </ul>"},{"location":"changelog/godot3/#version-220","title":"Version 2.2.0","text":"<ul> <li>Added: <code>getNumberOfCurrentPlayers()</code>, thanks to marcelofg55</li> <li>Added: <code>leaderboard_uploaded</code> and <code>number_of_current_players</code> callbacks, thanks to marcelofg55</li> </ul>"},{"location":"changelog/godot3/#version-211","title":"Version 2.1.1","text":"<ul> <li>Fixed: <code>fileRead()</code> and <code>fileWrite()</code>, thanks to marcelofg55</li> </ul>"},{"location":"changelog/godot3/#version-210","title":"Version 2.1.0","text":"<ul> <li>Added: two more functions for Remote Storage</li> <li>Changed: instances of int32 and int64 to int32_t and int64_t respectively; mostly for Linux compilation</li> <li>Removed: -no-pie from SCsub; now suggested for Ubuntu 16.10 and higher</li> </ul>"},{"location":"changelog/godot3/#version-200","title":"Version 2.0.0","text":"<ul> <li>Added: Remote Storage functionality for Steam Cloud, thanks to marcelofg55</li> <li>Added: new functions to documentation</li> <li>Changed: SCsub file to include \"no-pie\" fix for Ubuntu 16.10 and higher</li> </ul>"},{"location":"changelog/godot4/","title":"Godot 4.x Change-Log","text":"<p>A history of all changes to the godot4 branch.</p>"},{"location":"changelog/godot4/#version-49","title":"Version 4.9","text":"<ul> <li>Added: missing <code>user_achievement_icon_fetched</code> callback</li> <li>Added: new functions and enums to Apps class</li> <li>Added: new Steam Timeline class functions, enums, and constants</li> <li>Added: new functions to UGC class</li> <li>Added: new enum BetaBranchFlags</li> <li>Added: new value NETWORKING_CONFIG_IP_LOCAL_HOST_ALLOW_WITHOUT_AUTH for NetworkingConfigValue enum</li> <li>Changed: updated for Steamworks SDK 1.60</li> <li>Changed: <code>network_messages_session_failed</code> callback now returns the Steam ID associated with the user whose session failed</li> <li>Changed: <code>global_stats_received</code> had call result name change under-the-hood, does not affect anything</li> <li>Changed: <code>sendMessages()</code> now returns the message result</li> <li>Changed: <code>getQueryUGCResult()</code> now passes back additional value total_files_size</li> <li>Changed: enum RemoteStoragePlatform now cast as uint32_t, fixes Rust compatibility, thanks to GreenFox</li> <li>Changed: <code>item_installed</code> signal now returns additional data - legacy_content and manifest_id</li> <li>Fixed: incorrect signal name for <code>inventory_definition_update</code>, thanks to Foxushka</li> </ul>"},{"location":"changelog/godot4/#version-48","title":"Version 4.8","text":"<ul> <li>Added: Steam Matchmaking response handlers, thanks to jeremybeier</li> <li>Added: all missing Messages and Sockets constants</li> <li>Changed: Networking Messages, Sockets, and Utils now use Steam IDs instead of identity system</li> <li>Changed: UserUGCListSortOrder enums for readability</li> <li>Changed: UGCContentDescriptorID enums for readability</li> <li>Changed: <code>getResultStatus()</code> now returns the integer / enum</li> <li>Changed: cleaned up <code>addItemPreviewFile()</code>, <code>check_file_signature</code>, and <code>showGamepadTextInput()</code></li> <li>Changed: various bits and pieces</li> <li>Changed: IP logic for all related functions</li> <li>Changed: <code>addFavoriteGame()</code>, <code>initiateGameConnection()</code>, <code>terminateGameConnection()</code>, and <code>removeFavoriteGame()</code> now take strings for IP</li> <li>Changed: <code>getAuthSessionTicket()</code> now defaults to 0 for Steam ID</li> <li>Changed: IP address now accepted instead of IP references</li> <li>Fixed: <code>getFriendCount()</code> has correct bit-wise value</li> <li>Fixed: server browser functionality, thanks to jeremybeier</li> <li>Fixed: wrong string IP conversions, thanks to jeremybeier</li> <li>Fixed: server list request filters, thanks to jeremybeier</li> <li>Fixed: typo with UGC_MATCHING_UGC_TYPE_ITEMS enum</li> <li>Fixed: minor case issue with Workshop enums</li> <li>Fixed: <code>playerDetails()</code>, <code>requestFavoritesServerList()</code>, <code>requestInternetServerList()</code>, <code>requestSpectatorServerList()</code>, <code>requestFriendsServerList()</code>, <code>requestHistoryServerList()</code>, and <code>pingServer()</code>, thanks to jeremybeier</li> <li>Fixed: regressions caused by minor update</li> <li>Fixed: typo with NETWORKING_CONFIG_TYPE_STRING enum</li> <li>Fixed: typo with LOBBY_COMPARISON_EQUAL_TO_GREATER_THAN</li> <li>Fixed: in-editor docs</li> <li>Removed: Networking Types identity system and related bits</li> <li>Removed: P2P Networking constants as they are duplicates of the P2PSend enum</li> <li>Removed: previous, non-functioning Matchmaking Server call results</li> <li>Removed: <code>getIdentity()</code> as it is redundant now</li> </ul>"},{"location":"changelog/godot4/#version-47","title":"Version 4.7","text":"<ul> <li>Changed: minor organization and readability changes</li> <li>Fixed: <code>htmlInit()</code> not returning bool for success</li> <li>Fixed: incorrect argument bind for <code>createBeacon()</code></li> <li>Fixed: incorrect argument bind for <code>setItemMetadata()</code></li> </ul>"},{"location":"changelog/godot4/#version-463","title":"Version 4.6.3","text":"<ul> <li>Changed: returned values for getFriendGamePlayed, thanks to SlejmUr</li> <li>Changed: <code>getItemPrice()</code> now returns base price and price, thanks to SlejmUr</li> <li>Changed: <code>getFriendMessage()</code> and callback <code>connected_friend_chat_message</code> now returns the type, thanks to SlejmUr</li> <li>Changed: updated in-editor docs with changes</li> <li>Fixed: missing info_flags key in <code>getSessionConnectionInfo()</code>, thanks to SlejmUr</li> <li>Fixed: <code>getServerDetails()</code> not sending back needed struct, thanks to SlejmUr</li> </ul>"},{"location":"changelog/godot4/#version-462","title":"Version 4.6.2","text":"<ul> <li>Fixed: incorrect constant for PUBLISHED_FILE_UPDATE_HANDLE_INVALID</li> </ul>"},{"location":"changelog/godot4/#version-461","title":"Version 4.6.1","text":"<ul> <li>Added: internal notes about where enums are found</li> <li>Added: minor extra helper functions from Steam's client header</li> <li>Added: <code>getSteamID32()</code> function to convert SteamID64 to SteamID</li> <li>Changed: replaced deprecated Controller struct with Inputs struct in <code>getDigitalActionData()</code></li> <li>Changed: in-editor docs</li> <li>Changed: leaderboard details max now set at highest instead of zero by default</li> </ul>"},{"location":"changelog/godot4/#version-46","title":"Version 4.6","text":"<ul> <li>Added: new Remote Storage enum to WorkshopFileType</li> <li>Added: two new UGC enums to ItemState and ItemPreviewType</li> <li>Added: two new Friends class constants</li> <li>Added: new function <code>dismissGamepadTextInput()</code></li> <li>Added: new Remote Play enum, form factor for VR headset</li> <li>Added: two new result enums; not supported and family size limit exceeded</li> <li>Added: three new enums to NetworkingConfigValue</li> <li>Added: new general constant ACCOUNT_ID_INVALID</li> <li>Changed: FEATURE_KIOSK_MODE enum now deprecated</li> <li>Changed: minor housekeeping by rearranging some functions</li> <li>Changed: k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress was replaced by k_ESteamNetworkingConfig_SDRClient_DevTicket, value is the same but reference changed</li> <li>Changed: updated in-editor docs</li> <li>Fixed: spelling error in <code>getProfileItemPropertyInt()</code> bind</li> <li>Removed: App Lists class functions, callbacks, etc. due to SDK 1.59 changes</li> <li>Removed: Remote Play enums mistakenly added as constants</li> </ul>"},{"location":"changelog/godot4/#version-454","title":"Version 4.5.4","text":"<ul> <li>Added: missing k_nSteamNetworkingSend_AutoRestartBrokenSession to constants</li> <li>Added: two missing Input constants: INPUT_HANDLE_ALL_CONTROLLERS and INPUT_MAX_ACTIVE_LAYERS</li> <li>Changed: <code>getInputTypeForHandle()</code> now returns int / enum instead of string for device models</li> <li>Changed: updated in-editor docs for missing content</li> <li>Changed: order of constants to be alphabetic</li> <li>Changed: changed returned variable name to <code>need_to_accept_tos</code> in <code>item_updated</code> callback</li> <li>Changed: Github Actions scripts, one for Vulkan and another for version numbers</li> </ul>"},{"location":"changelog/godot4/#version-453","title":"Version 4.5.3","text":"<ul> <li>Fixed: <code>requestClanOfficerList()</code> using wrong internal function, thanks to sepTN</li> </ul>"},{"location":"changelog/godot4/#version-452","title":"Version 4.5.2","text":"<ul> <li>Fixed: <code>exchangeItems()</code>, <code>generateItems()</code>, and <code>startPurchase()</code> using wrong array size function, thanks to sepTN</li> <li>Fixed: various spelling issues in in-editor docs, thanks to sepTN</li> </ul>"},{"location":"changelog/godot4/#version-451","title":"Version 4.5.1","text":"<ul> <li>Fixed: app ID automatically being set to 480, now default is 0 which makes GodotSteam ignore auto-setting app ID</li> </ul>"},{"location":"changelog/godot4/#version-45","title":"Version 4.5","text":"<ul> <li>Added: two new arguments to <code>steamInit()</code> and <code>steamInitEx()</code> to set your app ID and run_callbacks interally, thanks to GreenFox</li> <li>Added: two Music class callbacks</li> <li>Changed: <code>generateItems(0</code>, <code>exchangeItems()</code>, <code>getItemsByID()</code>, and <code>startPurchase()</code> all list-based arguments are now PoolIntArrays</li> <li>Changed: <code>getItemsByID()</code> now takes one argument, counts the elements in the passed array instead</li> <li>Changed: <code>getItemsWithPrices()</code> no longer requires any arguments passed to it</li> <li>Changed: in-editor docs have been updated</li> <li>Fixed: <code>getResultItems()</code> now returns all item data</li> <li>Fixed: missing DEFVAL for <code>steamInitEx()</code></li> <li>Fixed: Joy Con name in <code>getInputTypeForHandle()</code></li> <li>Removed: <code>getNumItemsWithPrices()</code> as it was unnecessary</li> </ul>"},{"location":"changelog/godot4/#version-442","title":"Version 4.4.2","text":"<ul> <li>Fixed: <code>requestEquippedProfileItems()</code> was missing method bind, thanks to BOTLANNER</li> <li>Fixed: <code>get_ticket_for_web_api</code> callback for getting actual ticket buffer, thanks to dicarne</li> <li>Fixed: compiler complaining about comparison between Steam enum and GodotSteam enum for <code>steamInitEx()</code></li> <li>Fixed: <code>getListenSocketAddress()</code> fixed to provide the actual address and optional port</li> <li>Changed: different defaults in Github Actions files</li> <li>Changed: <code>createBrowser()</code> now sends proper NULL when empty string passed</li> <li>Changed: <code>html_browser_ready</code> from callback to proper call result</li> <li>Changed: cast handle in <code>setSize()</code> as Steam HHTMLBrowser</li> <li>Removed: unnecessary steam_appid.txt from zips in Github Actions</li> </ul>"},{"location":"changelog/godot4/#version-441","title":"Version 4.4.1","text":"<ul> <li>Fixed: missing descriptions for some in-editor functions/signals</li> <li>Fixed: <code>receiveMessagesOnChannel()</code>, <code>receiveMessagesOnPollGroup()</code>, and <code>receiveMessagesOnConnection()</code> had overwriting dictionary keys</li> </ul>"},{"location":"changelog/godot4/#version-44","title":"Version 4.4","text":"<ul> <li>Added: new enums and constant related to new Steam initialization function</li> <li>Added: new enums for NetworkingConfigValue</li> <li>Added: new intialization function <code>steamInitEx()</code> that is more verbose</li> <li>Added: new UGC function <code>getUserContentDescriptorPreferences()</code></li> <li>Added: new Remote Play function <code>startRemotePlayTogether()</code></li> <li>Changed: UGC function <code>setItemTags()</code> to have new argument for admin tags</li> <li>Changed: compatible with Steamworks SDK 1.58</li> <li>Changed: in-editor docs now reflect all changes</li> </ul>"},{"location":"changelog/godot4/#version-431","title":"Version 4.3.1","text":"<ul> <li>Fixed: wrong variant type for join_requested</li> </ul>"},{"location":"changelog/godot4/#version-43","title":"Version 4.3","text":"<ul> <li>Added: full GodotSteam documentation into the editor</li> <li>Added: <code>steamShutdown()</code> to allow Steamworks to be manually shutdown</li> <li>Added: <code>requestEquippedProfileItems()</code> function and <code>equipped_profile_items</code> callback</li> <li>Added: Steam Deck as Steam Input type</li> <li>Changed: all enums are now directly linked to their SDK counterparts</li> <li>Changed: <code>getDigitalActionData()</code> returned keys are now state and active</li> <li>Changed: names of some Steam enums to be cleaner and leaner</li> <li>Changed: <code>getAppInstallDir()</code> now returns dictionary with absolute path and install size</li> <li>Fixed: some missing enum binds</li> <li>Fixed: missing function argument binds</li> <li>Fixed: <code>get_ticket_for_web_api</code> sending back strings</li> <li>Removed: enums that are not in the SDK but Valve's docs</li> </ul>"},{"location":"changelog/godot4/#version-422","title":"Version 4.2.2","text":"<ul> <li>Added: new Input callback <code>input_gamepad_slot_change</code></li> <li>Added: new User callback <code>get_ticket_for_web_api</code></li> <li>Added: new User function <code>getAuthTicketForWebApi()</code></li> <li>Changed: <code>getAuthSessionTicket()</code> argument is now optional, defaults to NULL</li> </ul>"},{"location":"changelog/godot4/#version-421","title":"Version 4.2.1","text":"<ul> <li>Added: new return values for <code>overlay_toggled</code>; this will break compatibility with this</li> <li>Added: new Input and Parental Settings enums</li> <li>Added: new UGC Content Descriptor ID enums</li> <li>Added: new UGC functions <code>removeContentDescriptor()</code>, <code>addContentDescriptor()</code>, and <code>getQueryUGCContentDescriptors()</code></li> <li>Added: new signal <code>filter_text_dictionary_changed</code></li> <li>Changed: <code>getAuthSessionTicket()</code> now uses networking identities</li> <li>Changed: <code>gamepad_text_input_dismissed</code> now passes back the app ID</li> <li>Changed: Steam Input max analog and digital actions values</li> <li>Removed: ERegisterActivationCodeResult due to removal in SDK</li> </ul>"},{"location":"changelog/godot4/#version-42","title":"Version 4.2","text":"<ul> <li>Added: various backports from Godot 3.x branch</li> <li>Fixed: options array size for new Networking classes and memory leaks, thanks to profour</li> <li>Fixed: need for godotsteam.sh file on some Linux systems, thanks to mikix</li> </ul>"},{"location":"changelog/godot4/#version-415","title":"Version 4.1.5","text":"<ul> <li>Added: networking type message constants</li> <li>Added: more descriptions and tutorial links to in-editor docs</li> <li>Added: <code>avatar_image_loaded</code> callback to get raw response from Steamworks</li> <li>Changed: brought 4.x branch up-to-speed with master / 3.x branch</li> <li>Changed: enums now bound with BIND_ENUM_CONSTANT, thanks to raulsntos</li> <li>Changed: bitwise enums now bound with BIND_ENUM_BITWISE_CONSTANT, thanks to raulsntos</li> <li>Changed: platform of 'osx' to new 'macos'</li> <li>Fixed: platform of 'osx' not being recognized so the module doesn't get added</li> <li>Fixed: <code>microtransaction_auth_response</code> spelling for callback</li> <li>Fixed: <code>getLobbyData()</code> not returning UTF-8 encoded string</li> <li>Fixed: <code>sendLobbyChatMsg()</code> truncating non-English strings</li> <li>Fixed: <code>filterText()</code> truncating input; thanks to _tcoxon</li> <li>Removed: MarketingMessageFlags as they don't exist in the header files</li> </ul>"},{"location":"changelog/godot4/#version-414","title":"Version 4.1.4","text":"<ul> <li>Changed: layout to make Git cloning easier</li> <li>Changed: <code>submitItemUpdate()</code> to use null if no notes are passed, thanks to mashumafi</li> <li>Fixed: incorrect use of io failure</li> <li>Fixed: DEFVAL type mismatch, thanks to raulsntos</li> <li>Fixed: <code>getSessionConnectionInfo()</code> using old networking struct</li> <li>Removed: unused networking stricts</li> </ul>"},{"location":"changelog/godot4/#version-413","title":"Version 4.1.3","text":"<ul> <li>Fixed: config.py and SCsub so that Linux compiling will link Steam correctly</li> </ul>"},{"location":"changelog/godot4/#version-412","title":"Version 4.1.2","text":"<ul> <li>Changed: brought branch up to speed with GodotSteam 3.17.4</li> </ul>"},{"location":"changelog/godot4/#version-411","title":"Version 4.1.1","text":"<ul> <li>Fixed: wrong arch in SCsub file</li> <li>Fixed: registering class in register_types.cpp</li> </ul>"},{"location":"changelog/godot4/#version-41","title":"Version 4.1","text":"<ul> <li>Changed: brought branch up to speed with GodotSteam 3.17.1</li> <li>Fixed: various small issues to get it running with Godot alpha 1</li> </ul>"},{"location":"changelog/godot4/#version-40","title":"Version 4.0","text":"<ul> <li>Added: Initial build, highly experimental!</li> </ul>"},{"location":"changelog/multiplayer_peer/","title":"Multiplayer Peer Change-Log","text":"<p>A history of all changes to the multiplayer-peer branch.</p>"},{"location":"changelog/multiplayer_peer/#version-49-changes","title":"Version 4.9 Changes","text":"<ul> <li>Added: get_lobby_id() function to expose the lobby ID</li> <li>Removed: Mono flags from GA files</li> </ul>"},{"location":"changelog/multiplayer_peer/#version-48","title":"Version 4.8","text":"<p>Version bump to sync with 4.x branch</p>"},{"location":"changelog/multiplayer_peer/#version-47","title":"Version 4.7","text":"<ul> <li>Added: in-editor docs, thanks to grossqx</li> </ul>"},{"location":"changelog/multiplayer_peer/#version-463","title":"Version 4.6.3","text":"<ul> <li>Fixed: lobby_state breaking after calling close on peer, thanks to Hangman</li> </ul>"},{"location":"changelog/multiplayer_peer/#version-462","title":"Version 4.6.2","text":"<p>Version bump to sync with 4.x branch</p>"},{"location":"changelog/multiplayer_peer/#version-461","title":"Version 4.6.1","text":"<ul> <li>Added: various fixes including Linux compiling, thanks to friartruck</li> </ul>"},{"location":"changelog/multiplayer_peer/#version-46","title":"Version 4.6","text":"<ul> <li>Changed: all-new Github Actions files with Mono attempt</li> <li>Removed: demo has been removed and added to the GodotSteam Example repo instead</li> </ul>"},{"location":"changelog/multiplayer_peer/#version-451","title":"Version 4.5.1","text":"<ul> <li>Added: doc_classes folder for writing</li> <li>Added: first tests for Github Actions</li> <li>Note: Version number pulled in line with godot4 branch which it depends on</li> </ul>"},{"location":"changelog/server3/","title":"Server 3.x Change-Log","text":"<p>A history of all changes to the server3 branch.</p>"},{"location":"changelog/server3/#version-33","title":"Version 3.3","text":"<ul> <li>Changed: constants list to add missing and remove unused</li> <li>Changed: Networking Messages, Sockets, and Utils now use Steam IDs instead of identity system</li> <li>Changed: various bits and pieces</li> <li>Changed: IP logic for all related functions</li> <li>Changed: UserUGCListSortOrder enums for readability</li> <li>Changed: UGCContentDescriptorID enums for readability</li> <li>Changed: <code>getResultStatus()</code> now returns the integer / enum</li> <li>Changed: <code>getAuthSessionTicket()</code> now defaults to 0 for Steam ID</li> <li>Fixed: wrong string IP conversions, thanks to jeremybeier</li> <li>Fixed: typo with UGC_MATCHING_UGC_TYPE_ITEMS enum</li> <li>Fixed: minor case issue with Workshop enums</li> <li>Fixed: typo with NETWORKING_CONFIG_TYPE_STRING enum</li> <li>Removed: unnecessary enums</li> <li>Removed: Networking Types identity system and related bits</li> <li>Removed: P2P Networking constants as they are duplicates of the P2PSend enum</li> <li>Removed: <code>getIdentity()</code> as it is redundant now</li> </ul>"},{"location":"changelog/server3/#version-32","title":"Version 3.2","text":"<ul> <li>Added: new Remote Storage enum to WorkshopFileType</li> <li>Added: two new UGC enums to ItemState and ItemPreviewType</li> <li>Added: new Remote Play enum, form factor for VR headset</li> <li>Added: two new result enums; not supported and family size limit exceeded</li> <li>Added: three new enums to NetworkingConfigValue</li> <li>Added: new general constant ACCOUNT_ID_INVALID</li> <li>Changed: k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress was replaced by k_ESteamNetworkingConfig_SDRClient_DevTicket, value is the same but reference changed</li> </ul>"},{"location":"changelog/server3/#version-31","title":"Version 3.1","text":"<ul> <li>Added: a missing constant</li> <li>Changed: backported various fixes from non-server GodotSteam</li> <li>Changed: updated various function arguments to match non-server GodotSteam</li> <li>Changed: constants now live in <code>godotsteam_server_constants.h</code> like non-server GodotSteam</li> <li>Changed: further fixes to initialization functions</li> </ul>"},{"location":"changelog/server3/#version-301","title":"Version 3.0.1","text":"<ul> <li>Changed: how initialization functions work, passing empty string now uses default IP (expected behavior)</li> <li>Fixed: incorrect verbal message from <code>serverInitEx()</code></li> </ul>"},{"location":"changelog/server3/#version-30","title":"Version 3.0","text":"<ul> <li>Added: missing server functions from steam_gameserver.h</li> <li>Added: missing enums for server modes</li> <li>Added: in-editor documentation</li> <li>Changed: various improvements under-the-hood</li> <li>Changed: reorganized some constants</li> <li>Removed: unused enums, signals, functions</li> <li>Removed: unnecessary classes that are not part of the server build</li> </ul>"},{"location":"changelog/server3/#version-201","title":"Version 2.0.1","text":"<ul> <li>Changed: layout to make Git cloning easier</li> <li>Fixed: <code>getSessionConnectionInfo()</code> using old networking struct</li> <li>Removed: unused networking stricts</li> </ul>"},{"location":"changelog/server3/#version-20","title":"Version 2.0","text":"<ul> <li>Changed: separated server back into it's own module / branch</li> <li>Changed: brought server branch in line with related master branch functions</li> </ul>"},{"location":"changelog/server3/#version-124","title":"Version 1.2.4","text":"<ul> <li>Fixed: lots of compiler warnings on Linux, thanks to gregcsokas</li> </ul>"},{"location":"changelog/server3/#version-123","title":"Version 1.2.3","text":"<ul> <li>Added: missing functions to Apps class</li> <li>Added: new functions and callbacks to UGC class</li> <li>Changed: EnableHeartbeats was renamed to SetAdvertiseServerActive in SDK</li> <li>Changed: various internal variable names</li> <li>Fixed: some memory allocation issues</li> <li>Removed: <code>setHeartbeatInterval()</code> and <code>forceHeartbeat()</code>; was removed from SDK</li> </ul>"},{"location":"changelog/server3/#version-122","title":"Version 1.2.2","text":"<ul> <li>Added: Added: ability to provide different locations for custom modules, thanks to dsnopek</li> </ul>"},{"location":"changelog/server3/#version-121","title":"Version 1.2.1","text":"<ul> <li>Fixed: <code>getNumSubscribedItems()</code> was mislabeled as <code>getSubscribedItems()</code></li> </ul>"},{"location":"changelog/server3/#version-12","title":"Version 1.2","text":"<ul> <li>Added: various notations and spacing</li> <li>Added: <code>addRequiredTagGroup()</code>, <code>getQueryUGCTag()</code>, <code>getQueryUGCTagDisplayName()</code>, and <code>getQueryUGCNumTags()</code> functions from UGC</li> <li>Changed: <code>setCookie()</code> to <code>setHTTPCookie()</code></li> <li>Fixed: various delete statements</li> <li>Fixed: converting user ID in <code>createQueryUserUGCRequest()</code></li> <li>Fixed: metadata length in <code>setItemMetadata()</code></li> <li>Fixed: library paths in config.py</li> <li>Removed: compiling flag in config.py for OSX</li> <li>Removed: ticket struct as it causes craches</li> </ul>"},{"location":"changelog/server3/#version-111","title":"Version 1.1.1","text":"<ul> <li>Changed: includes Godot header file to allow more than 5 arguments in a function</li> <li>Fixed: <code>filterText()</code> for Steamworks SDK 1.50</li> </ul>"},{"location":"changelog/server3/#version-110","title":"Version 1.1.0","text":"<ul> <li>Added: Apps, HTTP, Inventory, Networking, UGC, and Utils classes</li> <li>Added: related callbacks, call results, constants, and enums</li> <li>Added: headless server platform for linux</li> <li>Fixed: OSX compiling config rules</li> </ul>"},{"location":"changelog/server4/","title":"Server 4.x Change-Log","text":"<p>A history of all changes to the server4 branch.</p>"},{"location":"changelog/server4/#version-43","title":"Version 4.3","text":"<ul> <li>Changed: constants list to add missing and remove unused</li> <li>Changed: Networking Messages, Sockets, and Utils now use Steam IDs instead of identity system</li> <li>Changed: various bits and pieces</li> <li>Changed: IP logic for all related functions</li> <li>Changed: UserUGCListSortOrder enums for readability</li> <li>Changed: UGCContentDescriptorID enums for readability</li> <li>Changed: <code>getResultStatus()</code> now returns the integer / enum</li> <li>Changed: <code>getAuthSessionTicket()</code> now defaults to 0 for Steam ID</li> <li>Fixed: wrong string IP conversions, thanks to jeremybeier</li> <li>Fixed: typo with UGC_MATCHING_UGC_TYPE_ITEMS enum</li> <li>Fixed: minor case issue with Workshop enums</li> <li>Fixed: typo with NETWORKING_CONFIG_TYPE_STRING enum</li> <li>Removed: unnecessary enums</li> <li>Removed: Networking Types identity system and related bits</li> <li>Removed: P2P Networking constants as they are duplicates of the P2PSend enum</li> <li>Removed: <code>getIdentity()</code> as it is redundant now</li> </ul>"},{"location":"changelog/server4/#version-42","title":"Version 4.2","text":"<ul> <li>Added: new Remote Storage enum to WorkshopFileType</li> <li>Added: two new UGC enums to ItemState and ItemPreviewType</li> <li>Added: new Remote Play enum, form factor for VR headset</li> <li>Added: two new result enums; not supported and family size limit exceeded</li> <li>Added: three new enums to NetworkingConfigValue</li> <li>Added: new general constant ACCOUNT_ID_INVALID</li> <li>Changed: k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress was replaced by k_ESteamNetworkingConfig_SDRClient_DevTicket, value is the same but reference changed</li> </ul>"},{"location":"changelog/server4/#version-41","title":"Version 4.1","text":"<ul> <li>Added: a missing constant</li> <li>Changed: backported various fixes from non-server GodotSteam</li> <li>Changed: updated various function arguments to match non-server GodotSteam</li> <li>Changed: constants now live in <code>godotsteam_server_constants.h</code> like non-server GodotSteam</li> <li>Changed: further fixes to initialization functions</li> </ul>"},{"location":"changelog/server4/#version-401","title":"Version 4.0.1","text":"<ul> <li>Changed: how initialization functions work, passing empty string now uses default IP (expected behavior)</li> <li>Fixed: incorrect verbal message from <code>serverInitEx()</code></li> </ul>"},{"location":"changelog/server4/#version-40","title":"Version 4.0","text":"<ul> <li>Added: missing server functions from steam_gameserver.h</li> <li>Added: missing enums for server modes</li> <li>Added: in-editor documentation</li> <li>Changed: various improvements under-the-hood</li> <li>Changed: reorganized some constants</li> <li>Removed: unused enums, signals, functions</li> <li>Removed: unnecessary classes that are not part of the server build</li> </ul>"},{"location":"changelog/server_gdextension/","title":"Server GDExtension Change-Log","text":"<p>A history of all changes to the server gdextension branch.</p>"},{"location":"changelog/server_gdextension/#version-43","title":"Version 4.3","text":"<ul> <li>Changed: constants list to add missing and remove unused</li> <li>Changed: Networking Messages, Sockets, and Utils now use Steam IDs instead of identity system</li> <li>Changed: various bits and pieces</li> <li>Changed: IP logic for all related functions</li> <li>Changed: UserUGCListSortOrder enums for readability</li> <li>Changed: UGCContentDescriptorID enums for readability</li> <li>Changed: <code>getResultStatus()</code> now returns the integer / enum</li> <li>Changed: <code>getAuthSessionTicket()</code> now defaults to 0 for Steam ID</li> <li>Fixed: wrong string IP conversions, thanks to jeremybeier</li> <li>Fixed: typo with UGC_MATCHING_UGC_TYPE_ITEMS enum</li> <li>Fixed: minor case issue with Workshop enums</li> <li>Fixed: typo with NETWORKING_CONFIG_TYPE_STRING enum</li> <li>Removed: unnecessary enums</li> <li>Removed: Networking Types identity system and related bits</li> <li>Removed: P2P Networking constants as they are duplicates of the P2PSend enum</li> <li>Removed: <code>getIdentity()</code> as it is redundant now</li> </ul>"},{"location":"changelog/server_gdextension/#version-42","title":"Version 4.2","text":"<ul> <li>Added: new Remote Storage enum to WorkshopFileType</li> <li>Added: two new UGC enums to ItemState and ItemPreviewType</li> <li>Added: new Remote Play enum, form factor for VR headset</li> <li>Added: two new result enums; not supported and family size limit exceeded</li> <li>Added: three new enums to NetworkingConfigValue</li> <li>Added: new general constant ACCOUNT_ID_INVALID</li> <li>Changed: k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress was replaced by k_ESteamNetworkingConfig_SDRClient_DevTicket, value is the same but reference changed</li> </ul>"},{"location":"changelog/server_gdextension/#version-41","title":"Version 4.1","text":"<ul> <li>Added: a missing constant</li> <li>Changed: backported various fixes from non-server GodotSteam</li> <li>Changed: updated various function arguments to match non-server GodotSteam</li> <li>Changed: constants now live in <code>godotsteam_server_constants.h</code> like non-server GodotSteam</li> <li>Changed: further fixes to initialization functions</li> </ul>"},{"location":"changelog/server_gdextension/#version-401","title":"Version 4.0.1","text":"<ul> <li>Changed: how initialization functions work, passing empty string now uses default IP (expected behavior)</li> <li>Fixed: incorrect verbal message from <code>serverInitEx()</code></li> </ul>"},{"location":"changelog/server_gdextension/#version-40","title":"Version 4.0","text":"<ul> <li>Added: missing server functions from steam_gameserver.h</li> <li>Added: missing enums for server modes</li> <li>Added: in-editor documentation</li> <li>Changed: various improvements under-the-hood</li> <li>Changed: reorganized some constants</li> <li>Removed: unused enums, signals, functions</li> <li>Removed: unnecessary classes that are not part of the server build</li> </ul>"},{"location":"changelog/server_gdnative/","title":"Server GDNative Change-Log","text":"<p>A history of all changes to the server gdnative branch.</p>"},{"location":"changelog/server_gdnative/#version-33","title":"Version 3.3","text":"<ul> <li>Changed: constants list to add missing and remove unused</li> <li>Changed: Networking Messages, Sockets, and Utils now use Steam IDs instead of identity system</li> <li>Changed: various bits and pieces</li> <li>Changed: IP logic for all related functions</li> <li>Changed: <code>getResultStatus()</code> now returns the integer / enum</li> <li>Changed: <code>getAuthSessionTicket()</code> now defaults to 0 for Steam ID</li> <li>Fixed: wrong string IP conversions, thanks to jeremybeier</li> <li>Removed: Networking Types identity system and related bits</li> <li>Removed: P2P Networking constants as they are duplicates of the P2PSend enum</li> <li>Removed: <code>getIdentity()</code> as it is redundant now</li> </ul>"},{"location":"changelog/server_gdnative/#version-32","title":"Version 3.2","text":"<ul> <li>Added: new general constant ACCOUNT_ID_INVALID</li> <li>Changed: k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress was replaced by k_ESteamNetworkingConfig_SDRClient_DevTicket, value is the same but reference changed</li> </ul>"},{"location":"changelog/server_gdnative/#version-31","title":"Version 3.1","text":"<ul> <li>Added: a missing constant</li> <li>Changed: backported various fixes from non-server GodotSteam</li> <li>Changed: updated various function arguments to match non-server GodotSteam</li> <li>Changed: constants now live in <code>godotsteam_server_constants.h</code> like non-server GodotSteam</li> <li>Changed: further fixes to initialization functions</li> </ul>"},{"location":"changelog/server_gdnative/#version-301","title":"Version 3.0.1","text":"<ul> <li>Changed: updated included Steam server script</li> <li>Changed: how initialization functions work, passing empty string now uses default IP (expected behavior)</li> <li>Fixed: incorrect verbal message from <code>serverInitEx()</code></li> </ul>"},{"location":"changelog/server_gdnative/#version-30","title":"Version 3.0","text":"<ul> <li>Added: missing server functions from steam_gameserver.h</li> <li>Added: missing enums for server modes</li> <li>Added: in-editor documentation</li> <li>Changed: various improvements under-the-hood</li> <li>Changed: reorganized some constants</li> <li>Removed: unused enums, signals, functions</li> <li>Removed: unnecessary classes that are not part of the server build</li> </ul>"},{"location":"classes/app_lists/","title":"App Lists (Deprecated Since SDK 1.59)","text":"<p>This is a restricted interface that can only be used by previously approved apps. It is not listed in the official Steamworks SDK documentation, either. Contact your Steam Account Manager if you believe you need access to this API.</p> <p>Only available in the main GodotSteam branches</p> <p>This class has been removed as of Steamworks SDK 1.59 and no longer exists in GodotSteam as of versions 3.23 / 4.6</p>"},{"location":"classes/app_lists/#functions","title":"Functions","text":""},{"location":"classes/app_lists/#getapplistbuildid","title":"getAppListBuildId","text":"<p>getAppListBuildId( <code>uint32_t</code> app_id )</p> <p>Get a given app ID's build. </p> <p>Returns: int</p>"},{"location":"classes/app_lists/#getapplistinstalldir","title":"getAppListInstallDir","text":"<p>getAppListInstallDir( <code>uint32_t</code> app_id, <code>int</code> name_max )</p> <p>Get a given app ID's install directory.</p> <p>Returns: string</p>"},{"location":"classes/app_lists/#getappname","title":"getAppName","text":"<p>getAppName( <code>uint32_t</code> app_id, <code>int</code> name_max )</p> <p>Get a given app ID's name. </p> <p>Returns: string</p>"},{"location":"classes/app_lists/#getinstalledapps","title":"getInstalledApps","text":"<p>getInstalledApps( <code>uint32</code> max_app_ids )</p> <p>Get a list of app IDs for installed apps for this player. </p> <p>Return: array</p> <p>Contains a list of (int) app IDs.</p>"},{"location":"classes/app_lists/#getnuminstalledapps","title":"getNumInstalledApps","text":"<p>getNumInstalledApps()</p> <p>Get the number of installed apps for this player. </p> <p>Return: int</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/app_lists/#signals","title":"Signals","text":""},{"location":"classes/app_lists/#app_installed","title":"app_installed","text":"<p>app_installed</p> <p>Sent when a new app is installed.</p> <p>Returns:</p> <ul> <li>app_id (uint32_t)</li> <li>install_folder_index (uint32_t)</li> </ul>"},{"location":"classes/app_lists/#app_uninstalled","title":"app_uninstalled","text":"<p>app_uninstalled</p> <p>Sent when an app is uninstalled.</p> <p>Returns:</p> <ul> <li>app_id (uint32_t)</li> <li>install_folder_index (uint32_t)</li> </ul>"},{"location":"classes/apps/","title":"Apps","text":"<p>Exposes a wide range of information and actions for applications and\u00a0Downloadable Content (DLC).</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/apps/#functions","title":"Functions","text":""},{"location":"classes/apps/#getappbuildid","title":"getAppBuildId","text":"<p>getAppBuildId()</p> <p>Gets the build ID of this app, may change at any time based on backend updates to the game. </p> <p>Return: int</p> <p>The current build ID of this app. Defaults to 0 if you're not running a build downloaded from Steam.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getappinstalldir","title":"getAppInstallDir","text":"<p>getAppInstallDir( <code>uint32_t</code> app_id )</p> <p>Gets the install folder for a specific app ID. This works even if the application is not installed, based on where the game would be installed with the default Steam library location. </p> <p>Return: Dictionary</p> <p>Contains the following keys:</p> <ul> <li>directory (string)</li> <li>install_size (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getappowner","title":"getAppOwner","text":"<p>getAppOwner()</p> <p>Gets the Steam ID of the original owner of the current app. If it's different from the current user then it is borrowed.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getavailablegamelanguages","title":"getAvailableGameLanguages","text":"<p>getAvailableGameLanguages()</p> <p>Gets a comma separated list of the languages the current app supports.</p> <p>Return: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getcurrentbetaname","title":"getCurrentBetaName","text":"<p>getCurrentBetaName()</p> <p>Checks if the user is running from a beta branch, and gets the name of the branch if they are.</p> <p>Return: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getcurrentgamelanguage","title":"getCurrentGameLanguage","text":"<p>getCurrentGameLanguage()</p> <p>Gets the current language that the user has set.</p> <p>Return: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getdlccount","title":"getDLCCount","text":"<p>getDLCCount()</p> <p>Get the number of DLC the user owns for a parent application/game. </p> <p>Return: int32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getdlcdatabyindex","title":"getDLCDataByIndex","text":"<p>getDLCDataByIndex()</p> <p>Returns metadata for a DLC by index. </p> <p>Return: array</p> <p>Contains dictionaries (dlc) which contain the following keys:</p> <ul> <li>app_id (int)</li> <li>available (bool)</li> <li>name (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getdlcdownloadprogress","title":"getDLCDownloadProgress","text":"<p>getDLCDownloadProgress( <code>uint32_t</code> dlc_id )</p> <p>Gets the download progress for optional DLC.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ret (bool)</li> <li>downloaded (uint64_t)</li> <li>total (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getearliestpurchaseunixtime","title":"getEarliestPurchaseUnixTime","text":"<p>getEarliestPurchaseUnixTime( <code>uint32_t</code> app_id )</p> <p>Gets the time of purchase of the specified app in Unix epoch format (time since Jan 1<sup>st</sup>, 1970).</p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getfiledetails","title":"getFileDetails","text":"<p>getFileDetails( <code>string</code> filename )</p> <p>Asynchronously retrieves metadata details about a specific file in the depot manifest. </p> <p>Return: void</p> <p>Notes: Triggers a file_details_result callback.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getinstalleddepots","title":"getInstalledDepots","text":"<p>getInstalledDepots( <code>uint32_t</code> app_id )</p> <p>Gets a list of all installed depots for a given App ID. </p> <p>Return: array</p> <p>Contains the installed depots, returned in mount order. </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getlaunchcommandline","title":"getLaunchCommandLine","text":"<p>getLaunchCommandLine()</p> <p>Gets the command line if the game was launched via Steam URL, e.g. <code>steam://run/&lt;appid&gt;//&lt;command line&gt;/</code>. This method is preferable to launching with a command line via the operating system, which can be a security risk. In order for rich presence joins to go through this and not be placed on the OS command line, you must enable \"Use launch command line\" from the Installation &gt; General page on your app.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#getlaunchqueryparam","title":"getLaunchQueryParam","text":"<p>getLaunchQueryParam( <code>string</code> key )</p> <p>Gets the associated launch parameter if the game is run via <code>steam://run/&lt;appid&gt;/?param1=value1;param2=value2;param3=value3</code> etc. </p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#installdlc","title":"installDLC","text":"<p>installDLC( <code>uint32_t</code> dlc_id )</p> <p>Allows you to install an optional DLC.</p> <p>Returns: void</p> <p>Note: Triggers a dlc_installed callback.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#isappinstalled","title":"isAppInstalled","text":"<p>isAppInstalled( <code>uint32_t</code> app_id )</p> <p>Checks if a specific app is installed. The app may not actually be owned by the current user, they may have it left over from a free weekend, etc. This only works for base applications, not downloadable content (DLC). Use isDLCInstalled for DLC instead. </p> <p>Return: bool</p> <p>True if the specified app ID is installed; otherwise, false.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#isdlcinstalled","title":"isDLCInstalled","text":"<p>isDLCInstalled( <code>uint32_t</code> dlc_id )</p> <p>Checks if the user owns a specific DLC and if the DLC is installed. </p> <p>Return: bool</p> <p>True if the user owns the DLC and it's currently installed, otherwise false.</p> <p>Note: Should only be used for simple client side checks - not intended for granting in-game items.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#islowviolence","title":"isLowViolence","text":"<p>isLowViolence()</p> <p>Checks if the license owned by the user provides low violence depots. </p> <p>Return: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#issubscribed","title":"isSubscribed","text":"<p>isSubscribed()</p> <p>Checks if the active user is subscribed to the current app ID. </p> <p>Return: bool</p> <p>True if the active user owns the current app ID, otherwise false.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#issubscribedapp","title":"isSubscribedApp","text":"<p>isSubscribedApp( <code>uint32_t</code> app_id )</p> <p>Checks if the active user is subscribed to a specified app ID. Only use this if you need to check ownership of another game related to yours, a demo for example. </p> <p>Return: bool</p> <p>True if the active user is subscribed to the specified app ID, otherwise false.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#issubscribedfromfamilysharing","title":"isSubscribedFromFamilySharing","text":"<p>isSubscribedFromFamilySharing()</p> <p>Checks if the active user is accessing the current app ID via a temporary Family Shared license owned by another user. </p> <p>Return: bool</p> <p>True if the active user is accessing the current appID via family sharing, otherwise false.</p> <p>If you need to determine the Steam ID of the permanent owner of the license, use getAppOwner.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#issubscribedfromfreeweekend","title":"isSubscribedFromFreeWeekend","text":"<p>isSubscribedFromFreeWeekend()</p> <p>Checks if the user is subscribed to the current app through a free weekend. This function will return false for users who have a retail or other type of license. Suggested you contact Valve on how to package and secure your free weekend properly. </p> <p>Return: bool</p> <p>True if the active user is subscribed to the current app ID via a free weekend otherwise false any other type of license.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#istimedtrial","title":"isTimedTrial","text":"<p>isTimedTrial()</p> <p>Checks if the user is subscribed to the current app ID through a timed trial. If so, returns true and gives back the total time the timed trial is allowed to play, along with the current amount of time the user has played. </p> <p>Return: dictionary</p> <p>Containing these keys:</p> <ul> <li>seconds_allowed (uint32)</li> <li>seconds_played (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#isvacbanned","title":"isVACBanned","text":"<p>isVACBanned()</p> <p>Checks if the user has a VAC ban on their account. </p> <p>Return: bool</p> <p>True if the user has a VAC ban on their account; otherwise, false.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#markcontentcorrupt","title":"markContentCorrupt","text":"<p>markContentCorrupt( <code>bool</code> missing_files_only )</p> <p>Allows you to force verify game content on next launch.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#setdlccontext","title":"setDLCContext","text":"<p>setDLCContext( <code>uint32_t</code> app_id )</p> <p>Set current DLC app ID being played (or 0 if none). Allows Steam to track usage of major DLC extensions.</p> <p>Returns: bool</p>"},{"location":"classes/apps/#uninstalldlc","title":"uninstallDLC","text":"<p>uninstallDLC( <code>uint32_t</code> dlc_id )</p> <p>Allows you to uninstall an optional DLC.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/apps/#signals","title":"Signals","text":""},{"location":"classes/apps/#dlc_installed","title":"dlc_installed","text":"<p>dlc_installed</p> <p>Triggered after the current user gains ownership of DLC and that DLC is installed.</p> <p>Returns:</p> <ul> <li>app_id (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#file_details_result","title":"file_details_result","text":"<p>file_details_result</p> <p>Called after requesting the details of a specific file.</p> <p>Returns:</p> <ul> <li>result (uint32_t)</li> <li>file_size (uint64_t)</li> <li>file_hash (uint8)</li> <li>flags (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#new_launch_url_parameters","title":"new_launch_url_parameters","text":"<p>new_launch_url_parameters</p> <p>Triggered after the user executes a steam url with command line or query parameters such as <code>steam://run/(app_id)//?param1=value1;param2=value2;param3=value3;</code> while the game is already running. The new params can be queried with getLaunchCommandLine and getLaunchQueryParam.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#timed_trial_status","title":"timed_trial_status","text":"<p>timed_trials_status</p> <p>Called for games in Timed Trial mode.</p> <p>Returns:</p> <ul> <li>app_id (uint32_t)</li> <li>is_offline (bool)</li> <li>seconds_allowed (uint32)</li> <li>seconds_played (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/apps/#enums","title":"Enums","text":""},{"location":"classes/apps/#registeractivationcoderesult","title":"RegisterActivationCodeResult","text":"Enumerator Value ACTIVATION_CODE_RESULT_OK 0 ACTIVATION_CODE_RESULT_FAIL 1 ACTIVATION_CODE_RESULT_ALREADY_REGISTERED 2 ACTIVATION_CODE_RESULT_TIMEOUT 3 ACTIVATION_CODE_RESULT_ALREADY_OWNED 4"},{"location":"classes/friends/","title":"Friends","text":"<p>Access information about individual users and interact with the\u00a0Steam Overlay.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/friends/#functions","title":"Functions","text":""},{"location":"classes/friends/#activategameoverlay","title":"activateGameOverlay","text":"<p>activateGameOverlay( <code>string</code> type )</p> <p>Activates the overlay with optional dialog to open the following:</p> <ul> <li>\"Friends\"</li> <li>\"Community\"</li> <li>\"Players\"</li> <li>\"Settings\"</li> <li>\"OfficialGameGroup\"</li> <li>\"Stats\"</li> <li>\"Achievements\"</li> <li>\"LobbyInvite\"</li> </ul> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#activategameoverlayinvitedialog","title":"activateGameOverlayInviteDialog","text":"<p>activateGameOverlayInviteDialog( <code>uint64_t</code> steam_id )</p> <p>Activates game overlay to open the invite dialog. Invitations will be sent for the provided lobby. </p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#activategameoverlayinvitedialogconnectstring","title":"activateGameOverlayInviteDialogConnectString","text":"<p>activateGameOverlayInviteDialogConnectString( <code>string</code> connect_string )</p> <p>Activates the game overlay to open an invite dialog that will send the provided Rich Presence connect string to selected friends. </p> <p>Returns: void</p>"},{"location":"classes/friends/#activategameoverlaytostore","title":"activateGameOverlayToStore","text":"<p>activateGameOverlayToStore( <code>uint32_t</code> app_id =0 )</p> <p>Activates the overlay with the application/game Steam store page. </p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#activategameoverlaytouser","title":"activateGameOverlayToUser","text":"<p>activateGameOverlayToUser( <code>string</code> type, <code>uint64_t</code> steam_id )</p> <p>Activates the overlay to the following:</p> <ul> <li>\"steamid\"</li> <li>\"chat\"</li> <li>\"jointrade\"</li> <li>\"stats\"</li> <li>\"achievements\"</li> <li>\"friendadd\"</li> <li>\"friendremove\"</li> <li>\"friendrequestaccept\"</li> <li>\"friendrequestignore\"</li> </ul> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#activategameoverlaytowebpage","title":"activateGameOverlayToWebPage","text":"<p>activateGameOverlayToWebPage( <code>string</code> url )</p> <p>Activates the overlay with specified web address. </p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#clearrichpresence","title":"clearRichPresence","text":"<p>clearRichPresence()</p> <p>Clear the game information in Steam; used in 'View Game Info' section of Friends list.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#closeclanchatwindowinsteam","title":"closeClanChatWindowInSteam","text":"<p>closeClanChatWindowInSteam( <code>uint64_t</code> chat_id )</p> <p>Closes the specified Steam group chat room in the Steam UI. </p> <p>Returns: bool </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#downloadclanactivitycounts","title":"downloadClanActivityCounts","text":"<p>downloadClanActivityCounts( <code>uint64_t</code> clan_id, <code>int</code> clans_to_request )</p> <p>Refresh the Steam Group activity data or get the data from groups other than one that the current user is a member. After receiving the callback you can then use getClanActivityCounts to get the up to date user counts.</p> <p>Triggers a clan_activity_downloaded callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#enumeratefollowinglist","title":"enumerateFollowingList","text":"<p>enumerateFollowingList( <code>uint32</code> start_index )</p> <p>Gets the list of users that the current user is following. You can be following people that are not your friends. Following allows you to receive updates when the person does things like post a new piece of content to the Steam Workshop.</p> <p>Triggers a enumerate_following_list callback.</p> <p>Returns: void</p> <p>Note: This returns up to k_cEnumerateFollowersMax users at once. If the current user is following more than that, you will need to call this repeatedly, with unStartIndex set to the total number of followers that you have received so far. I.E. If you have received 50 followers, and the user is following 105, you will need to call this again with unStartIndex = 50 to get the next 50, and then again with unStartIndex = 100 to get the remaining 5 users.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getchatmemberbyindex","title":"getChatMemberByIndex","text":"<p>getChatMemberByIndex( <code>uint64_t</code> clan_id, <code>int</code> user )</p> <p>Gets the Steam ID at the given index in a Steam group chat. </p> <p>Returns: uint64_t</p> <p>Note: You must call getClanChatMemberCount before calling this.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclanactivitycounts","title":"getClanActivityCounts","text":"<p>getClanActivityCounts( <code>uint64_t</code> clan_id )</p> <p>Gets the most recent information we have about what the users in a Steam Group are doing. This can only retrieve data that the local client knows about. To refresh the data or get data from a group other than one that the current user is a member of you must call downloadClanActivityCounts.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>clan (uint64_t)</li> <li>online (int)</li> <li>ingame (int)</li> <li>chatting (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclanbyindex","title":"getClanByIndex","text":"<p>getClanByIndex( <code>int</code> clan )</p> <p>Gets the Steam group's Steam ID at the given index. </p> <p>Returns: uint64_t</p> <p>Note:  You must call getClanCount before calling this.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclanchatmembercount","title":"getClanChatMemberCount","text":"<p>getClanChatMemberCount( <code>uint64_t</code> clan_id )</p> <p>Get the number of users in a Steam group chat. </p> <p>Returns: int</p> <p>Note: Large steam groups cannot be iterated by the local user.</p> <p>Note: The current user must be in a lobby to retrieve the Steam IDs of other users in that lobby. This is used for iteration, after calling this then getChatMemberByIndex can be used to get the Steam ID of each person in the chat.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclanchatmessage","title":"getClanChatMessage","text":"<p>getClanChatMessage( <code>uint64_t</code> chat_id, <code>int</code> message )</p> <p>Gets the data from a Steam group chat room message. This should only ever be called in response to a connected_clan_chat_message callback.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ret (bool)</li> <li>text (string)</li> <li>type (int)</li> <li>chatter (uint64_t) as a Steam ID</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclancount","title":"getClanCount","text":"<p>getClanCount()</p> <p>Gets the number of Steam groups that the current user is a member of. This is used for iteration, after calling this then getClanByIndex can be used to get the Steam ID of each Steam group.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclanname","title":"getClanName","text":"<p>getClanName( <code>uint64_t</code> clan_id )</p> <p>Gets the display name for the specified Steam group; if the local client knows about it.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclanofficerbyindex","title":"getClanOfficerByIndex","text":"<p>getClanOfficerByIndex( <code>uint64_t</code> clan_id, <code>int</code> officer )</p> <p>Gets the Steam ID of the officer at the given index in a Steam group.</p> <p>Returns: uint64_t</p> <p>Note: You must call getClanOfficerCount before calling this.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclanofficercount","title":"getClanOfficerCount","text":"<p>getClanOfficerCount( <code>uint64_t</code> clan_id )</p> <p>Gets the number of officers (administrators and moderators) in a specified Steam group. This also includes the owner of the Steam group. This is used for iteration, after calling this then getClanOfficerByIndex can be used to get the Steam ID of each officer.</p> <p>Returns: int</p> <p>Note: You must call requestClanOfficerList before this to get the required data.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclanowner","title":"getClanOwner","text":"<p>getClanOwner( <code>uint64_t</code> clan_id )</p> <p>Get the steam ID of the clan owner.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getclantag","title":"getClanTag","text":"<p>getClanTag( <code>uint64_t</code> clan_id )</p> <p>Gets the unique tag (abbreviation) for the specified Steam group; If the local client knows about it. The Steam group abbreviation is a unique way for people to identify the group and is limited to 12 characters. In some games this will appear next to the name of group members. </p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getcoplayfriend","title":"getCoplayFriend","text":"<p>getCoplayFriend( <code>int</code> friend_number )</p> <p>Gets the Steam ID of the recently played with user at the given index.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getcoplayfriendcount","title":"getCoplayFriendCount","text":"<p>getCoplayFriendCount()</p> <p>Gets the number of players that the current users has recently played with, across all games. This is used for iteration, after calling this then getCoplayFriend can be used to get the Steam ID of each player. These players are have been set with previous calls to setPlayedWith.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfollowercount","title":"getFollowerCount","text":"<p>getFollowerCount( <code>uint64_t</code> steam_id )</p> <p>Gets the number of users following the specified user. </p> <p>Triggers a get_follower_count callback.</p> <p>Returns: void </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendbyindex","title":"getFriendByIndex","text":"<p>getFriendByIndex( <code>int</code> friend_number, <code>int</code> friend_flags )</p> <p>Gets the Steam ID of the user at the given index.</p> <p>See the FriendFlags enum for possible values to pass in.</p> <p>Returns: int</p> <p>Note: You must call getFriendCount, passing in the same <code>friend_flags</code> value, before calling this.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendcoplaygame","title":"getFriendCoplayGame","text":"<p>getFriendCoplayGame( <code>uint64_t</code> friend_id )</p> <p>Gets the app ID of the game that user played with someone on their recently-played-with list. </p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendcoplaytime","title":"getFriendCoplayTime","text":"<p>getFriendCoplayTime( <code>uint64_t</code> friend_id )</p> <p>Gets the timestamp of when the user played with someone on their recently-played-with list. The time is provided in Unix epoch format (seconds since Jan 1<sup>st</sup> 1970). </p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendcount","title":"getFriendCount","text":"<p>getFriendCount( <code>int</code> friend_flags )</p> <p>Gets the number of users the client knows about who meet a specified criteria. (Friends, blocked, users on the same server, etc). This can be used to iterate over all of the users by calling getFriendByIndex to get the Steam IDs of each user.</p> <p>See the FriendFlags enum for possible values to pass in.</p> <p>Returns: int</p> <p>Note: Returns -1 if the current user is not logged on.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendcountfromsource","title":"getFriendCountFromSource","text":"<p>getFriendCountFromSource( <code>uint64_t</code> source_id )</p> <p>Get the number of users in a source (Steam group, chat room, lobby, or game server). This is used for iteration, after calling this then getFriendFromSourceByIndex can be used to get the Steam ID of each person in the source.</p> <p>Returns: int</p> <p>Note: Large Steam groups cannot be iterated by the local user.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendfromsourcebyindex","title":"getFriendFromSourceByIndex","text":"<p>getFriendFromSourceByIndex( <code>uint64_t</code> source_id, <code>int</code> friend_number )</p> <p>Gets the Steam ID at the given index from a source (Steam group, chat room, lobby, or game server). </p> <p>Returns: uint64_t</p> <p>Note: You must call getFriendCountFromSource before calling this.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendgameplayed","title":"getFriendGamePlayed","text":"<p>getFriendGamePlayed( <code>uint64_t</code> steam_id )</p> <p>Checks if the specified friend is in a game, and gets info about the game if they are.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>game_port (uint16)</li> <li>id (int) as App ID</li> <li>ip (string)</li> <li>game_port (uint16)</li> <li>query_port (uint16)</li> <li>lobby (uint64_t)</li> </ul> <p>Note: The dictionary will be empty if the friend is offline or not playing a game.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendmessage","title":"getFriendMessage","text":"<p>getFriendMessage( <code>uint64_t</code> friend_id, <code>int</code> message )</p> <p>Gets the data from a Steam friends message. This should only ever be called in response to a connected_friend_chat_message callback.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ret (int)</li> <li>text (string)</li> <li>type (int / ChatEntryType)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendpersonaname","title":"getFriendPersonaName","text":"<p>getFriendPersonaName( <code>uint64_t</code> steam_id )</p> <p>Gets the specified user's persona (display) name. This will only be known to the current user if the other user is in their friends list, on the same game server, in a chat room or lobby, or in a small Steam group with the local user. To get the persona name of the current user use getPersonaName.</p> <p>Returns: string</p> <p>Note: Upon on first joining a lobby, chat room, or game server the current user will not known the name of the other users automatically; that information will arrive asynchronously via persona_state_change callbacks.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendpersonanamehistory","title":"getFriendPersonaNameHistory","text":"<p>getFriendPersonaNameHistory( <code>uint64_t</code> steam_id, <code>int</code> name_history )</p> <p>Gets one of the previous display names for the specified user. This only works for display names that the current user has seen on the local computer.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendpersonastate","title":"getFriendPersonaState","text":"<p>getFriendPersonaState()</p> <p>Gets the current status of the specified user. This will only be known to the current user if the other user is in their friends list, on the same game server, in a chat room or lobby, or in a small Steam group with the local user. To get the state of the current user use getPersonaState.</p> <p>Returns: int</p> <p>Should be one of the following:</p> <ul> <li>0 - Offline</li> <li>1 - Online</li> <li>2 - Busy</li> <li>3 - Away</li> <li>4 - Snooze</li> <li>5 - Looking For Trade</li> <li>6 - Looking for Play</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendrelationship","title":"getFriendRelationship","text":"<p>getFriendRelationship( <code>uint64_t</code> steam_id )</p> <p>Gets a relationship to a specified user.</p> <p>Returns: int</p> <p>Should be one of the following:</p> <ul> <li>0 - None</li> <li>1 - Blocked</li> <li>2 - Request Recipient</li> <li>3 - Friend</li> <li>4 - Request Initiator</li> <li>5 - Ignored</li> <li>6 - Ignored Friend</li> <li>7 - Suggested</li> <li>8 - Max</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendrichpresence","title":"getFriendRichPresence","text":"<p>getFriendRichPresence( <code>uint64_t</code> friend_id, <code>string</code> key )</p> <p>Get a Rich Presence value from a specified friend (typically only used for debugging). </p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendrichpresencekeycount","title":"getFriendRichPresenceKeyCount","text":"<p>getFriendRichPresenceKeyCount( <code>uint64_t</code> friend_id )</p> <p>Gets the number of Rich Presence keys that are set on the specified user. This is used for iteration, after calling this then getFriendRichPresenceKeyByIndex to get the rich presence keys. This is typically only ever used for debugging purposes.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendrichpresencekeybyindex","title":"getFriendRichPresenceKeyByIndex","text":"<p>getFriendRichPresenceKeyByIndex( <code>uint64_t</code> friend_id, <code>int</code> key )</p> <p>Returns an empty string (\"\") if the index is invalid or the specified user has no Rich Presence data available. </p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendsgroupcount","title":"getFriendsGroupCount","text":"<p>getFriendsGroupCount()</p> <p>Gets the number of friends groups (tags) the user has created. This is used for iteration, after calling this then getFriendsGroupIDByIndex can be used to get the ID of each friend group. This is not to be confused with Steam groups. Those can be obtained with getClanCount.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendsgroupidbyindex","title":"getFriendsGroupIDByIndex","text":"<p><code>int16</code> getFriendsGroupIDByIndex( <code>int16</code> friend_group )</p> <p>Gets the friends group ID for the given index.</p> <p>Returns: int16</p> <p>Note: You must call getFriendsGroupCount before calling this.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendsgroupmemberscount","title":"getFriendsGroupMembersCount","text":"<p>getFriendsGroupMembersCount( <code>int16</code> friend_group )</p> <p>Gets the number of friends in a given friends group. This should be called before getting the list of friends with getFriendsGroupMembersList.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendsgroupmemberslist","title":"getFriendsGroupMembersList","text":"<p><code>array</code> getFriendsGroupMembersList( <code>int16</code> friend_group, <code>int</code> member_count )</p> <p>Gets the number of friends in the given friends group. If fewer friends exist than requested those positions' Steam IDs will be invalid.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>friend Steam IDs (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendsgroupname","title":"getFriendsGroupName","text":"<p>getFriendsGroupName( <code>int16</code> friend_group )</p> <p>Gets the name for the given friends group. </p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getfriendsteamlevel","title":"getFriendSteamLevel","text":"<p>getFriendSteamLevel( <code>uint64_t</code> steam_id )</p> <p>Gets the Steam level of the specified user. You can use the local users Steam ID to get their level.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getlargefriendavatar","title":"getLargeFriendAvatar","text":"<p>getLargeFriendAvatar( <code>uint64_t</code> steam_id )</p> <p>Note: Consider using getPlayerAvatar instead because it simplifies the process of getting avatar data.</p> <p>Gets a handle to the large (128x128px) avatar for the specified user. You can pass in getSteamID to get the current user's avatar.</p> <p>Note: It is possible for the size to be larger than 128x128 if the user uploaded a larger image to their profile.</p> <p>Returns: int</p> <p>A Steam image handle which is used with getImageSize and getImageRGBA.</p> <p>Note: This only works for users that the local user knows about. They will automatically know about their friends, people on leaderboards they've requested, or people in the same source as them (Steam group, chat room, lobby, or game server). If they don't know about them then you must call requestUserInformation to cache the avatar locally.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getmediumfriendavatar","title":"getMediumFriendAvatar","text":"<p>getMediumFriendAvatar( <code>uint64_t</code> steam_id )</p> <p>Note: Consider using getPlayerAvatar instead because it simplifies the process of getting avatar data.</p> <p>Gets a handle to the medium (64x64px) avatar for the specified user. You can pass in getSteamID to get the current user's avatar.</p> <p>Returns: int</p> <p>A Steam image handle which is used with getImageSize and getImageRGBA.</p> <p>Note: This only works for users that the local user knows about. They will automatically know about their friends, people on leaderboards they've requested, or people in the same source as them (Steam group, chat room, lobby, or game server). If they don't know about them then you must call requestUserInformation to cache the avatar locally.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getpersonaname","title":"getPersonaName","text":"<p>getPersonaName()</p> <p>Gets the current user's persona (display) name. This is the same name that is displayed the users community profile page. To get the persona name of other users use getFriendPersonaName.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getpersonastate","title":"getPersonaState","text":"<p>getPersonaState()</p> <p>Gets the friend status of the current user. To get the state of other users use getFriendPersonaState.</p> <p>Returns: int</p> <p>Should be one of the following:</p> <ul> <li>0 - Offline</li> <li>1 - Online</li> <li>2 - Busy</li> <li>3 - Away</li> <li>4 - Snooze</li> <li>5 - Looking For Trade</li> <li>6 - Looking for Play</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getplayeravatar","title":"getPlayerAvatar","text":"<p>getPlayerAvatar( <code>int</code> size = 2, <code>uint64_t</code> steam_id = 0 )</p> <p>Get a player's avatar. This is the preferred method of getting avatars as it shortcuts the various avatar functions in Steamworks to reduce the number of steps required.</p> <p>Size can be passed as the AvatarSizes enum or an integer:</p> <ul> <li>1 (small)</li> <li>2 (medium)</li> <li>3 (large)</li> </ul> <p>If no steam_id is passed in, it will get the current user's avatar.</p> <p>Triggers an avatar_loaded callback.</p> <p>Returns: void</p> <p>Note: This is a unique function to GodotSteam. See the Avatars tutorial for more information.</p>"},{"location":"classes/friends/#getplayernickname","title":"getPlayerNickname","text":"<p>getPlayerNickname( <code>uint64_t</code> steam_id )</p> <p>Returns nickname the current user has set for the specified player. Returns NULL if the no nickname has been set for that player. </p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getprofileitempropertystring","title":"getProfileItemPropertyString","text":"<p>getProfileItemPropertyString( <code>uint64_t</code> steam_id, <code>int</code> item_type, <code>int</code> item_property )</p> <p>Returns a string property for a user's equipped profile item.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getprofileitempropertyint","title":"getProfileItemPropertyInt","text":"<p>getProfileItemPropertyInt( <code>uint64_t</code> steam_id, <code>int</code> item_type, <code>int</code> item_property )</p> <p>Returns an unsigned integer property for a user's equipped profile item.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getrecentplayers","title":"getRecentPlayers","text":"<p>getRecentPlayers()</p> <p>Get list of players user has recently played game with.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>player (dictionary)</li> </ul> <p>Contains the following keys:</p> <ul> <li>id (uint64_t) as friend Steam ID.</li> <li>name (string)</li> <li>time (int)</li> <li>status (int)</li> </ul> <p>Note: This is a unique function to GodotSteam.</p>"},{"location":"classes/friends/#getsmallfriendavatar","title":"getSmallFriendAvatar","text":"<p>getSmallFriendAvatar( <code>uint64_t</code> steam_id )</p> <p>Note: Consider using getPlayerAvatar instead because it simplifies the process of getting avatar data.</p> <p>Gets a handle to the small (32x32px) avatar for the specified user. You can pass in getSteamID to get the current user's avatar.</p> <p>Returns: int</p> <p>A Steam image handle which is used with getImageSize and getImageRGBA.</p> <p>Note: This only works for users that the local user knows about. They will automatically know about their friends, people on leaderboards they've requested, or people in the same source as them (Steam group, chat room, lobby, or game server). If they don't know about them then you must call requestUserInformation to cache the avatar locally.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getuserfriendsgroups","title":"getUserFriendsGroups","text":"<p>getUserFriendsGroups()</p> <p>Get list of friends groups (tags) the user has created. This is not to be confused with Steam groups.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>tags (dictionary)</li> </ul> <p>Contains the following keys:</p> <ul> <li>id (int16) as friend group ID</li> <li>name (string)</li> <li>members (int)</li> </ul>"},{"location":"classes/friends/#getuserrestrictions","title":"getUserRestrictions","text":"<p>getUserRestrictions()</p> <p>If current user is chat restricted, they can't send or receive any text or voice chat messages. The user can't see custom avatars. But the user can be online and send or receive game invites. A chat restricted user cannot add friends or join any groups. Restricted users can still be online and send/receive game invites.</p> <p>Returns: uint32</p> <p>It should be one of the following:</p> <ul> <li>0 - None</li> <li>1 - Unknown</li> <li>2 - Any Chat</li> <li>4 - Voice Chat</li> <li>8 - Group Chat</li> <li>16 - Rating</li> <li>32 - Game Invites</li> <li>64 - Trading</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#getusersteamfriends","title":"getUserSteamFriends","text":"<p>getUserSteamFriends()</p> <p>Get a list of user's Steam friends; a mix of different Steamworks API friend functions.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>friends (dictionary)</li> </ul> <p>Contains the following keys:</p> <ul> <li>id (uint64_t) as friend Steam ID</li> <li>name (string)</li> <li>status (int)</li> </ul> <p>Note: This is a unique function to GodotSteam.</p>"},{"location":"classes/friends/#getusersteamgroups","title":"getUserSteamGroups","text":"<p><code>array</code> getUserSteamGroups()</p> <p>Get list of user's Steam groups; a mix of different Steamworks API group functions.</p> <p>Returns: array</p> <p>Contains groups (dictionary) that contains the following keys:</p> <ul> <li>id (uint64_t) as group ID</li> <li>name (string)</li> <li>tag (string)</li> </ul> <p>Note: This is a unique function to GodotSteam.</p>"},{"location":"classes/friends/#hasequippedprofileitem","title":"hasEquippedProfileItem","text":"<p>hasEquippedProfileItem( <code>uint64_t</code> steam_id, <code>int</code> item_type )</p> <p>After calling requestEquippedProfileItems, you can use this function to check if the user has a type of profile item equipped or not.</p> <p>Returns: void</p> <p>Notes: Triggers a equipped_profile_items callback.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#hasfriend","title":"hasFriend","text":"<p>hasFriend( <code>uint64_t</code> steam_id, <code>int</code> friend_flags )</p> <p>Returns true if the specified user meets any of the criteria specified in friend_flags:</p> <ul> <li>0x00 - None</li> <li>0x01 - Blocked</li> <li>0x02 - Friendship Requested</li> <li>0x04 - Immediate</li> <li>0x08 - Clan Member</li> <li>0x10 - On Game Server</li> <li>0x80 - Requesting Friendship</li> <li>0x100 - Requesting Info</li> <li>0x200 - Ignored</li> <li>0x400 - Ignored Friend</li> <li>0x0000 - Chat Member</li> <li>0xFFFF - All</li> </ul> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#inviteusertogame","title":"inviteUserToGame","text":"<p>inviteUserToGame( <code>uint64_t</code> friend_id, <code>string</code> connect_string )</p> <p>Invites a friend or clan member to the current game using a special invite string. If the target user accepts the invite then the pchConnectString gets added to the command-line when launching the game. If the game is already running for that user, then they will receive a join_game_requested callback with the connect string.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#isclanchatadmin","title":"isClanChatAdmin","text":"<p>isClanChatAdmin( <code>uint64_t</code> chat_id, <code>uint64_t</code> steam_id )</p> <p>Checks if a user in the Steam group chat room is an admin. </p> <p>Returns: bool </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#isclanpublic","title":"isClanPublic","text":"<p>isClanPublic( <code>uint64_t</code> clan_id )</p> <p>Checks if the Steam group is public. </p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#isclanofficialgamegroup","title":"isClanOfficialGameGroup","text":"<p>isClanOfficialGameGroup( <code>uint64_t</code> clan_id )</p> <p>Checks if the Steam group is an official game group/community hub. </p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#isclanchatwindowopeninsteam","title":"isClanChatWindowOpenInSteam","text":"<p>isClanChatWindowOpenInSteam( <code>uint64_t</code> chat_id )</p> <p>Checks if the Steam Group chat room is open in the Steam UI.</p> <p>Returns: bool </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#isfollowing","title":"isFollowing","text":"<p>isFollowing( <code>uint64_t</code> steam_id )</p> <p>Checks if the current user is following the specified user.</p> <p>Triggers a is_following callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#isuserinsource","title":"isUserInSource","text":"<p>isUserInSource( <code>uint64_t</code> steam_id, <code>uint64_t</code> source_id )</p> <p>Checks if a specified user is in a source (Steam group, chat room, lobby, or game server).</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#joinclanchatroom","title":"joinClanChatRoom","text":"<p>joinClanChatRoom( <code>uint64_t</code> clan_id )</p> <p>Allows the user to join Steam group (clan) chats right within the game. The behavior is somewhat complicated, because the user may or may not be already in the group chat from outside the game or in the overlay. You can use activateGameOverlayToUser to open the in-game overlay version of the chat.</p> <p>Triggers a join_clan_chat_complete callback.</p> <p>May additionally trigger the following callbacks:</p> <ul> <li>connected_chat_join</li> <li>connected_chat_join</li> <li>connected_clan_chat_message</li> </ul> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#leaveclanchatroom","title":"leaveClanChatRoom","text":"<p>leaveClanChatRoom( <code>uint64_t</code> clan_id )</p> <p>Leaves a Steam group chat that the user has previously entered with joinClanChatRoom.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#openclanchatwindowinsteam","title":"openClanChatWindowInSteam","text":"<p>openClanChatWindowInSteam( <code>uint64_t</code> chat_id )</p> <p>Opens the specified Steam group chat room in the Steam UI. </p> <p>Returns: bool </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#registerprotocolinoverlaybrowser","title":"registerProtocolInOverlayBrowser","text":"<p>registerProtocolInOverlayBrowser( <code>string</code> protocol )</p> <p>Call this before calling activateGameOverlayToWebPage to have the Steam Overlay Browser block navigations to your specified protocol (scheme) uris and instead dispatch a overlay_browser_protocol callback to your game. activateGameOverlayToWebPage must have been called with 1.</p> <p>Returns: bool</p> <p>Note: While this function is in the SDK, it is not listed in the Steamworks docs.</p>"},{"location":"classes/friends/#replytofriendmessage","title":"replyToFriendMessage","text":"<p>replyToFriendMessage( <code>uint64_t</code> steam_id, <code>string</code> message )</p> <p>Sends a message to a Steam friend. </p> <p>Returns: bool </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#requestclanofficerlist","title":"requestClanOfficerList","text":"<p>requestClanOfficerList( <code>uint64_t</code> clan_id )</p> <p>Requests information about a Steam group officers (administrators and moderators).</p> <p>Triggers a request_clan_officer_list callback.</p> <p>Returns: void</p> <p>Note: You can only ask about Steam groups that a user is a member of.</p> <p>Note: This won't download avatars for the officers automatically. If no avatar image is available for an officer, then call requestUserInformation to download the avatar.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#requestequippedprofileitems","title":"requestEquippedProfileItems","text":"<p>requestEquippedProfileItems( <code>uint64_t</code> steam_id )</p> <p>Requests the list of equipped Steam Community profile items for the given user from Steam.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#requestfriendrichpresence","title":"requestFriendRichPresence","text":"<p>requestFriendRichPresence( <code>uint64_t</code> friend_id )</p> <p>Requests Rich Presence data from a specific user. This is used to get the Rich Presence information from a user that is not a friend of the current user, like someone in the same lobby or game server. This function is rate limited, if you call this too frequently for a particular user then it will just immediately post a callback without requesting new data from the server.</p> <p>Triggers a friend_rich_presence_update callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#requestuserinformation","title":"requestUserInformation","text":"<p>requestUserInformation( <code>uint64_t</code> steam_id, <code>bool</code> require_name_only )</p> <p>Requests the persona name and the avatar of a specified user.</p> <p>NOTE: It's a lot slower to download avatars and churns the local cache, so if you don't need avatars, set require_name_only to true.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#sendclanchatmessage","title":"sendClanChatMessage","text":"<p>sendClanChatMessage( <code>uint64_t</code> chat_id, <code>string</code> text )</p> <p>Sends a message to a Steam group chat room.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#setingamevoicespeaking","title":"setInGameVoiceSpeaking","text":"<p>setInGameVoiceSpeaking( <code>uint64_t</code> steam_id, <code>bool</code> speaking )</p> <p>User is in a game pressing the talk button (will suppress the microphone for all voice comms from the Steam friends UI). </p> <p>Let Steam know that the user is currently using voice chat in game. This will suppress the microphone for all voice communication in the Steam UI.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#setlistenforfriendsmessages","title":"setListenForFriendsMessages","text":"<p>setListenForFriendsMessages( <code>bool</code> intercept )</p> <p>Listens for Steam friends chat messages. You can then show these chats inline in the game. For example with a Blizzard style chat message system or the chat system in Dota 2. After enabling this you will receive connected_friend_chat_message callbacks when ever the user receives a chat message. You can get the actual message data from this callback with getFriendMessage. You can send messages with replyToFriendMessage.</p> <p>Triggers a connected_friend_chat_message callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#setpersonaname","title":"setPersonaName","text":"<p>setPersonaName( <code>string</code> name )</p> <p>Sets the current user's persona name, stores it on the server and publishes the changes to all friends who are online. Changes take place locally immediately, and a persona_state_change callback is posted, presuming success. If the name change fails to happen on the server, then an additional persona_state_change callback will be posted to change the name back, in addition to the final result available in the call result.</p> <p>Triggers a name_changed callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#setplayedwith","title":"setPlayedWith","text":"<p>setPlayedWith( <code>uint64_t</code> steam_id )</p> <p>Set player as 'Played With' for game.</p> <p>Returns: void</p> <p>Note: The current user must be in game with the other player for the association to work.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#setrichpresence","title":"setRichPresence","text":"<p>setRichPresence( <code>string</code> key, <code>string</code> value )</p> <p>Sets a Rich Presence key/value for the current user that is automatically shared to all friends playing the same game. Each user can have up to 20 keys set as defined by k_cchMaxRichPresenceKeys. There are two special keys used for viewing/joining games:</p> <p>status - A UTF-8 string that will show up in the 'view game info' dialog in the Steam friends list.</p> <p>connect - A UTF-8 string that contains the command-line for how a friend can connect to a game. This enables the 'join game' button in the 'view game info' dialog, in the steam friends list right click menu, and on the players Steam community profile. Be sure your app implements getLaunchCommandLine so you can disable the popup warning when launched via a command line.</p> <p>There are three additional special keys used by the new Steam Chat:</p> <p>steam_display - Names a rich presence localization token that will be displayed in the viewing user's selected language in the Steam client UI. See Rich Presence Localization for more info, including a link to a page for testing this rich presence data. If steam_display is not set to a valid localization tag, then rich presence will not be displayed in the Steam client.</p> <p>steam_player_group - When set, indicates to the Steam client that the player is a member of a particular group. Players in the same group may be organized together in various places in the Steam UI. This string could identify a party, a server, or whatever grouping is relevant for your game. The string itself is not displayed to users.</p> <p>steam_player_group_size - When set, indicates the total number of players in the steam_player_group. The Steam client may use this number to display additional information about a group when all of the members are not part of a user's friends list. (For example, \"Bob, Pete, and 4 more\".)</p> <p>You can clear all of the keys for the current user with clearRichPresence. To get rich presence keys for friends use getFriendRichPresence.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/friends/#signals","title":"Signals","text":""},{"location":"classes/friends/#avatar_loaded","title":"avatar_loaded","text":"<p>avatar_loaded</p> <p>Called when a large avatar is loaded if you have tried requesting it when it was unavailable.</p> <p>Emits signal in response to function getLargeFriendAvatar, getMediumFriendAvatar, or getSmallFriendAvatar.</p> <p>Returns:</p> <ul> <li>avatar_id (uint64_t)</li> <li>width (int)</li> <li>data (PoolByteArray)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#avatar_image_loaded","title":"avatar_image_loaded","text":"<p>avatar_image_loaded</p> <p>Called when an avatar is requested; sends back the raw Steamworks callback data compared to avatar_loaded.</p> <p>Emits signal in response to function getLargeFriendAvatar, getMediumFriendAvatar, or getSmallFriendAvatar.</p> <p>Returns:</p> <ul> <li>avatar_id (uint64_t)</li> <li>avatar_handle (uint32_t)</li> <li>width (uint32_t)</li> <li>height (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#change_server_requested","title":"change_server_requested","text":"<p>change_server_requested</p> <p>This callback is made when joining a game. If the user is attempting to join a lobby, then the callback [join_requested] will be made.</p> <p>Returns:</p> <ul> <li>server (string)</li> <li>password (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#clan_activity_downloaded","title":"clan_activity_downloaded","text":"<p>clan_activity_downloaded</p> <p>Called when a Steam group activity has received.</p> <p>Emits signal in response to function downloadClanActivityCounts.</p> <p>Returns:</p> <ul> <li>online (int)</li> <li>in_game (int)</li> <li>chatting (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#connected_chat_join","title":"connected_chat_join","text":"<p>connected_chat_join</p> <p>Called when a user has joined a Steam group chat that the we are in.</p> <p>Returns:</p> <ul> <li>chat_id (uint64_t)</li> <li>steam_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#connected_chat_leave","title":"connected_chat_leave","text":"<p>connected_chat_leave</p> <p>Called when a user has left a Steam group chat that the we are in.</p> <p>Returns:</p> <ul> <li>chat_id (uint64_t)</li> <li>steam_id (uint64_t)</li> <li>kicked (bool)</li> <li>dropped (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#connected_clan_chat_message","title":"connected_clan_chat_message","text":"<p>connected_clan_chat_message</p> <p>Called when a chat message has been received in a Steam group chat that we are in.</p> <p>Returns:</p> <ul> <li>chat (dictionary):<ul> <li>ret (int)</li> <li>text (string)</li> <li>type (string)</li> <li>chatter (uint64_t)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#connected_friend_chat_message","title":"connected_friend_chat_message","text":"<p>connected_friend_chat_message</p> <p>Called when chat message has been received from a friend.</p> <p>Returns:</p> <ul> <li>chat (dictionary):<ul> <li>ret (int)</li> <li>text (string)</li> <li>type (int / ChatEntryType)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#enumerate_following_list","title":"enumerate_following_list","text":"<p>enumerate_following_list</p> <p>Returns the result of enumerateFollowingList.</p> <p>Returns:</p> <ul> <li>message (string)</li> <li>following (array)<ul> <li>follow (dictionary)<ul> <li>num (int)</li> <li>id (uint64_t)</li> </ul> </li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#equipped_profile_items","title":"equipped_profile_items","text":"<p>equipped_profile_items</p> <p>Call result from requestEquippedProfileItems. Also sent as a callback.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>steam_id (uint64_t)</li> <li>profile_data (dictionary)<ul> <li>avatar_animated (bool)</li> <li>avatar_frame (bool)</li> <li>profile_modifier (bool)</li> <li>profile_background (bool)</li> <li>profile_mini_background (bool)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#equipped_profile_items_changed","title":"equipped_profile_items_changed","text":"<p>equipped_profile_items_changed</p> <p>Callback for when a user's equipped Steam Commuity profile items have changed. This can be for the current user or their friends.</p> <p>Returns:</p> <ul> <li>steam_id (uint64_t)</li> </ul> <p>Note: GodotSteam is using the callback version.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#friend_rich_presence_update","title":"friend_rich_presence_update","text":"<p>friend_rich_presence_update</p> <p>Called when rich presence data has been updated for a user, this can happen automatically when friends in the same game update their rich presence, or after a call to requestFriendRichPresence.</p> <p>Returns:</p> <ul> <li>steam_id (uint64_t)</li> <li>app_id (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#get_follower_count","title":"get_follower_count","text":"<p>get_follower_count</p> <p>Returns the result of getFollowerCount.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>steam_id (uint64_t)</li> <li>count (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#is_following","title":"is_following","text":"<p>is_following</p> <p>Returns the result of isFollowing.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>steam_id (uint64_t)</li> <li>following (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#join_clan_chat_complete","title":"join_clan_chat_complete","text":"<p>join_clan_chat_complete</p> <p>Posted when the user has attempted to join a Steam group chat via joinClanChatRoom.</p> <p>Returns:</p> <ul> <li>chat_id (uint64_t)</li> <li>response (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#join_game_requested","title":"join_game_requested","text":"<p>join_game_requested</p> <p>Called when the user tries to join a game from their friends list or after a user accepts an invite by a friend with inviteUserToGame.</p> <p>Emits signal in response to receiving a Steam invite.</p> <p>Returns:</p> <ul> <li>user (uint64_t)</li> <li>connect (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#join_requested","title":"join_requested","text":"<p>join_requested</p> <p>Called when the user tries to join a lobby from their friends list or after a user accepts an invite by a friend with inviteUserToGame.</p> <p>Emits signal in response to receiving a Steam invite.</p> <p>Returns:</p> <ul> <li>lobby (uint64_t)</li> <li>steam_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#name_changed","title":"name_changed","text":"<p>name_changed</p> <p>Reports the result of an attempt to change the current user's persona name.</p> <p>Emits signal in response to function setPersonaName.</p> <p>Returns:</p> <ul> <li>success (bool)</li> <li>local_success (bool)</li> <li>result (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#overlay_browser_protocol","title":"overlay_browser_protocol","text":"<p>overlay_browser_protocol</p> <p>Dispatched when an overlay browser instance is navigated to a protocol/scheme registered by registerProtocolInOverlayBrowser.</p> <p>Returns:</p> <ul> <li>uri (string)</li> </ul>"},{"location":"classes/friends/#overlay_toggled","title":"overlay_toggled","text":"<p>overlay_toggled</p> <p>Posted when the Steam Overlay activates or deactivates. The game can use this to be pause or resume single player games.</p> <p>Returns:</p> <ul> <li>toggled (bool)</li> <li>user_initiated (bool)</li> <li>app_id (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#persona_state_change","title":"persona_state_change","text":"<p>persona_state_change</p> <p>This is called when a user has some kind of change.</p> <p>Returns:</p> <ul> <li>steam_id (uint64_t)</li> <li>flags (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#request_clan_officer_list","title":"request_clan_officer_list","text":"<p>request_clan_officer_list</p> <p>Marks the return of a request officer list call.</p> <p>Emits signal in response to function requestClanOfficerList.</p> <p>Returns:</p> <ul> <li>message (string)</li> <li>officers_list (array)<ul> <li>officer (dictionary)<ul> <li>id (uint64_t)</li> <li>name (string)</li> </ul> </li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/friends/#unread_chat_messages_changed","title":"unread_chat_messages_changed","text":"<p>unread_chat_messages_changed</p> <p>Invoked when the status of unread messages changes</p> <p>Returns: nothing</p>"},{"location":"classes/friends/#enums","title":"Enums","text":""},{"location":"classes/friends/#avatarsizes","title":"AvatarSizes","text":"Enumerator Value AVATAR_SMALL 1 AVATAR_MEDIUM 2 AVATAR_LARGE 3"},{"location":"classes/friends/#communityprofileitemtype","title":"CommunityProfileItemType","text":"Enumerator Value PROFILE_ITEM_TYPE_ANIMATED_AVATAR 0 PROFILE_ITEM_TYPE_AVATAR_FRAME 1 PROFILE_ITEM_TYPE_PROFILE_MODIFIER 2 PROFILE_ITEM_TYPE_PROFILE_BACKGROUND 3 PROFILE_ITEM_TYPE_MINI_PROFILE_BACKGROUND 4"},{"location":"classes/friends/#communityprofileitemproperty","title":"CommunityProfileItemProperty","text":"Enumerator Value PROFILE_ITEM_PROPERTY_IMAGE_SMALL 0 PROFILE_ITEM_PROPERTY_IMAGE_LARGE 1 PROFILE_ITEM_PROPERTY_INTERNAL_NAME 2 PROFILE_ITEM_PROPERTY_TITLE 3 PROFILE_ITEM_PROPERTY_DESCRIPTION 4 PROFILE_ITEM_PROPERTY_APP_ID 5 PROFILE_ITEM_PROPERTY_TYPE_ID 6 PROFILE_ITEM_PROPERTY_CLASS 7 PROFILE_ITEM_PROPERTY_MOVIE_WEBM 8 PROFILE_ITEM_PROPERTY_MOVIE_MP4 9 PROFILE_ITEM_PROPERTY_MOVIE_WEBM_SMALL 10 PROFILE_ITEM_PROPERTY_MOVIE_MP4_SMALL 11"},{"location":"classes/friends/#friendflags","title":"FriendFlags","text":"Enumerator Value FRIEND_FLAG_NONE 0X00 FRIEND_FLAG_BLOCKED 0X01 FRIEND_FLAG_FRIENDSHIP_REQUESTED 0X02 FRIEND_FLAG_IMMEDIATE 0X04 FRIEND_FLAG_CLAN_MEMBER 0X08 FRIEND_FLAG_ON_GAME_SERVER 0X10 FRIEND_FLAG_REQUESTING_FRIENDSHIP 0X80 FRIEND_FLAG_REQUESTING_INFO 0X100 FRIEND_FLAG_IGNORED 0X200 FRIEND_FLAG_IGNORED_FRIEND 0X400 FRIEND_FLAG_CHAT_MEMBER 0X1000 FRIEND_FLAG_ALL 0XFFFF"},{"location":"classes/friends/#friendrelationship","title":"FriendRelationship","text":"Enumerator Value FRIEND_RELATION_NONE 0 FRIEND_RELATION_BLOCKED 1 FRIEND_RELATION_REQUEST_RECIPIENT 2 FRIEND_RELATION_FRIEND 3 FRIEND_RELATION_REQUEST_INITIATOR 4 FRIEND_RELATION_IGNORED 5 FRIEND_RELATION_IGNORED_FRIEND 6 FRIEND_RELATION_SUGGESTED 7 FRIEND_RELATION_MAX 8"},{"location":"classes/friends/#overlaytostoreflag","title":"OverlayToStoreFlag","text":"Enumerator Value OVERLAY_TO_STORE_FLAG_NONE 0 OVERLAY_TO_STORE_FLAG_ADD_TO_CART 1 OVERLAY_TO_STORE_FLAG_AND_TO_CART_AND_SHOW 2"},{"location":"classes/friends/#overlaytowebpagemode","title":"OverlayToWebPageMode","text":"Enumerator Value OVERLAY_TO_WEB_PAGE_MODE_DEFAULT 0 OVERLAY_TO_WEB_PAGE_MODE_MODAL 1"},{"location":"classes/friends/#personachange","title":"PersonaChange","text":"Enumerator Value PERSONA_CHANGE_NAME 0X0001 PERSONA_CHANGE_STATUS 0X0002 PERSONA_CHANGE_COME_ONLINE 0X0004 PERSONA_CHANGE_GONE_OFFLINE 0X0008 PERSONA_CHANGE_GAME_PLAYED 0X0010 PERSONA_CHANGE_GAME_SERVER 0X0020 PERSONA_CHANGE_AVATAR 0X0040 PERSONA_CHANGE_JOINED_SOURCE 0X0080 PERSONA_CHANGE_LEFT_SOURCE 0X0100 PERSONA_CHANGE_RELATIONSHIP_CHANGED 0X0200 PERSONA_CHANGE_NAME_FIRST_SET 0X0400 PERSONA_CHANGE_FACEBOOK_INFO 0X0800 PERSONA_CHANGE_NICKNAME 0X1000 PERSONA_CHANGE_STEAM_LEVEL 0X2000"},{"location":"classes/friends/#personastate","title":"PersonaState","text":"Enumerator Value PERSONA_STATE_OFFLINE 0 PERSONA_STATE_ONLINE 1 PERSONA_STATE_BUSY 2 PERSONA_STATE_AWAY 3 PERSONA_STATE_SNOOZE 4 PERSONA_STATE_LOOKING_TO_TRADE 5 PERSONA_STATE_LOOKING_TO_PLAY 6 PERSONA_STATE_MAX 7"},{"location":"classes/friends/#userrestriction","title":"UserRestriction","text":"Enumerator Value USER_RESTRICTION_NONE 0 USER_RESTRICTION_UNKNOWN 1 USER_RESTRICTION_ANY_CHAT 2 USER_RESTRICTION_VOICE_CHAT 4 USER_RESTRICTION_GROUP_CHAT 8 USER_RESTRICTION_RATING 16 USER_RESTRICTION_GAME_INVITES 32 USER_RESTRICTION_TRADING 64"},{"location":"classes/game_search/","title":"Game Search","text":"<p>These functions are not listed in the official Steamworks SDK documentation but do exist in the SDK header files.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/game_search/#functions","title":"Functions","text":""},{"location":"classes/game_search/#acceptgame","title":"acceptGame","text":"<p>acceptGame()</p> <p>After receiving search_for_game_result, accept or decline the game. Multiple search_for_game_result will follow as players accept game until the host starts or cancels the game.</p> <p>Note: The search_for_game_progress callback does not seem to exist in the SDK anywhere.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#addgamesearchparams","title":"addGameSearchParams","text":"<p>addGameSearchParams( <code>string</code> key, <code>string</code> value )</p> <p>A keyname and a list of comma separated values: one of which is must be found in order for the match to qualify; fails if a search is currently in progress. Returns: int</p>"},{"location":"classes/game_search/#cancelrequestplayersforgame","title":"cancelRequestPlayersForGame","text":"<p>cancelRequestPlayersForGame()</p> <p>Cancel request and leave the pool of game hosts looking for players.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#declinegame","title":"declineGame","text":"<p>declineGame()</p> <p>After receiving search_for_game_result, accept or decline the game. Multiple search_for_game_result will follow as players accept game until the host starts or cancels the game.</p> <p>Note: The search_for_game_progress callback does not seem to exist in the SDK anywhere.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#endgame","title":"endGame","text":"<p>endGame( <code>uint64_t</code> game_id )</p> <p>Ends the game. No further submitPlayerResult for game_id will be accepted.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#endgamesearch","title":"endGameSearch","text":"<p>endGameSearch()</p> <p>Leaves queue if still waiting.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#hostconfirmgamestart","title":"hostConfirmGameStart","text":"<p>hostConfirmGameStart( <code>uint64_t</code> game_id )</p> <p>Accept the player list and release connection details to players.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#requestplayersforgame","title":"requestPlayersForGame","text":"<p>requestPlayersForGame( <code>int</code> player_min, <code>int</code> player_max, <code>int</code> max_team_size )</p> <p>Mark server as available for more players with player_min, player_max desired. Accept no lobbies with player-count greater than max_team_size.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#retrieveconnectiondetails","title":"retrieveConnectionDetails","text":"<p>retrieveConnectionDetails( <code>uint64_t</code> host_id )</p> <p>After receiving GameStartedByHostCallback_t get connection details to server.</p> <p>Note: The GameStartedByHostCallback_t callback does not seem to exist in the SDK anywhere.</p> <p>Returns: string</p>"},{"location":"classes/game_search/#searchforgamesolo","title":"searchForGameSolo","text":"<p>searchForGameSolo( <code>int</code> player_min, <code>int</code> player_max)</p> <p>User enter the queue and await a search_for_game_progress callback. fails if another search is currently in progress. Periodic callbacks will be sent as queue time estimates change.</p> <p>Note: The search_for_game_progress callback does not seem to exist in the SDK anywhere.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#searchforgamewithlobby","title":"searchForGameWithLobby","text":"<p>searchForGameWithLobby( <code>uint64_t</code> lobby_id, <code>int</code> player_min, <code>int</code> player_max)</p> <p>All players in lobby enter the queue and await a search_for_game_progress callback. Fails if another search is currently in progress. If not the owner of the lobby or search already in progress this call fails. Periodic callbacks will be sent as queue time estimates change.</p> <p>Note: The search_for_game_progress callback does not seem to exist in the SDK anywhere.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#setconnectiondetails","title":"setConnectionDetails","text":"<p>setConnectionDetails( <code>string</code> details, <code>int</code> connection_details )</p> <p>Set connection details for players once game is found so they can connect to this server.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#setgamehostparams","title":"setGameHostParams","text":"<p>setGameHostParams( <code>string</code> key, <code>string</code> value )</p> <p>A keyname and a list of comma separated values: all the values you allow.</p> <p>Returns: int</p>"},{"location":"classes/game_search/#submitplayerresult","title":"submitPlayerResult","text":"<p>submitPlayerResult( <code>uint64_t</code> game_id, <code>uint64_t</code> player_id, <code>int</code> player_result )</p> <p>Submit a result for one player; does not end the game. game_id continues to describe this game.</p> <p>Returns: int</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/game_search/#signals","title":"Signals","text":""},{"location":"classes/game_search/#end_game_result","title":"end_game_result","text":"<p>end_game_result</p> <p>This callback confirms that the game is recorded as complete on the matchmaking service, the next call to requestPlayersForGame will generate a new unique game ID.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>game_id (uint64_t)</li> </ul>"},{"location":"classes/game_search/#request_players_for_game_final_result","title":"request_players_for_game_final_result","text":"<p>request_players_for_game_final_result</p> <p>There are no notes about this in Valve's header files or documentation.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>search_id (uint64_t)</li> <li>game_id (uint64_t)</li> </ul>"},{"location":"classes/game_search/#request_players_for_game_progress","title":"request_players_for_game_progress","text":"<p>request_players_for_game_progress</p> <p>Callback from requestPlayersForGame when the matchmaking service has started or ended search; callback will also follow a call from cancelRequestPlayersForGame - search_in_progress will be false.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>search_id (uint64_t)</li> </ul>"},{"location":"classes/game_search/#request_players_for_game_result","title":"request_players_for_game_result","text":"<p>request_players_for_game_result</p> <p>Callback from requestPlayersForGame, one of these will be sent per player followed by additional callbacks when players accept or decline the game.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>search_id (uint64_t)</li> <li>player_data (dictionary)<ul> <li>player_id (uint64_t)</li> <li>lobby_id (uint64_t)</li> <li>player_accept_state (int)</li> <li>player_index (int32)</li> <li>total_players (int32)</li> <li>total_players_accepted_game (int32)</li> <li>suggested_team_index (int32)</li> <li>unique_game_id (uint64_t)</li> </ul> </li> </ul>"},{"location":"classes/game_search/#search_for_game_progress","title":"search_for_game_progress","text":"<p>search_for_game_progress</p> <p>There are no notes about this in Valve's header files or documentation.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>search_id (uint64_t)</li> <li>search_progress (dictionary):<ul> <li>lobby_id (uint64_t)</li> <li>ended_search_id (uint64_t)</li> <li>seconds_remaining_estimate (int32)</li> <li>players_searching (int32)</li> </ul> </li> </ul>"},{"location":"classes/game_search/#search_for_game_result","title":"search_for_game_result","text":"<p>search_for_game_result</p> <p>Notification to all players searching that a game has been found.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>search_id (uint64_t)</li> <li>search_result (dictionary):<ul> <li>count_players_ingame (int32)</li> <li>count_accepted_game (int32)</li> <li>host_id (uint64_t)</li> <li>final_callback (bool)</li> </ul> </li> </ul>"},{"location":"classes/game_search/#submit_player_result","title":"submit_player_result","text":"<p>submit_player_result</p> <p>This callback confirms that results were received by the matchmaking service for this player.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>game_id (uint64_t)</li> <li>player_id (uint64_t)</li> </ul>"},{"location":"classes/game_search/#enums","title":"Enums","text":""},{"location":"classes/game_search/#gamesearcherrorcode","title":"GameSearchErrorCode","text":"Enumerator Value GAME_SEARCH_ERROR_CODE_OK 1 GAME_SEARCH_ERROR_CODE_SEARCH_AREADY_IN_PROGRESS 2 GAME_SEARCH_ERROR_CODE_NO_SEARCH_IN_PROGRESS 3 GAME_SEARCH_ERROR_CODE_NOT_LOBBY_LEADER 4 GAME_SEARCH_ERROR_CODE_NO_HOST_AVAILABLE 5 GAME_SEARCH_ERROR_CODE_SEARCH_PARAMS_INVALID 6 GAME_SEARCH_ERROR_CODE_OFFLINE 7 GAME_SEARCH_ERROR_CODE_NOT_AUTHORIZED 8 GAME_SEARCH_ERROR_CODE_UNKNOWN_ERROR 9"},{"location":"classes/game_search/#playerresult","title":"PlayerResult","text":"Enumerator Value PLAYER_RESULT_FAILED_TO_CONNECT 1 PLAYER_RESULT_ABANDONED 2 PLAYER_RESULT_KICKED 3 PLAYER_RESULT_INCOMPLETE 4 PLAYER_RESULT_COMPLETED 5"},{"location":"classes/game_server/","title":"Game Server","text":"<p>Only available in the GodotSteam Server branches</p>"},{"location":"classes/game_server/#functions","title":"Functions","text":""},{"location":"classes/game_server/#associatewithclan","title":"associateWithClan","text":"<p>associateWithClan( <code>uint64_t</code> clan_id )</p> <p>Associate this game server with this clan for the purposes of computing player compatibility.</p> <p>Triggers a associate_clan callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#beginauthsession","title":"beginAuthSession","text":"<p>beginAuthSession( <code>int</code> auth_ticket, <code>uint64_t</code> steam_id )</p> <p>Authenticate the ticket from the entity Steam ID to be sure it is valid and isn't reused. The ticket is created on the entity with getAuthSessionTicket and then needs to be provided over the network for the other end to validate. This registers for validate_auth_ticket_response callbacks if the entity goes offline or cancels the ticket. See EAuthSessionResponse for more information. When the multiplayer session terminates you must call endAuthSession.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#cancelserverauthticket","title":"cancelServerAuthTicket","text":"<p>cancelAuthTicket( <code>uint32</code> auth_ticket )</p> <p>Cancel auth ticket from getAuthSessionTicket; called when no longer playing game with the entity you gave the ticket to.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#clearallkeyvalues","title":"clearAllKeyValues","text":"<p>clearAllKeyValues()</p> <p>Call this to clear the whole list of key/values that are sent in rule queries.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#computenewplayercompatibility","title":"computeNewPlayerCompatibility","text":"<p>computeNewPlayerCompatibility( <code>uint64_t</code> steam_id )</p> <p>Ask if any of the current players dont want to play with this new player - or vice versa. Triggers a player_compat callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#endauthsession","title":"endAuthSession","text":"<p>endAuthSession( <code>uint64_t</code> steam_id )</p> <p>Stop tracking started by beginAuthSession; called when no longer playing game with this entity.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#getauthsessionticket","title":"getAuthSessionTicket","text":"<p>getAuthSessionTicket()</p> <p>Retrieve a authentication ticket to be sent to the entity who wishes to authenticate you. After calling this you can send the ticket to the entity where they can then call beginAuthSession to verify this entities integrity. When creating a ticket for use by the ISteamUserAuth/AuthenticateUserTicket Web API, the calling application should wait for the get_auth_session_ticket_response callback generated by the API call before attempting to use the ticket to ensure that the ticket has been communicated to the server. If this callback does not come in a timely fashion (10 - 20 seconds), then your client is not connected to Steam, and the AuthenticateUserTicket call will fail because it can not authenticate the user.</p> <p>Triggers a get_auth_session_ticket_response callback.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>id (uint32_t)</li> <li>buffer (PoolByteArray)</li> <li>ticket_size (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#getnextoutgoingpacket","title":"getNextOutgoingPacket","text":"<p>getNextOutgoingPacket()</p> <p>Gets a packet that the master server updater needs to send out on UDP when in GameSocketShare mode. GameSocketShare mode can be enabled when calling serverInit.</p> <p>Note: This should only ever be called after calling handleIncomingPacket for any packets that came in that frame.</p> <p>Note: This must be called repeatedly each frame until it returns 0 when in GameSocketShare mode.</p> <p>Returns: dictionary</p> <ul> <li>length (int)</li> <li>out (PoolByteArray)</li> <li>address (uint32)</li> <li>port (uint16)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#getpublicip","title":"getPublicIP","text":"<p>getPublicIP()</p> <p>Gets the public IP of the server according to Steam. This is useful when the server is behind NAT and you want to advertise its IP in a lobby for other clients to directly connect to.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ipv4 (int)</li> <li>ipv6 (int)</li> <li>type (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#getsteamid","title":"getSteamID","text":"<p>getSteamID()</p> <p>Gets the Steam ID of the game server.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#handleincomingpacket","title":"handleIncomingPacket","text":"<p>handleIncomingPacket( <code>int</code> packet, <code>string</code> ip, <code>int</code> port )</p> <p>Handles a Steam master server packet when in GameSocketShare mode. When in GameSocketShare mode, instead of ISteamGameServer creating its own socket to talk to the master server on, it lets the game use its socket to forward messages back and forth. This prevents us from requiring server ops to open up yet another port in their firewalls. This should be called whenever a packet that starts with 0xFFFFFFFF comes in. That means it's for us. The IP and port parameters are used when you've elected to multiplex the game server's UDP socket rather than having the master server updater use its own sockets. Source engine games use this to simplify the job of the server admins, so they don't have to open up more ports on their firewalls. Only after calling this, you should call getNextOutgoingPacket. GameSocketShare mode can be enabled when calling serverInit or serverInitEx.</p> <p>Returns: dictionary</p> <p>Contains the following key:</p> <ul> <li>data (PoolByteArray)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#loggedon","title":"loggedOn","text":"<p>loggedOn()</p> <p>Status functions.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#logoff","title":"logOff","text":"<p>logOff()</p> <p>Begin process of logging game server out of Steam.</p> <p>Triggers a server_connect_failure, server_connected, or server_disconnected callbacks.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#logon","title":"logOn","text":"<p>logOn( <code>string</code> token )</p> <p>Begin process to login to a persistent game server account.</p> <p>Triggers a server_connect_failure, server_connected, or server_disconnected callbacks.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#logonanonymous","title":"logOnAnonymous","text":"<p>logOnAnonymous()</p> <p>Login to a generic, anonymous account.</p> <p>Triggers a server_connect_failure, server_connected, or server_disconnected callbacks.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#requestusergroupstatus","title":"requestUserGroupStatus","text":"<p>requestUserGroupStatus( <code>uint64_t</code> steam_id, <code>int</code> group_id )</p> <p>Ask if user is in specified group; results returned by client_group_status.</p> <p>Triggers a client_group_status callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#secure","title":"secure","text":"<p>secure()</p> <p>Checks whether the game server is in \"Secure\" mode.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setadvertiseserveractive","title":"setAdvertiseServerActive","text":"<p>setAdvertiseServerActive( <code>bool</code> active )</p> <p>Tells the Steam master servers whether or not you want to be active. If this is enabled then the server will talk to the master servers, if it's not then incoming messages are ignored and heartbeats will not be sent.</p> <p>Returns: void</p> <p>Note: This function is called EnableHeartbeats in the Steamworks documentation but is called SetAdvertiseServerAction in the SDK header file.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setbotplayercount","title":"setBotPlayerCount","text":"<p>setBotPlayerCount( <code>int</code> bots )</p> <p>Sets the number of bot/AI players on the game server. The default value is 0.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setdedicatedserver","title":"setDedicatedServer","text":"<p>setDedicatedServer( <code>bool</code> dedicated )</p> <p>Sets the whether this is a dedicated server or a listen server. The default is listen server.</p> <p>Returns: void</p> <p>Note: This only be set before calling logOn or logOnAnonymous.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setgamedata","title":"setGameData","text":"<p>setGameData( <code>string</code> data )</p> <p>Sets a string defining the \"gamedata\" for this server, this is optional, but if set it allows users to filter in the matchmaking/server-browser interfaces based on the value. This is usually formatted as a comma or semicolon separated list. Don't set this unless it actually changes, its only uploaded to the master once; when acknowledged.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setgamedescription","title":"setGameDescription","text":"<p>setGameDescription( <code>string</code> description )</p> <p>Sets the game description. Setting this to the full name of your game is recommended.</p> <p>Returns: void</p> <p>Note: This is required for all game servers and can only be set before calling logOn or logOnAnonymous.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setgametags","title":"setGameTags","text":"<p>setGameTags( <code>string</code> tags )</p> <p>Sets a string defining the \"gametags\" for this server, this is optional, but if set it allows users to filter in the matchmaking/server-browser interfaces based on the value. This is usually formatted as a comma or semicolon separated list. Don't set this unless it actually changes, its only uploaded to the master once; when acknowledged.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setkeyvalue","title":"setKeyValue","text":"<p>setKeyValue( <code>string</code> key, <code>string</code> value )</p> <p>Add/update a rules key/value pair.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setmapname","title":"setMapName","text":"<p>setMapName( <code>string</code> map )</p> <p>Sets the name of map to report in the server browser.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setmaxplayercount","title":"setMaxPlayerCount","text":"<p>setMaxPlayerCount( <code>int</code> players_max )</p> <p>Max player count that will be reported to server browser and client queries.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setmoddir","title":"setModDir","text":"<p>setModDir( <code>string</code> modDir )</p> <p>Sets the game directory. This should be the same directory game where gets installed into. Just the folder name, not the whole path. e.g. \"Spacewar\".</p> <p>Returns: void</p> <p>Note: This is required for all game servers and can only be set before calling logOn or logOnAnonymous.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setpasswordprotected","title":"setPasswordProtected","text":"<p>setPasswordProtected( <code>bool</code> password_protected )</p> <p>Set whether the game server will require a password once when the user tries to join.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setproduct","title":"setProduct","text":"<p>setProduct( <code>string</code> product )</p> <p>Sets the game product identifier. This is currently used by the master server for version checking purposes. Converting the game's app ID to a string for this is recommended.</p> <p>Returns: void</p> <p>Note: This is required for all game servers and can only be set before calling logOn or logOnAnonymous.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setregion","title":"setRegion","text":"<p>setRegion( <code>string</code> region )</p> <p>Region identifier. This is an optional field, the default value is an empty string, meaning the \"world\" region.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setservername","title":"setServerName","text":"<p>setServerName( <code>string</code> name )</p> <p>Sets the name of server as it will appear in the server browser.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setspectatorport","title":"setSpectatorPort","text":"<p>setSpectatorPort( <code>int</code> port )</p> <p>Spectator server. Default is zero, meaning it is now used.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#setspectatorservername","title":"setSpectatorServerName","text":"<p>setSpectatorServerName( <code>string</code> name )</p> <p>Sets the name of the spectator server. This is only used if spectator port is non-zero.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#userhaslicenceforapp","title":"userHasLicenceForApp","text":"<p>userHasLicenseForApp( <code>uint64_t</code> steam_id, <code>uint32</code> app_id )</p> <p>Checks if the user owns a specific piece of Downloadable Content (DLC). This can only be called after sending the users auth ticket to beginAuthSession.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#wasrestartrequested","title":"wasRestartRequested()","text":"<p>wasRestartRequested()</p> <p>Checks if the master server has alerted us that we are out of date. This reverts back to false after calling this function.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/game_server/#signals","title":"Signals","text":""},{"location":"classes/game_server/#associate_clan","title":"associate_clan","text":"<p>associate_clan</p> <p>Sent as a reply to associateWithClan.</p> <p>Returns:</p> <ul> <li>result (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#client_approved","title":"client_approved","text":"<p>client_approved</p> <p>Client has been approved to connect to this game server.</p> <p>Emits signal in response to function sendUserConnectAndAuthenticate (currently missing from Server).</p> <p>Returns:</p> <ul> <li>steam_id (uint64_t)</li> <li>owner_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#client_denied","title":"client_denied","text":"<p>client_denied</p> <p>Client has been denied to connection to this game server.</p> <p>Emits signal in response to function sendUserConnectAndAuthenticate (currently missing from Server).</p> <p>Returns:</p> <ul> <li>steam_id (uint64_t)</li> <li>reason (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#client_group_status","title":"client_group_status","text":"<p>client_group_status</p> <p>Sent as a reply to requestUserGroupStatus.</p> <p>Returns:</p> <ul> <li>steam_id (uint64_t)</li> <li>group_id (uint64_t)</li> <li>member (bool)</li> <li>officer (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#client_kick","title":"client_kick","text":"<p>client_kick</p> <p>Request the game server should kick the user.</p> <p>Returns:</p> <ul> <li>steam_id (uint64_t)</li> <li>reason (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#player_compat","title":"player_compat","text":"<p>player_compat</p> <p>Sent as a reply to computeNewPlayerCompatibility.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>players_dont_like_candidate (int)</li> <li>players_candidate_doesnt_like (int)</li> <li>clan_players_dont_like_candidate (int)</li> <li>steam_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#policy_response","title":"policy_response","text":"<p>policy_response</p> <p>Received when the game server requests to be displayed as secure (VAC protected).</p> <p>Returns:</p> <ul> <li>secure (uint8)</li> </ul> <p>Secure is true if the game server should display itself as secure to users, false otherwise.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#server_connect_failure","title":"server_connect_failure","text":"<p>server_connect_failure</p> <p>Logging the game server onto Steam.</p> <p>Emits signal in response to functions logOff, logOn, or logOnAnonymous.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>retrying (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#server_connected","title":"server_connected","text":"<p>server_connected</p> <p>Server has connected to the Steam back-end.</p> <p>Emits signal in response to functions logOff, logOn, or logOnAnonymous.</p> <p>Results: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server/#server_disconnected","title":"server_disconnected","text":"<p>server_disconnected</p> <p>Called if the client has lost connection to the Steam servers. Real-time services will be disabled until a matching server_connected has been posted.</p> <p>Emits signal in response to functions logOff, logOn, or logOnAnonymous.</p> <p>Returns:</p> <ul> <li>result (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/","title":"Game Server Stats","text":"<p>Functions to allow game servers to set stats and achievements on players.</p> <p>Only available in the GodotSteam Server branches</p>"},{"location":"classes/game_server_stats/#functions","title":"Functions","text":""},{"location":"classes/game_server_stats/#clearuserachievement","title":"clearUserAchievement","text":"<p>clearUserAchievement( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Resets the unlock status of an achievement for the specified user. This is primarily only ever used for testing. You must have called requestUserStats and it needs to return successfully via its callback prior to calling this. This call only modifies Steam's in-memory state and is very cheap. To submit the stats to the server you must call storeUserStats.</p> <p>Returns: bool</p> <p>Note: This will work only on achievements that game servers are allowed to set. If the \"Set By\" field for this achievement is \"Official GS\" then only game servers that have been declared as officially controlled by you will be able to set it. To do this you must set the IP range of your official servers in the Dedicated Servers section of App Admin.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#servergetuserachievement","title":"serverGetUserAchievement","text":"<p>serverGetUserAchievement( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Gets the unlock status of the Achievement.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (bool)</li> <li>user (int) as Steam ID</li> <li>name (string)</li> <li>unlocked (bool</li> </ul> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/game_server_stats/#servergetuserstatfloat","title":"serverGetUserStatFloat","text":"<p>serverGetUserStatFloat( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Gets the current value of the a stat for the specified user.</p> <p>Returns: float</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#servergetuserstatint","title":"serverGetUserStatInt","text":"<p>serverGetUserStatInt( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Gets the current value of the a stat for the specified user.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#requestuserstats","title":"requestUserStats","text":"<p>requestUserStats( <code>uint64_t</code> steam_id )</p> <p>Asynchronously downloads stats and achievements for the specified user from the server. These stats will only be auto-updated for clients currently playing on the server. For other users you'll need to call this function again to refresh any data.</p> <p>Triggers a stats_received call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#setuserachievement","title":"setUserAchievement","text":"<p>setUserAchievement( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Unlocks an achievement for the specified user. You must have called\u00a0requestUserStats\u00a0and it needs to return successfully via its callback prior to calling this! This call only modifies Steam's in-memory state and is very cheap. To submit the stats to the server you must call\u00a0storeUserStats.</p> <p>Returns: bool</p> <p>This function returns\u00a0true\u00a0upon success if all of the following conditions are met; otherwise,\u00a0false.</p> <ul> <li>The specified achievement \"API Name\" exists in App Admin on the Steamworks website, and the changes are published.</li> <li>requestUserStats has completed and successfully returned its callback for the specified user.</li> <li>The stat must be allowed to be set by game server.</li> </ul> <p>Note: These updates will work only on stats that game servers are allowed to edit. If the \"Set By\" field for this stat is \"Official GS\" then only game servers that have been declared as officially controlled by you will be able to set it. To do this you must set the IP range of your official servers in the Dedicated Servers section of App Admin.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#setuserstatfloat","title":"setUserStatFloat","text":"<p>setUserStatFloat( <code>uint64_t</code> steam_id, <code>string</code> name, <code>float</code> stat )</p> <p>Sets / updates the value of a given stat for the specified user. You must have called requestUserStats and it needs to return successfully via its callback prior to calling this. This call only modifies Steam's in-memory state and is very cheap. To submit the stats to the server you must call storeUserStats.</p> <p>Returns: bool</p> <p>This function returns true upon success if all of the following conditions are met; otherwise,\u00a0false.</p> <ul> <li>The specified stat exists in App Admin on the Steamworks website, and the changes are published.</li> <li>requestUserStats has completed and successfully returned its callback for the specified user.</li> <li>The type passed to this function must match the type listed in the App Admin panel of the Steamworks website.</li> <li>The stat must be allowed to be set by game server.</li> </ul> <p>Note: These updates will work only on stats that game servers are allowed to edit. If the \"Set By\" field for this stat is \"Official GS\" then only game servers that have been declared as officially controlled by you will be able to set it. To do this you must set the IP range of your official servers in the Dedicated Servers section of App Admin.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#setuserstatint","title":"setUserStatInt()","text":"<p>setUserStatInt( <code>uint64_t</code> steam_id, <code>string</code> name, <code>int</code> stat )</p> <p>Sets / updates the value of a given stat for the specified user. You must have called requestUserStats and it needs to return successfully via its callback prior to calling this. This call only modifies Steam's in-memory state and is very cheap. To submit the stats to the server you must call storeUserStats.</p> <p>Returns: bool</p> <p>This function returns true upon success if all of the following conditions are met; otherwise,\u00a0false.</p> <ul> <li>The specified stat exists in App Admin on the Steamworks website, and the changes are published.</li> <li>requestUserStats has completed and successfully returned its callback for the specified user.</li> <li>The type passed to this function must match the type listed in the App Admin panel of the Steamworks website.</li> <li>The stat must be allowed to be set by game server.</li> </ul> <p>Note: These updates will work only on stats that game servers are allowed to edit. If the \"Set By\" field for this stat is \"Official GS\" then only game servers that have been declared as officially controlled by you will be able to set it. To do this you must set the IP range of your official servers in the Dedicated Servers section of App Admin.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#storeuserstats","title":"storeUserStats","text":"<p>storeUserStats( <code>uint64_t</code> steam_id )</p> <p>Send the changed stats and achievements data to the server for permanent storage for the specified user. If this fails then nothing is sent to the server. It's advisable to keep trying until the call is successful. This call can be rate limited. Call frequency should be on the order of minutes, rather than seconds. You should only be calling this during major state changes such as the end of a round, the map changing, or the user leaving a server. If you have stats or achievements that you have saved locally but haven't uploaded with this function when your application process ends then this function will automatically be called. You can find additional debug information written to the <code>%steam_install%\\logs\\stats_log.txt</code> file.</p> <p>Triggers a stats_stored callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#updateuseravgratestat","title":"updateUserAvgRateStat","text":"<p>updateUserAvgRateStat( <code>uint64_t</code> steam_id, <code>string</code> name, <code>float</code> this_session, <code>double</code> session_length )</p> <p>Updates an AVGRATE stat with new values for the specified user. You must have called requestUserStats and it needs to return successfully via its callback prior to calling this. This call only modifies Steam's in-memory state and is very cheap. To submit the stats to the server you must call storeUserStats.</p> <p>Returns: bool</p> <p>This function returns\u00a0true\u00a0upon success if all of the following conditions are met; otherwise,\u00a0false.</p> <ul> <li>The specified stat exists in App Admin on the Steamworks website, and the changes are published.</li> <li>requestUserStats\u00a0has completed and successfully returned its callback for the specified user.</li> <li>The type must be AVGRATE in the Steamworks Partner backend.</li> <li>The stat must be allowed to be set by game server.</li> </ul> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/game_server_stats/#signals","title":"Signals","text":""},{"location":"classes/game_server_stats/#stats_received","title":"stats_received","text":"<p>stats_received</p> <p>Result when getting the latests stats and achievements for a user from the server.</p> <p>Emits signal in response to function requestUserStats.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>steam_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#stats_stored","title":"stats_stored","text":"<p>stats_stored</p> <p>Result of a request to store the user stats.</p> <p>Emits signal in response to function storeUserStats.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>steam_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/game_server_stats/#stats_unloaded","title":"stats_unloaded","text":"<p>stats_unloaded</p> <p>Callback indicating that a user's stats have been unloaded.</p> <p>Returns:</p> <ul> <li>steam_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/","title":"HTML Surface","text":"<p>Interface for rendering and interacting with HTML pages. You can use this interface to render and display HTML pages directly inside your game or application. You must call\u00a0htmlInit\u00a0prior to using this interface, and\u00a0htmlShutdown\u00a0when you're done using it. See\u00a0Steam HTML Surface\u00a0for more information.</p> <p>Only available in the main GodotSteam branches</p> <p>The this_handle argument is optional. If you do not pass one, GodotSteam will use the internally stored handle instead.</p>"},{"location":"classes/html_surface/#functions","title":"Functions","text":""},{"location":"classes/html_surface/#addheader","title":"addHeader","text":"<p>addHeader( <code>string</code> key, <code>string</code> value, <code>uint32</code> this_handle )</p> <p>Add a header to any HTTP requests from this browser. A full list of standard request fields are available here on Wikipedia.</p> <p>If no handle is passed, GodotSteam will use the internal one.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#allowstartrequest","title":"allowStartRequest","text":"<p>allowStartRequest( <code>bool</code> allowed, <code>uint32</code> this_handle )</p> <p>Sets whether a pending load is allowed or if it should be canceled. You can use this feature to limit the valid pages allowed in your HTML surface.</p> <p>If no handle is passed, GodotSteam will use the internal one.</p> <p>Returns: void</p> <p>Note: You must call this in response to a html_start_request callback.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#copytoclipboard","title":"copyToClipboard","text":"<p>copyToClipboard( <code>uint32</code> this_handle )</p> <p>Copy the currently selected text from the current page in an HTML surface into the local clipboard.</p> <p>If no handle is passed, GodotSteam will use the internal one.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#createbrowser","title":"createBrowser","text":"<p>createBrowser( <code>string</code> user_agent, <code>string</code> user_css )</p> <p>Create a browser object for displaying of an HTML page. Both arguments used are optional.</p> <p>Returns: void</p> <p>Note: You must call removeBrowser when you are done using this browser to free up the resources associated with it. Failing to do so will result in a memory leak.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#executejavascript","title":"executeJavascript","text":"<p>executeJavascript( <code>string</code> script, <code>uint32</code> this_handle )</p> <p>Run a javascript script in the currently loaded page.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#find","title":"find","text":"<p>find( <code>string</code> search, <code>bool</code> currently_in_find, <code>bool</code> reverse, <code>uint32</code> this_handle )</p> <p>Find a string in the current page of an HTML surface. This is the equivalent of \"ctrl+f\" in your browser of choice. It will highlight all of the matching strings. You should call stopFind when the input string has changed or you want to stop searching.</p> <p>Triggers a html_search_results callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#getlinkatposition","title":"getLinkAtPosition","text":"<p>getLinkAtPosition( <code>int</code> x, <code>int</code> y, <code>uint32</code> this_handle )</p> <p>Retrieves details about a link at a specific position on the current page in an HTML surface.</p> <p>Triggers a html_link_at_position callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#goback","title":"goBack","text":"<p>goBack( <code>uint32</code> this_handle )</p> <p>Navigate back in the page history.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#goforward","title":"goForward","text":"<p>goForward( <code>uint32</code> this_handle )</p> <p>Navigate forward in the page history.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#htmlinit","title":"htmlInit","text":"<p>htmlInit()</p> <p>Initializes the HTML Surface API. This must be called prior to using any other functions in this interface. You must call htmlShutdown when you are done using the interface to free up the resources associated with it. Failing to do so will result in a memory leak.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#jsdialogresponse","title":"jsDialogResponse","text":"<p>jsDialogResponse( <code>bool</code> result, <code>uint32</code> this_handle )</p> <p>Allows you to react to a page wanting to open a javascript modal dialog notification.</p> <p>Returns: void</p> <p>Note: You must call this in response to html_js_alert and html_js_confirm callbacks.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#keychar","title":"keyChar","text":"<p>keyChar( <code>uint32</code> unicode_char, <code>int</code> key_modifiers, <code>uint32</code> this_handle )</p> <p>unicode_char is the unicode character point for this keypress (and potentially multiple chars per press).</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#keydown","title":"keyDown","text":"<p>keyDown( <code>uint32</code> native_key_code, <code>int</code> key_modifiers, <code>uint32</code> this_handle )</p> <p>Keyboard interactions, native keycode is the virtual key code value from your OS.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#keyup","title":"keyUp","text":"<p>keyUp( <code>uint32</code> native_key_code, <code>int</code> key_modifiers, <code>uint32</code> this_handle )</p> <p>Keyboard interactions, native keycode is the virtual key code value from your OS.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#loadurl","title":"loadURL","text":"<p>loadURL( <code>string</code> url, <code>string</code> post_data, <code>uint32</code> this_handle )</p> <p>Navigate to a specified URL. If you send POST data with <code>post_data</code> then the data should be formatted as: <code>name1=value1&amp;name2=value2</code>. You can load any URI scheme supported by Chromium Embedded Framework including but not limited to: <code>http://, https://, ftp://, and file:///</code>. If no scheme is specified then <code>http://</code> is used.</p> <p>Triggers a html_start_request callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#mousedoubleclick","title":"mouseDoubleClick","text":"<p>mouseDoubleClick( <code>int</code> mouseButton, <code>uint32</code> this_handle )</p> <p>Tells an HTML surface that a mouse button has been double clicked. The click will occur where the surface thinks the mouse is based on the last call to mouseMove.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#mousedown","title":"mouseDown","text":"<p>mouseDown( <code>int</code> mouse_button, <code>uint32</code> this_handle )</p> <p>Tells an HTML surface that a mouse button has been pressed. The click will occur where the surface thinks the mouse is based on the last call to mouseMove.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#mousemove","title":"mouseMove","text":"<p>mouseMove( <code>int</code> x, <code>int</code> y, <code>uint32</code> this_handle )</p> <p>Tells an HTML surface where the mouse is.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#mouseup","title":"mouseUp","text":"<p>mouseUp( <code>int</code> mouse_button, <code>uint32</code> this_handle )</p> <p>Tells an HTML surface that a mouse button has been released. The click will occur where the surface thinks the mouse is based on the last call to mouseMove.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#mousewheel","title":"mouseWheel","text":"<p>mouseWheel( <code>int32</code> delta )</p> <p>Tells an HTML surface that the mouse wheel has moved.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#pastefromclipboard","title":"pasteFromClipboard","text":"<p>pasteFromClipboard( <code>uint32</code> this_handle )</p> <p>Paste from the local clipboard to the current page in an HTML surface.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#reload","title":"reload","text":"<p>reload( <code>uint32</code> this_handle )</p> <p>Refreshes the current page. The reload will most likely hit the local cache instead of going over the network. This is equivalent to F5 or Ctrl+R in your browser of choice.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#removebrowser","title":"removeBrowser","text":"<p>removeBrowser( <code>uint32</code> this_handle )</p> <p>You must call this when you are done with an HTML surface, freeing the resources associated with it. Failing to call this will result in a memory leak.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#setbackgroundmode","title":"setBackgroundMode","text":"<p>setBackgroundMode( <code>bool</code> background_mode, <code>uint32</code> this_handle )</p> <p>Enable/disable low-resource background mode, where Javascript and repaint timers are throttled, resources are more aggressively purged from memory, and audio/video elements are paused. When background mode is enabled, all HTML5 video and audio objects will execute \".pause()\" and gain the property \"._steam_background_paused = 1\". When background mode is disabled, any video or audio objects with that property will resume with \".play()\".</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#setcookie","title":"setCookie","text":"<p>setCookie( <code>string</code> hostname, <code>string</code> key, <code>string</code> value, <code>string</code> path, <code>uint32</code> expires, <code>bool</code> secure, <code>bool</code> http_only )</p> <p>Set a webcookie for a specific hostname. You can read more about the specifics of setting cookies here on Wikipedia.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#sethorizontalscroll","title":"setHorizontalScroll","text":"<p>setHorizontalScroll( <code>uint32</code> absolute_pixel_scroll, <code>uint32</code> this_handle )</p> <p>Scroll the current page horizontally.</p> <p>Triggers a html_horizontal_scroll callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#setkeyfocus","title":"setKeyFocus","text":"<p>setKeyFocus( <code>bool</code> has_key_focus, <code>uint32</code> this_handle )</p> <p>Tell a HTML surface if it has key focus currently, controls showing the I-beam cursor in text controls amongst other things.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#setpagescalefactor","title":"setPageScaleFactor","text":"<p>setPageScaleFactor( <code>float</code> zoom, <code>int</code> pointX, <code>int</code> pointY, <code>uint32</code> this_handle )</p> <p>Zoom the current page in an HTML surface. The current scale factor is available from HTML_NeedsPaint_t.flPageScale, HTML_HorizontalScroll_t.flPageScale, and HTML_VerticalScroll_t.flPageScale.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#setsize","title":"setSize","text":"<p>setSize( <code>uint32</code> width, <code>uint32</code> height, <code>uint32</code> this_handle )</p> <p>Sets the display size of a surface in pixels.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#setverticalscroll","title":"setVerticalScroll","text":"<p>setVerticalScroll( <code>uint32</code> absolute_pixel_scroll, <code>uint32</code> this_handle )</p> <p>Scroll the current page vertically.</p> <p>Triggers a html_vertical_scroll callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#htmlshutdown","title":"htmlShutdown","text":"<p>htmlShutdown()</p> <p>Shutdown the ISteamHTMLSurface interface, releasing the memory and handles. You must call this when you are done using this interface to prevent memory and handle leaks. After calling this then all of the functions provided in this interface will fail until you call htmlInit to reinitialize again.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#stopfind","title":"stopFind","text":"<p>stopFind( <code>uint32</code> this_handle )</p> <p>Cancel a currently running find.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#stopload","title":"stopLoad","text":"<p>stopLoad( <code>uint32</code> this_handle )</p> <p>Stop the load of the current HTML page.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#viewsource","title":"viewSource","text":"<p>viewSource( <code>uint32</code> this_handle )</p> <p>Open the current pages HTML source code in default local text editor, used for debugging.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/html_surface/#signals","title":"Signals","text":""},{"location":"classes/html_surface/#html_browser_ready","title":"html_browser_ready","text":"<p>html_browser_ready</p> <p>A new browser was created and is ready for use.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_can_go_backandforward","title":"html_can_go_backandforward","text":"<p>html_can_go_backandforward</p> <p>Called when page history status has changed the ability to go backwards and forward.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>go_back (bool)</li> <li>go_forward (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/html_surface/#html_changed_title","title":"html_changed_title","text":"<p>html_changed_title</p> <p>Called when the current page in a browser gets a new title.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>title (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_close_browser","title":"html_close_browser","text":"<p>html_close_browser</p> <p>Called when the browser has been requested to close due to user interaction; usually because of a javascript window.close() call.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_file_open_dialog","title":"html_file_open_dialog","text":"<p>html_file_open_dialog</p> <p>Called when a browser surface has received a file open dialog from a <code>input type=\"file\"</code> click or similar.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>title (string)</li> <li>initial_file (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_finished_request","title":"html_finished_request","text":"<p>html_finished_request</p> <p>Called when a browser has finished loading a page.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>url (string)</li> <li>title (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_hide_tooltip","title":"html_hide_tooltip","text":"<p>html_hide_tooltip</p> <p>Called when a a browser wants to hide a tooltip.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_horizontal_scroll","title":"html_horizontal_scroll","text":"<p>html_horizontal_scroll</p> <p>Provides details on the visibility and size of the horizontal scrollbar.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>scroll_data (dictionary)<ul> <li>scroll_max (uint32)</li> <li>scroll_current (uint32)</li> <li>page_scale (float)</li> <li>visible (bool)</li> <li>page_size (uint32)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_js_alert","title":"html_js_alert","text":"<p>html_js_alert</p> <p>Called when the browser wants to display a Javascript alert dialog, call jsDialogResponse when the user dismisses this dialog; or right away to ignore it.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>message (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_js_confirm","title":"html_js_confirm","text":"<p>html_js_confirm</p> <p>Called when the browser wants to display a Javascript confirmation dialog, call jsDialogResponse when the user dismisses this dialog; or right away to ignore it.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>message (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/html_surface/#html_link_at_position","title":"html_link_at_position","text":"<p>html_link_at_position</p> <p>Result of a call to getLinkAtPosition.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>link_data (dictionary)<ul> <li>x (uint32)</li> <li>y (uint32)</li> <li>url (string)</li> <li>input (bool)</li> <li>live_link (bool)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_needs_paint","title":"html_needs_paint","text":"<p>html_needs_paint</p> <p>Called when a browser surface has a pending paint. This is where you get the actual image data to render to the screen.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>page_data (dictionary)<ul> <li>bgra (string)</li> <li>wide (uint32)</li> <li>tall (uint32)</li> <li>update_x (uint32)</li> <li>update_y (uint32)</li> <li>update_wide (uint32)</li> <li>update_tall (uint32)</li> <li>scroll_x (uint32)</li> <li>scroll_y (uint32)</li> <li>page_scale (float)</li> <li>page_serial (uint32)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_new_window","title":"html_new_window","text":"<p>html_new_window</p> <p>A browser has created a new HTML window.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>window_data (dictionary)<ul> <li>url (string)</li> <li>x (uint32)</li> <li>y (uint32)</li> <li>wide (uint32)</li> <li>tall (uint32)</li> <li>new_handle (uint32)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_open_link_in_new_tab","title":"html_open_link_in_new_tab","text":"<p>html_open_link_in_new_tab</p> <p>The browser has requested to load a url in a new tab.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>url (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_search_results","title":"html_search_results","text":"<p>html_search_results</p> <p>Results from a search.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>results (uint32)</li> <li>current_match (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_set_cursor","title":"html_set_cursor","text":"<p>html_set_cursor</p> <p>Called when a browser wants to change the mouse cursor.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>mouse_cursor (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_show_tooltip","title":"html_show_tooltip","text":"<p>html_show_tooltip</p> <p>Called when a browser wants to display a tooltip.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>message (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_start_request","title":"html_start_request","text":"<p>html_start_request</p> <p>Called when a browser wants to navigate to a new page.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>url (string)</li> <li>target (string)</li> <li>post_data (string)</li> <li>redirect (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_status_text","title":"html_status_text","text":"<p>html_status_text</p> <p>Called when a browser wants you to display an informational message. This is most commonly used when you hover over links.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>message (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_update_tooltip","title":"html_update_tooltip","text":"<p>html_update_tooltip</p> <p>Called when the text of an existing tooltip has been updated.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>message (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_url_changed","title":"html_url_changed","text":"<p>html_url_changed</p> <p>Called when the browser is navigating to a new url.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li>url_data (dictionary)<ul> <li>url (string)</li> <li>post_data (string)</li> <li>redirect (bool)</li> <li>title (string)</li> <li>new_navigation (bool)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#html_vertical_scroll","title":"html_vertical_scroll","text":"<p>html_vertical_scroll</p> <p>Provides details on the visibility and size of the vertical scrollbar.</p> <p>Returns:</p> <ul> <li>browser_handle (uint32)</li> <li> <ul> <li>scroll_max (uint32)</li> <li>scroll_current (uint32)</li> <li>page_scale (float)</li> <li>visible (bool)</li> <li>page_size (uint32)</li> </ul> <p>scroll_data (dictionary)</p> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/html_surface/#enums","title":"Enums","text":""},{"location":"classes/html_surface/#htmlkeymodifiers","title":"HTMLKeyModifiers","text":"Enumerator Value HTML_KEY_MODIFIER_NONE 0 HTML_KEY_MODIFIER_ALT_DOWN (1&lt;&lt;0) HTML_KEY_MODIFIER_CTRL_DOWN (1&lt;&lt;1) HTML_KEY_MODIFIER_SHIFT_DOWN (1&lt;&lt;2)"},{"location":"classes/html_surface/#htmlmousebutton","title":"HTMLMouseButton","text":"Enumerator Value HTML_MOUSE_BUTTON_LEFT 0 HTML_MOUSE_BUTTON_RIGHT 1 HTML_MOUSE_BUTTON_MIDDLE 2"},{"location":"classes/html_surface/#mousecursor","title":"MouseCursor","text":"Enumerator Value DC_USER 0 DC_NONE 1 DC_ARROW 2 DC_IBEAM 3 DC_HOUR_GLASS 4 DC_WAIT_ARROW 5 DC_CROSSHAIR 6 DC_UP 7 DC_SIZE_NW 8 DC_SIZE_SE 9 DC_SIZE_NE 10 DC_SIZE_SW 11 DC_SIZE_W 12 DC_SIZE_E 13 DC_SIZE_N 14 DC_SIZE_S 15 DC_SIZE_WE 16 DC_SIZE_NS 17 DC_SIZE_ALL 18 DC_NO 19 DC_HAND 20 DC_BLANK 21 DC_MIDDLE_PAN 22 DC_NORTH_PAN 23 DC_NORTH_EAST_PAN 24 DC_EAST_PAN 25 DC_SOUTH_EAST_PAN 26 DC_SOUTH_PAN 27 DC_SOUTH_WEST_PAN 28 DC_WEST_PAN 29 DC_NORTH_WEST_PAN 30 DC_ALIAS 31 DC_CELL 32 DC_COL_RESIZE 33 DC_COPY_CUR 34 DC_VERTICAL_TEXT 35 DC_ROW_RESIZE 36 DC_ZOOM_IN 37 DC_ZOOM_OUT 38 DC_HELP 39 DC_CUSTOM 40 DC_LAST 41"},{"location":"classes/http/","title":"HTTP","text":"<p>A small and easy to use HTTP client to send and receive data from the web.</p> <p>Only available in the main GodotSteam branches and GodotSteam Server branches</p>"},{"location":"classes/http/#functions","title":"Functions","text":""},{"location":"classes/http/#createcookiecontainer","title":"createCookieContainer","text":"<p>createCookieContainer( <code>bool</code> allow_responses_to_modify )</p> <p>Creates a cookie container to store cookies during the lifetime of the process. This API is just for during process lifetime, after Steam restarts no cookies are persisted and you have no way to access the cookie container across repeat executions of your process.</p> <p>If allow_responses_to_modify is true then any response to your requests using this cookie container may add new cookies to the container which may be transmitted with future requests. Otherwise, if it's false then only cookies you explicitly set will be sent.</p> <p>You can associate the cookie container with a http request by using setHTTPRequestCookieContainer, and you can set a cookie using setHTTPCookie. Don't forget to free the container when you're done with it to prevent leaking memory by calling releaseCookieContainer!</p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#createhttprequest","title":"createHTTPRequest","text":"<p>createHTTPRequest( <code>int</code> request_method, <code>string</code> absolute_url )</p> <p>Initializes a new HTTP request. Requires the method such as GET or POST and the absolute URL for the request. Both http and https are supported, so this string must start with \"http://\" or \"https://\" and should look like \"http://store.steampowered.com/app/10/\" or similar. This call returns a handle that you can use to make further calls to setup and then send the HTTP request with sendHTTPRequest or sendHTTPRequestAndStreamResponse. Don't forget to free the HTTP request when you're done with it to prevent leaking memory by calling releaseHTTPRequest.</p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#deferhttprequest","title":"deferHTTPRequest","text":"<p>deferHTTPRequest( <code>uint32</code> request_handle )</p> <p>Defers a request which has already been sent by moving it at the back of the queue.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#gethttpdownloadprogresspct","title":"getHTTPDownloadProgressPct","text":"<p>getHTTPDownloadProgressPct( <code>uint32</code> request_handle )</p> <p>Gets progress on downloading the body for the request. This will be zero unless a response header has already been received which included a content-length field. For responses that contain no content-length it will report zero for the duration of the request as the size is unknown until the connection closes.</p> <p>Returns: float</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#gethttprequestwastimedout","title":"getHTTPRequestWasTimedOut","text":"<p>getHTTPRequestWasTimedOut( <code>int</code> request_handle )</p> <p>Check if the reason the request failed was because we timed it out (rather than some harder failure). You'll want to call this within the context of http_request_completed callback if request_success is false.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#gethttpresponsebodydata","title":"getHTTPResponseBodyData","text":"<p>getHTTPResponseBodyData( <code>uint32</code> request_handle, <code>uint32</code> buffer_size )</p> <p>Gets the body data from an HTTP response. This must be called after the HTTP request has completed and returned the HTTP response via the http_request_completed call result associated with this request handle. You should first call getHTTPResponseBodySize or use the body_size variable provided in the call result, you can then allocate a buffer with that size to pass into this function. This is only for HTTP requests which were sent with sendHTTPRequest. Use getHTTPStreamingResponseBodyData if you're using streaming HTTP requests via sendHTTPRequestAndStreamResponse.</p> <p>Returns: PoolByteArray</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#gethttpresponsebodysize","title":"getHTTPResponseBodySize","text":"<p>getHTTPResponseBodySize( <code>uint32</code> request_handle )</p> <p>Gets the size of the body data from an HTTP response. This must be called after the HTTP request has completed and returned the HTTP response via the http_request_completed or http_request_data_received associated with this request handle. If this returns successfully, then you can allocate a buffer with the provided size to fill with the data obtained from getHTTPResponseBodyData or getHTTPStreamingResponseBodyData.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#gethttpresponseheadersize","title":"getHTTPResponseHeaderSize","text":"<p>getHTTPResponseHeaderSize( <code>uint32</code> request_handle, <code>string</code> header_name )</p> <p>Checks if a header is present in an HTTP response and returns its size. This must be called after the HTTP request has completed and returned the HTTP response via the http_request_completed call result associated with this request handle. If the response header exists in the response, then you can allocate a correctly sized buffer to get the associated value with getHTTPResponseHeaderValue. Here is a list of standard response header names on Wikipedia.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#gethttpresponseheadervalue","title":"getHTTPResponseHeaderValue","text":"<p>getHTTPResponseHeaderValue( <code>uint32</code> request_handle, <code>string</code> header_name, <code>uint32</code> buffer_size )</p> <p>Gets a header value from an HTTP response. This must be called after the HTTP request has completed and returned the HTTP response via the http_request_completed call result associated with this request handle. You should first call getHTTPResponseHeaderSize to check for the presence of the header and to get the size. You can then allocate a buffer with that size and pass it into this function. Here is a list of standard response header names on Wikipedia.</p> <p>Returns: uint8</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#gethttpstreamingresponsebodydata","title":"getHTTPStreamingResponseBodyData","text":"<p>getHTTPStreamingResponseBodyData( <code>uint32</code> request_handle, <code>uint32</code> offset, <code>uint32</code> buffer_size )</p> <p>Gets the body data from a streaming HTTP response. This must be called after data is received from a streaming HTTP request via the http_request_completed callback associated with this request handle. Typically you'll want to allocate a buffer associated with the request handle using the Content-Length HTTP response field to receive the total size of the data when you receive the header via http_request_headers_received. You can then append data to that buffer as it comes in. This is only for streaming HTTP requests which were sent with sendHTTPRequestAndStreamResponse. Use getHTTPResponseBodyData if you're using sendHTTPRequest.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#prioritizehttprequest","title":"prioritizeHTTPRequest","text":"<p>prioritizeHTTPRequest( <code>uint32</code> request_handle )</p> <p>Prioritizes a request which has already been sent by moving it at the front of the queue.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#releasecookiecontainer","title":"releaseCookieContainer","text":"<p>releaseCookieContainer()</p> <p>Releases a cookie container, freeing the memory allocated within Steam. You must call this when you are done using each HTTP cookie container handle that you obtained via createCookieContainer!</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#releasehttprequest","title":"releaseHTTPRequest","text":"<p>releaseHTTPRequest( <code>uint32</code> request_handle )</p> <p>Releases an HTTP request handle, freeing the memory allocated within Steam. You must call this when you are done using each  HTTP request handle that you obtained via createHTTPRequest!</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sendhttprequest","title":"sendHTTPRequest","text":"<p>sendHTTPRequest( <code>uint32</code> request_handle )</p> <p>Sends an HTTP request. This call is asynchronous and provides a call result handle which you must use to track the call to its completion. If you have multiple requests in flight at the same time you can use prioritizeHTTPRequest or deferHTTPRequest to set the priority of the request.</p> <p>If the user is in offline mode in Steam, then this will add an only-if-cached cache-control header and only do a local cache lookup rather than sending any actual remote request.</p> <p>If the data you are expecting is large, you can use sendHTTPRequestAndStreamResponse to stream the data in chunks.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sendhttprequestandstreamresponse","title":"sendHTTPRequestAndStreamResponse","text":"<p>sendHTTPRequestAndStreamResponse( <code>uint32</code> request_handle )</p> <p>Sends an HTTP request and streams the response back in chunks. This call is asynchronous and provides a call result handle which you must use to track the call to its completion. Typically you'll want to allocate a buffer associated with the request handle using the Content-Length HTTP response field to receive the total size of the data when you receive the header via http_request_headers_received. You can then append data to that buffer as it comes in.</p> <p>If you have multiple requests in flight at the same time you can use prioritizeHTTPRequest or deferHTTPRequest to set the priority of the request.</p> <p>If the user is in offline mode in Steam, then this will add an only-if-cached cache-control header and only do a local cache lookup rather than sending any actual remote request.</p> <p>If the data you are expecting is small (on the order of a few megabytes or less) then you'll likely want to use sendHTTPRequest.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttpcookie","title":"setHTTPCookie","text":"<p>setHTTPCookie( <code>string</code> host, <code>string</code> url, <code>string</code> cookie )</p> <p>Adds a cookie to the specified cookie container that will be used with future requests.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestabsolutetimeoutms","title":"setHTTPRequestAbsoluteTimeoutMS","text":"<p>setHTTPRequestAbsoluteTimeoutMS( <code>uint32</code> request_handle, <code>uint32</code> milliseconds )</p> <p>Set an absolute timeout in milliseconds for the HTTP request.</p> <p>This is the total time timeout which is different than the network activity timeout which is set with setHTTPRequestNetworkActivityTimeout which can bump everytime we get more data.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestcontextvalue","title":"setHTTPRequestContextValue","text":"<p>setHTTPRequestContextValue( <code>uint32</code> request_handle, <code>uint64_t</code> context_value )</p> <p>Set a context value for the request, which will be returned in the http_request_completed callback after sending the request.</p> <p>This is just so the caller can easily keep track of which callbacks go with which request data.</p> <p>Must be called before sending the request.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestcookiecontainer","title":"setHTTPRequestCookieContainer","text":"<p>setHTTPRequestCookieContainer( <code>uint32</code> request_handle, <code>uint32</code> cookie_handle )</p> <p>Associates a cookie container to use for an HTTP request.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestgetorpostparameter","title":"setHTTPRequestGetOrPostParameter","text":"<p>setHTTPRequestGetOrPostParameter( <code>uint32</code> request_handle, <code>string</code> name, <code>string</code> value )</p> <p>Set a GET or POST parameter value on the HTTP request.</p> <p>Must be called prior to sending the request.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestheadervalue","title":"setHTTPRequestHeaderValue","text":"<p>setHTTPRequestHeaderValue( <code>uint32</code> request_handle, <code>string</code> header_name, <code>string</code> header_value )</p> <p>Set a request header value for the HTTP request.</p> <p>Must be called before sending the request.</p> <p>A full list of standard request fields are available here on Wikipedia. The User-Agent field is explicitly disallowed as it gets overwritten when the request is sent.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestnetworkactivitytimeout","title":"setHTTPRequestNetworkActivityTimeout","text":"<p>setHTTPRequestNetworkActivityTimeout( <code>uint32</code> request_handle, <code>uint32</code> timeout_seconds )</p> <p>Set the timeout in seconds for the HTTP request.</p> <p>The default timeout is 60 seconds if you don't call this. This can get bumped everytime we get more data. Use setHTTPRequestAbsoluteTimeoutMS if you need a strict maximum timeout.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestrawpostbody","title":"setHTTPRequestRawPostBody","text":"<p>setHTTPRequestRawPostBody( <code>uint32</code> request_handle, <code>string</code> content_type, <code>uint32</code> body_length )</p> <p>Sets the body for an HTTP Post request.</p> <p>Will fail and return false on a GET request, and will fail if POST params have already been set for the request. Setting this raw body makes it the only contents for the post, the content_type parameter will set the \"content-type\" header for the request to inform the server how to interpret the body.</p> <p>Returns: uint8</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestrequiresverifiedcertificate","title":"setHTTPRequestRequiresVerifiedCertificate","text":"<p>setHTTPRequestRequiresVerifiedCertificate( <code>uint32</code> request_handle, <code>bool</code> require_verified_certificate )</p> <p>Sets that the HTTPS request should require verified SSL certificate via machines certificate trust store.</p> <p>This currently only works Windows and macOS.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#sethttprequestuseragentinfo","title":"setHTTPRequestUserAgentInfo","text":"<p>setHTTPRequestUserAgentInfo( <code>uint32</code> request_handle, <code>string</code> user_agent_info )</p> <p>Set additional user agent info for a request.</p> <p>This doesn't clobber the normal user agent, it just adds the extra info on the end. Sending NULL or an empty string resets the user agent info to the default value.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/http/#signals","title":"Signals","text":""},{"location":"classes/http/#http_request_completed","title":"http_request_completed","text":"<p>http_request_completed</p> <p>Result when an HTTP request completes. If you're using getHTTPStreamingResponseBodyData then you should be using the http_request_headers_received or http_request_data_received.</p> <p>Returns:</p> <ul> <li>cookie_handle (uint32)</li> <li>context_value (uint64_t)</li> <li>request_success (bool)</li> <li>status_code (int)</li> <li>body_zize (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#http_request_data_received","title":"http_request_data_received","text":"<p>http_request_data_received</p> <p>Triggered when a chunk of data is received from a streaming HTTP request.</p> <p>Returns:</p> <ul> <li>cookie_handle (uint32)</li> <li>context_value (uint64_t)</li> <li>offset (uint32)</li> <li>bytes_received (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#http_request_headers_received","title":"http_request_headers_received","text":"<p>http_request_headers_received</p> <p>Triggered when HTTP headers are received from a streaming HTTP request.</p> <p>Returns:</p> <ul> <li>cookie_handle (uint32)</li> <li>context_value (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/http/#enums","title":"Enums","text":""},{"location":"classes/http/#httpmethod","title":"HTTPMethod","text":"Enumerator Value HTTP_METHOD_INVALID 0 HTTP_METHOD_GET 1 HTTP_METHOD_HEAD 2 HTTP_METHOD_POST 3 HTTP_METHOD_PUT 4 HTTP_METHOD_DELETE 5 HTTP_METHOD_OPTIONS 6 HTTP_METHOD_PATCH 7"},{"location":"classes/http/#httpstatuscode","title":"HTTPStatusCode","text":"Enumerator Value HTTP_STATUS_CODE_INVALID 0 HTTP_STATUS_CODE_100_CONTINUE 100 HTTP_STATUS_CODE_101_SWITCHING_PROTOCOLS 101 HTTP_STATUS_CODE_200_OK 200 HTTP_STATUS_CODE_201_CREATED 201 HTTP_STATUS_CODE_202_ACCEPTED 202 HTTP_STATUS_CODE_203_NON_AUTHORITATIVE 203 HTTP_STATUS_CODE_204_NO_CONTENT 204 HTTP_STATUS_CODE_205_RESET_CONTENT 205 HTTP_STATUS_CODE_206_PARTIAL_CONTENT 206 HTTP_STATUS_CODE_300_MULTIPLE_CHOICES 300 HTTP_STATUS_CODE_301_MOVED_PERMANENTLY 301 HTTP_STATUS_CODE_302_FOUND 302 HTTP_STATUS_CODE_303_SEE_OTHER 303 HTTP_STATUS_CODE_304_NOT_MODIFIED 304 HTTP_STATUS_CODE_305_USE_PROXY 305 HTTP_STATUS_CODE_307_TEMPORARY_REDIRECT 307 HTTP_STATUS_CODE_400_BAD_REQUEST 400 HTTP_STATUS_CODE_401_UNAUTHORIZED 401 HTTP_STATUS_CODE_402_PAYMENT_REQUIRED 402 HTTP_STATUS_CODE_403_FORBIDDEN 403 HTTP_STATUS_CODE_404_NOT_FOUND 404 HTTP_STATUS_CODE_405_METHOD_NOT_ALLOWED 405 HTTP_STATUS_CODE_406_NOT_ACCEPTABLE 406 HTTP_STATUS_CODE_407_PROXY_AUTH_REQUIRED 407 HTTP_STATUS_CODE_408_REQUEST_TIMEOUT 408 HTTP_STATUS_CODE_409_CONFLICT 409 HTTP_STATUS_CODE_410_GONE 410 HTTP_STATUS_CODE_411_LENGTH_REQUIRED 411 HTTP_STATUS_CODE_412_PRECONDITION_FAILED 412 HTTP_STATUS_CODE_413_REQUEST_ENTITY_TOO_LARGE 413 HTTP_STATUS_CODE_414_REQUEST_URI_TOO_LONG 414 HTTP_STATUS_CODE_415_UNSUPPORTED_MEDIA_TYPE 415 HTTP_STATUS_CODE_416_REQUESTED_RANGE_NOT_SATISFIABLE 416 HTTP_STATUS_CODE_417_EXPECTATION_FAILED 417 HTTP_STATUS_CODE_4XX_UNKNOWN 418 HTTP_STATUS_CODE_429_TOO_MANY_REQUESTS 429 HTTP_STATUS_CODE_500_INTERNAL_SERVER_ERROR 500 HTTP_STATUS_CODE_501_NOT_IMPLEMENTED 501 HTTP_STATUS_CODE_502_BAD_GATEWAY 502 HTTP_STATUS_CODE_503_SERVICE_UNAVAILABLE 503 HTTP_STATUS_CODE_504_GATEWAY_TIMEOUT 504 HTTP_STATUS_CODE_505_HTTP_VERSION_NOT_SUPPORTED 505 HTTP_STATUS_CODE_5XX_UNKNOWN 599"},{"location":"classes/input/","title":"Input","text":"<p>Steam Input API is a flexible action-based API that supports all major controller types - Xbox, PlayStation, Nintendo Switch Pro, and Steam Controllers. See the\u00a0Steam Input\u00a0documentation for more information.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/input/#functions","title":"Functions","text":""},{"location":"classes/input/#activateactionset","title":"activateActionSet","text":"<p>activateActionSet( <code>uint64_t</code> input_handle, <code>uint64_t</code> action_set_handle )</p> <p>Reconfigure the controller to use the specified action set (i.e. \"Menu\", \"Walk\", or \"Drive\").</p> <p>This is cheap, and can be safely called repeatedly. It's often easier to repeatedly call it in your state loops, instead of trying to place it in all of your state transitions.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#activateactionsetlayer","title":"activateActionSetLayer","text":"<p>activateActionSetLayer( <code>uint64_t</code> input_handle, <code>uint64_t</code> action_set_layer_handle )</p> <p>Reconfigure the controller to use the specified action set layer.</p> <p>See the Action Set Layers article for full details and an in-depth practical example.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#deactivateactionsetlayer","title":"deactivateActionSetLayer","text":"<p>deactivateActionSetLayer( <code>uint64_t</code> input_handle, <code>uint64_t</code> action_set_handle )</p> <p>Reconfigure the controller to stop using the specified action set.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#deactivateallactionsetlayers","title":"deactivateAllActionSetLayers","text":"<p>deactivateAllActionSetLayers( <code>uint64_t</code> input_handle )</p> <p>Reconfigure the controller to stop using all action set layers.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getactiveactionsetlayers","title":"getActiveActionSetLayers","text":"<p>getActiveActionSetLayers( <code>uint64_t</code> input_handle)</p> <p>Fill an array with all of the currently active action set layers for a specified controller handle.</p> <p>Returns: array</p> <p>Contains a list of handles (uint64_t).</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getactionsethandle","title":"getActionSetHandle","text":"<p>getActionSetHandle( <code>string</code> action_set_name )</p> <p>Fill an array with all of the currently active action set layers for a specified controller handle.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getactionoriginfromxboxorigin","title":"getActionOriginFromXboxOrigin","text":"<p>getActionOriginFromXboxOrigin( <code>uint64_t</code> input_handle, <code>int</code> origin )</p> <p>Get an action origin that you can use in your glyph look up table or passed into getGlyphForActionOrigin or getStringForActionOrigin.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getanalogactiondata","title":"getAnalogActionData","text":"<p>getAnalogActionData( <code>uint64_t</code> input_handle, <code>uint64_t</code> analog_action_handle )</p> <p>Gets the current state of the supplied analog game action.</p> <p>Returns: dictionary </p> <p>Contains the following keys:</p> <ul> <li>mode (int)</li> <li>x (float)</li> <li>y (float)</li> <li>active (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getanalogactionhandle","title":"getAnalogActionHandle","text":"<p>getAnalogActionHandle( <code>string</code> action_name )</p> <p>Get the handle of the specified analog action.</p> <p>Returns: uint64_t</p> <p>Note: This function does not take an action set handle parameter. That means that each action in your VDF file must have a unique string identifier. In other words, if you use an action called \"up\" in two different action sets, this function will only ever return one of them and the other will be ignored.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getanalogactionorigins","title":"getAnalogActionOrigins","text":"<p>getAnalogActionOrigins( <code>uint64_t</code> input_handle, <code>uint64_t</code> action_set_handle, <code>uint64_t</code> analog_action_handle )</p> <p>Get the origin(s) for an analog action within an action set by filling the return array with handles. Use this to display the appropriate on-screen prompt for the action.</p> <p>Returns: array</p> <p>Contains a list of handles (int).</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getconnectedcontrollers","title":"getConnectedControllers","text":"<p>getConnectedControllers()</p> <p>Enumerates currently connected controllers by filling returned array with controller handles.</p> <p>Returns: array</p> <p>Contains a list of controller handle (uint64_t).</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getcontrollerforgamepadindex","title":"getControllerForGamepadIndex","text":"<p>getControllerForGamepadIndex( <code>int</code> index )</p> <p>Returns the associated controller handle for the specified emulated gamepad. Can be used with getInputTypeForHandle to determine the type of controller using Steam Input Gamepad Emulation.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getcurrentactionset","title":"getCurrentActionSet","text":"<p>getCurrentActionSet( <code>uint64_t</code> input_handle )</p> <p>Get the currently active action set for the specified controller.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getdevicebindingrevision","title":"getDeviceBindingRevision","text":"<p>getDeviceBindingRevision( <code>uint64_t</code> input_handle )</p> <p>Get's the major and minor device binding revisions for Steam Input API configurations. Minor revisions are for small changes such as adding a new option action or updating localization in the configuration. When updating a Minor revision only one new configuration needs to be update with the \"Use Action Block\" flag set. Major revisions are to be used when changing the number of action sets or otherwise reworking configurations to the degree that older configurations are no longer usable. When a user's binding disagree's with the major revision of the current official configuration Steam will forcibly update the user to the new configuration. New configurations will need to be made for every controller when updating the Major revision.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>major (int)</li> <li>minor (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getdigitalactiondata","title":"getDigitalActionData","text":"<p>getDigitalActionData( <code>uint64_t</code> input_handle, <code>uint64_t</code> digital_action_handle )</p> <p>Returns the current state of the supplied digital game action.</p> <p>Returns: dictionary </p> <ul> <li>state (bool)</li> <li>active (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getdigitalactionhandle","title":"getDigitalActionHandle","text":"<p>getDigitalActionHandle( <code>string</code> action_name )</p> <p>Get the handle of the specified digital action.</p> <p>Returns: uint64_t</p> <p>Note: This function does not take an action set handle parameter. That means that each action in your VDF file must have a unique string identifier. In other words, if you use an action called \"up\" in two different action sets, this function will only ever return one of them and the other will be ignored.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getdigitalactionorigins","title":"getDigitalActionOrigins","text":"<p>getDigitalActionOrigins( <code>uint64_t</code> input_handle, <code>uint64_t</code> action_set_handle, <code>uint64_t</code> digital_action_handle )</p> <p>Get the origin(s) for a digital action within an action set by filling return array with input handles. Use this to display the appropriate on-screen prompt for the action.</p> <p>Returns: array</p> <p>Contains a list of handles (int).</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getgamepadindexforcontroller","title":"getGamepadIndexForController","text":"<p>getGamepadIndexForController( <code>uint64_t</code> input_handle )</p> <p>Returns the associated gamepad index for the specified controller, if emulating a gamepad.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getglyphforactionorigin","title":"getGlyphForActionOrigin","text":"<p>getGlyphForActionOrigin( <code>int</code> origin )</p> <p>Get a local path to art for on-screen glyph for a particular origin.</p> <p>Returns: string.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getinputtypeforhandle","title":"getInputTypeForHandle","text":"<p>getInputTypeForHandle( <code>uint64_t</code> input_handle )</p> <p>Returns the input type (device model) for the specified controller. This tells you if a given controller is a Steam controller, Xbox 360 controller, PS4 controller, etc.</p> <p>Returns: string.</p> <p>Note: XBox Series controllers are called XBox One.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getmotiondata","title":"getMotionData","text":"<p>getMotionData( <code>uint64_t</code> input_handle )</p> <p>Returns raw motion data for the specified controller.</p> <p>Returns: dictionary </p> <ul> <li>rot_quat_x (float)</li> <li>rot_quat_y (float)</li> <li>rot_quat_z (float)</li> <li>rot_quat_w (float)</li> <li>pos_accel_x (float)</li> <li>pos_accel_y (float)</li> <li>pos_accel_z (float)</li> <li>rot_vel_x (float)</li> <li>rot_vel_y (float)</li> <li>rot_vel_z (float)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getremoteplaysessionid","title":"getRemotePlaySessionID","text":"<p>getRemotePlaySessionID( <code>uint64_t</code> input_handle )</p> <p>Get the Steam Remote Play session ID associated with a device, or 0 if there is no session associated with it. See isteamremoteplay.h for more information on Steam Remote Play sessions.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#getsessioninputconfigurationsettings","title":"getSessionInputConfigurationSettings","text":"<p>getSessionInputConfigurationSettings()</p> <p>Get a bitmask of the Steam Input Configuration types opted in for the current session. Returns InputConfigurationEnableType values.</p> <p>Returns: uint16 / InputConfigurationEnableType (enum)</p> <p>Note: user can override the settings from the Steamworks Partner site so the returned values may not exactly match your default configuration.</p>"},{"location":"classes/input/#getstringforactionorigin","title":"getStringforActionOrigin","text":"<p>getStringforActionOrigin( <code>int</code> origin )</p> <p>Returns a localized string (from Steam's language setting) for the specified origin.</p> <p>Returns: string.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#inputinit","title":"inputInit","text":"<p>inputInit( <code>bool</code> explicitly_call_runframe )</p> <p>inputInit and inputShutdown must be called when starting/ending use of this interface.</p> <p>If explicitly_call_runframe is called then you will need to manually call runFrame each frame, otherwise Steam Input will updated when run_callbacks is called.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#inputshutdown","title":"inputShutdown","text":"<p>inputShutdown()</p> <p>inputInit and inputShutdown must be called when starting/ending use of this interface.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#runframe","title":"runFrame","text":"<p>runFrame()</p> <p>Synchronize API state with the latest Steam Controller inputs available. This is performed automatically by run_callbacks, but for the absolute lowest possible latency, you can call this directly before reading controller state.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#setdualsensetriggereffect","title":"setDualSenseTriggerEffect","text":"<p>setDualSenseTriggerEffect( <code>uint64_t</code> input_handle, <code>int</code> parameter_index, <code>int</code> trigger_mask, <code>int</code> effect_mode, <code>int</code> position, <code>int</code> amplitude, <code>int</code> frequency )</p> <p>Set the trigger effect for a DualSense controller.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#setledcolor","title":"setLEDColor","text":"<p>setLEDColor( <code>uint64_t</code> input_handle, <code>int</code> color_r, <code>int</code> color_g, <code>int</code> color_b, <code>int</code> flags )</p> <p>Set the controller LED color on supported controllers.</p> <p>Returns: void</p> <p>Note: The VSC does not support any color but white, and will interpret the RGB values as a greyscale value affecting the brightness of the Steam button LED. The DS4 responds to full color information and uses the values to set the color &amp; brightness of the lightbar.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#showbindingpanel","title":"showBindingPanel","text":"<p>showBindingPanel( <code>uint64_t</code> input_handle )</p> <p>Invokes the Steam overlay and brings up the binding screen.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#stopanalogactionmomentum","title":"stopAnalogActionMomentum","text":"<p>stopAnalogActionMomentum( <code>uint64_t</code> input_handle, <code>uint64_t</code> action )</p> <p>Stops the momentum of an analog action (where applicable, ie a touchpad w/ virtual trackball settings).</p> <p>Returns: void</p> <p>Note: This will also stop all associated haptics. This is useful for situations where you want to indicate to the user that the limit of an action has been reached, such as spinning a carousel or scrolling a webpage.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#translateactionorigin","title":"translateActionOrigin","text":"<p>translateActionOrigin( <code>int</code> destination_input, <code>int</code> source_origin )</p> <p>Get the equivalent origin for a given controller type or the closest controller type that existed in the SDK you built into your game if destination_inputis 0. This action origin can be used in your glyph look up table or passed into getGlyphForActionOrigin or getStringForActionOrigin.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#triggerhapticpulse","title":"triggerHapticPulse","text":"<p>triggerHapticPulse( <code>uint64_t</code> input_handle, <code>int</code> target_pad, <code>int</code> duration )</p> <p>Triggers a (low-level) haptic pulse on supported controllers.</p> <p>Currently only the VSC supports haptic pulses. This API call will be ignored for all other controller models. The typical max value of an unsigned short is 65535, which means the longest haptic pulse you can trigger with this method has a duration of 0.065535 seconds (ie, less than 1/10<sup>th</sup> of a second). This function should be thought of as a low-level primitive meant to be repeatedly used in higher-level user functions to generate more sophisticated behavior.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#triggerrepeatedhapticpulse","title":"triggerRepeatedHapticPulse","text":"<p>triggerRepeatedHapticPulse( <code>uint64_t</code> input_handle, <code>int</code> target_pad, <code>int</code> duration, <code>int</code> offset, <code>int</code> repeat, <code>int</code> flags )</p> <p>Triggers a repeated haptic pulse on supported controllers.</p> <p>Returns: void</p> <p>Note: Currently only the VSC supports haptic pulses. This API call will be ignored for incompatible controller models. This is a more user-friendly function to call than TriggerHapticPulse as it can generate pulse patterns long enough to be actually noticed by the user. Changing the usDurationMicroSec and usOffMicroSec parameters will change the \"texture\" of the haptic pulse.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#triggervibration","title":"triggerVibration","text":"<p>triggerVibration( <code>uint64_t</code> input_handle, <code>uint16_t</code> left_speed, <code>uint16_t</code> right_speed )</p> <p>Trigger a vibration event on supported controllers.</p> <p>Returns: void</p> <p>Note: This API call will be ignored for incompatible controller models. This generates the traditional \"rumble\" vibration effect. The VSC will emulate traditional rumble using its haptics.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/input/#triggervibrationextended","title":"triggerVibrationExtended","text":"<p>triggerVibrationExtended( <code>uint64_t</code> input_handle, <code>uint16_t</code> left_speed, <code>uint16_t</code> right_speed, <code>uint16_t</code> left_trigger_speed, <code>uint16_t</code> right_trigger_speed )</p> <p>Trigger a vibration event on supported controllers including Xbox trigger impulse rumble - Steam will translate these commands into haptic pulses for Steam Controllers.</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/input/#signals","title":"Signals","text":""},{"location":"classes/input/#input_configuration_loaded","title":"input_configuration_loaded","text":"<p>input_configuration_loaded</p> <p>Called when a controller configuration has been loaded, will fire once per controller per focus change for Steam Input enabled controllers.</p> <p>Returns:</p> <ul> <li>app_id (uint32_t)</li> <li>device_handle (uint64_t)</li> <li>config_data (dictionary)<ul> <li>mapping_creator (uint64_t)</li> <li>major_revision (uint32)</li> <li>minor_revision (uint32)</li> <li>uses_steam_input_api (bool)</li> <li>uses_gamepad_api (bool)</li> </ul> </li> </ul>"},{"location":"classes/input/#input_device_connected","title":"input_device_connected","text":"<p>input_device_connected</p> <p>Called when a new controller has been connected, will fire once per controller if multiple new controllers connect in the same frame.</p> <p>Returns:</p> <ul> <li>input_handle (uint64_t)</li> </ul>"},{"location":"classes/input/#input_device_disconnected","title":"input_device_disconnected","text":"<p>input_device_disconnected</p> <p>Called when a new controller has been connected, will fire once per controller if multiple new controllers connect in the same frame.</p> <p>Returns:</p> <ul> <li>input_handle (uint64_t)</li> </ul>"},{"location":"classes/input/#input_gamepad_slot_change","title":"input_gamepad_slot_change","text":"<p>input_gamepad_slot_change</p> <p>Called when controller gamepad slots change. On Linux / macOS these slots are shared for all running apps.</p> <p>Returns:</p> <ul> <li>app_id (uint32_t)</li> <li>device_handle (uint64_t)</li> <li>device_type (int)</li> <li>old_gamepad_slot (int)</li> <li>new_gamepad_slot (int)</li> </ul>"},{"location":"classes/input/#enums","title":"Enums","text":""},{"location":"classes/input/#inputactionorigin","title":"InputActionOrigin","text":"Enumerator Value INPUT_ACTION_ORIGIN_NONE 0 INPUT_ACTION_ORIGIN_A 1 INPUT_ACTION_ORIGIN_B 2 INPUT_ACTION_ORIGIN_X 3 INPUT_ACTION_ORIGIN_Y 4 INPUT_ACTION_ORIGIN_LEFT_BUMPER 5 INPUT_ACTION_ORIGIN_RIGHT_BUMPER 6 INPUT_ACTION_ORIGIN_LEFTGRIP 7 INPUT_ACTION_ORIGIN_RIGHTGRIP 8 INPUT_ACTION_ORIGIN_START 9 INPUT_ACTION_ORIGIN_BACK 10 INPUT_ACTION_ORIGIN_LEFT_PAD_TOUCH 11 INPUT_ACTION_ORIGIN_LEFT_PAD_SWIPE 12 INPUT_ACTION_ORIGIN_LEFT_PAD_CLICK 13 INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_NORTH 14 INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_SOUTH 15 INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_WEST 16 INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_EAST 17 INPUT_ACTION_ORIGIN_RIGHT_PAD_TOUCH 18 INPUT_ACTION_ORIGIN_RIGHT_PAD_SWIPE 19 INPUT_ACTION_ORIGIN_RIGHT_PAD_CLICK 20 INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_NORTH 21 INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_SOUTH 22 INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_WEST 23 INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_EAST 24 INPUT_ACTION_ORIGIN_LEFT_TRIGGER_PULL 25 INPUT_ACTION_ORIGIN_LEFT_TRIGGER_CLICK 26 INPUT_ACTION_ORIGIN_RIGHT_TRIGGER_PULL 27 INPUT_ACTION_ORIGIN_RIGHT_TRIGGER_CLICK 28 INPUT_ACTION_ORIGIN_LEFT_STICK_MOVE 29 INPUT_ACTION_ORIGIN_LEFT_STICK_CLICK 30 INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_NORTH 31 INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_SOUTH 32 INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_WEST 33 INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_EAST 34 INPUT_ACTION_ORIGIN_GYRO_MOVE 35 INPUT_ACTION_ORIGIN_GYRO_PITCH 36 INPUT_ACTION_ORIGIN_GYRO_YAW 37 INPUT_ACTION_ORIGIN_GYRO_ROLL 38 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED0 39 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED1 40 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED2 41 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED3 42 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED4 43 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED5 44 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED6 45 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED7 46 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED8 47 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED9 48 INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED10 49 INPUT_ACTION_ORIGIN_PS4_X 50 INPUT_ACTION_ORIGIN_PS4_CIRCLE 51 INPUT_ACTION_ORIGIN_PS4_TRIANGLE 52 INPUT_ACTION_ORIGIN_PS4_SQUARE 53 INPUT_ACTION_ORIGIN_PS4_LEFT_BUMPER 54 INPUT_ACTION_ORIGIN_PS4_RIGHT_BUMPER 55 INPUT_ACTION_ORIGIN_PS4_OPTIONS 56 INPUT_ACTION_ORIGIN_PS4_SHARE 57 INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_TOUCH 58 INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_SWIPE 59 INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_CLICK 60 INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_NORTH 61 INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_SOUTH 62 INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_WEST 63 INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_EAST 64 INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_TOUCH 65 INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_SWIPE 66 INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_CLICK 67 INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_NORTH 68 INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_SOUTH 69 INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_WEST 70 INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_EAST 71 INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_TOUCH 72 INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_SWIPE 73 INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_CLICK 74 INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_NORTH 75 INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_SOUTH 76 INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_WEST 77 INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_EAST 78 INPUT_ACTION_ORIGIN_PS4_LEFT_TRIGGER_PULL 79 INPUT_ACTION_ORIGIN_PS4_LEFT_TRIGGER_CLICK 80 INPUT_ACTION_ORIGIN_PS4_RIGHT_TRIGGER_PULL 81 INPUT_ACTION_ORIGIN_PS4_RIGHT_TRIGGER_CLICK 82 INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_MOVE 83 INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_CLICK 84 INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_NORTH 85 INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_SOUTH 86 INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_WEST 87 INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_EAST 88 INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_MOVE 89 INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_CLICK 90 INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_NORTH 91 INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_SOUTH 92 INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_WEST 93 INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_EAST 94 INPUT_ACTION_ORIGIN_PS4_DPAD_NORTH 95 INPUT_ACTION_ORIGIN_PS4_DPAD_SOUTH 96 INPUT_ACTION_ORIGIN_PS4_DPAD_WEST 97 INPUT_ACTION_ORIGIN_PS4_DPAD_EAST 98 INPUT_ACTION_ORIGIN_PS4_GYRO_MOVE 99 INPUT_ACTION_ORIGIN_PS4_GYRO_PITCH 100 INPUT_ACTION_ORIGIN_PS4_GYRO_YAW 101 INPUT_ACTION_ORIGIN_PS4_GYRO_ROLL 102 INPUT_ACTION_ORIGIN_PS4_RESERVED0 103 INPUT_ACTION_ORIGIN_PS4_RESERVED1 104 INPUT_ACTION_ORIGIN_PS4_RESERVED2 105 INPUT_ACTION_ORIGIN_PS4_RESERVED3 106 INPUT_ACTION_ORIGIN_PS4_RESERVED4 107 INPUT_ACTION_ORIGIN_PS4_RESERVED5 108 INPUT_ACTION_ORIGIN_PS4_RESERVED6 109 INPUT_ACTION_ORIGIN_PS4_RESERVED7 110 INPUT_ACTION_ORIGIN_PS4_RESERVED8 111 INPUT_ACTION_ORIGIN_PS4_RESERVED9 112 INPUT_ACTION_ORIGIN_PS4_RESERVED10 113 INPUT_ACTION_ORIGIN_XBOX_ONE_A 114 INPUT_ACTION_ORIGIN_XBOX_ONE_B 115 INPUT_ACTION_ORIGIN_XBOX_ONE_X 116 INPUT_ACTION_ORIGIN_XBOX_ONE_Y 117 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_BUMPER 118 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_BUMPER 119 INPUT_ACTION_ORIGIN_XBOX_ONE_MENU 120 INPUT_ACTION_ORIGIN_XBOX_ONE_VIEW 121 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_TRIGGER_PULL 122 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_TRIGGER_CLICK 123 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_TRIGGER_PULL 124 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_TRIGGER_CLICK 125 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_MOVE 126 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_CLICK 127 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_NORTH 128 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_SOUTH 129 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_WEST 130 INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_EAST 131 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_MOVE 132 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_CLICK 133 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_NORTH 134 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_SOUTH 135 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_WEST 136 INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_EAST 137 INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_NORTH 138 INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_SOUTH 139 INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_WEST 140 INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_EAST 141 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED0 142 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED1 143 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED2 144 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED3 145 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED4 146 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED5 147 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED6 148 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED7 149 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED8 150 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED9 151 INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED10 152 INPUT_ACTION_ORIGIN_XBOX_360_A 153 INPUT_ACTION_ORIGIN_XBOX_360_B 154 INPUT_ACTION_ORIGIN_XBOX_360_X 155 INPUT_ACTION_ORIGIN_XBOX_360_Y 156 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_BUMPER 157 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_BUMPER 158 INPUT_ACTION_ORIGIN_XBOX_360_START 159 INPUT_ACTION_ORIGIN_XBOX_360_BACK 160 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_TRIGGER_PULL 161 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_TRIGGER_CLICK 162 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_TRIGGER_PULL 163 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_TRIGGER_CLICK 164 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_MOVE 165 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_CLICK 166 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_NORTH 167 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_SOUTH 168 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_WEST 169 INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_EAST 170 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_MOVE 171 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_CLICK 172 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_NORTH 173 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_SOUTH 174 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_WEST 175 INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_EAST 176 INPUT_ACTION_ORIGIN_XBOX_360_DPAD_NORTH 177 INPUT_ACTION_ORIGIN_XBOX_360_DPAD_SOUTH 178 INPUT_ACTION_ORIGIN_XBOX_360_DPAD_WEST 179 INPUT_ACTION_ORIGIN_XBOX_360_DPAD_EAST 180 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED0 181 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED1 182 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED2 183 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED3 184 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED4 185 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED5 186 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED6 187 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED7 188 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED8 189 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED9 190 INPUT_ACTION_ORIGIN_XBOX_360_RESERVED10 191 INPUT_ACTION_ORIGIN_SWITCH_A 192 INPUT_ACTION_ORIGIN_SWITCH_B 193 INPUT_ACTION_ORIGIN_SWITCH_X 194 INPUT_ACTION_ORIGIN_SWITCH_Y 195 INPUT_ACTION_ORIGIN_SWITCH_LEFT_BUMPER 196 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_BUMPER 197 INPUT_ACTION_ORIGIN_SWITCH_PLUS 198 INPUT_ACTION_ORIGIN_SWITCH_MINUS 199 INPUT_ACTION_ORIGIN_SWITCH_CAPTURE 200 INPUT_ACTION_ORIGIN_SWITCH_LEFT_TRIGGER_PULL 201 INPUT_ACTION_ORIGIN_SWITCH_LEFT_TRIGGER_CLICK 202 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_TRIGGER_PULL 203 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_TRIGGER_CLICK 204 INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_MOVE 205 INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_CLICK 206 INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_NORTH 207 INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_SOUTH 208 INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_WEST 209 INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_EAST 210 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_MOVE 211 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_CLICK 212 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_NORTH 213 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_SOUTH 214 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_WEST 215 INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_EAST 216 INPUT_ACTION_ORIGIN_SWITCH_DPAD_NORTH 217 INPUT_ACTION_ORIGIN_SWITCH_DPAD_SOUTH 218 INPUT_ACTION_ORIGIN_SWITCH_DPAD_WEST 219 INPUT_ACTION_ORIGIN_SWITCH_DPAD_EAST 220 INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_MOVE 221 INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_PITCH 222 INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_YAW 223 INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_ROLL 224 INPUT_ACTION_ORIGIN_SWITCH_RESERVED0 225 INPUT_ACTION_ORIGIN_SWITCH_RESERVED1 226 INPUT_ACTION_ORIGIN_SWITCH_RESERVED2 227 INPUT_ACTION_ORIGIN_SWITCH_RESERVED3 228 INPUT_ACTION_ORIGIN_SWITCH_RESERVED4 229 INPUT_ACTION_ORIGIN_SWITCH_RESERVED5 230 INPUT_ACTION_ORIGIN_SWITCH_RESERVED6 231 INPUT_ACTION_ORIGIN_SWITCH_RESERVED7 232 INPUT_ACTION_ORIGIN_SWITCH_RESERVED8 233 INPUT_ACTION_ORIGIN_SWITCH_RESERVED9 234 INPUT_ACTION_ORIGIN_SWITCH_RESERVED10 235 INPUT_ACTION_ORIGIN_SWITCH_RIGHTGYRO_MOVE 236 INPUT_ACTION_ORIGIN_SWITCH_RIGHTGYRO_PITCH 237 INPUT_ACTION_ORIGIN_SWITCH_RIGHTGYRO_YAW 238 INPUT_ACTION_ORIGIN_SWITCH_RIGHTGYRO_ROLL 239 INPUT_ACTION_ORIGIN_SWITCH_LEFTGYRO_MOVE 240 INPUT_ACTION_ORIGIN_SWITCH_LEFTGYRO_PITCH 241 INPUT_ACTION_ORIGIN_SWITCH_LEFTGYRO_YAW 242 INPUT_ACTION_ORIGIN_SWITCH_LEFTGYRO_ROLL 243 INPUT_ACTION_ORIGIN_SWITCH_LEFTGRIP_LOWER 244 INPUT_ACTION_ORIGIN_SWITCH_LEFTGRIP_UPPER 245 INPUT_ACTION_ORIGIN_SWITCH_RIGHTGRIP_LOWER 246 INPUT_ACTION_ORIGIN_SWITCH_RIGHTGRIP_UPPER 247 INPUT_ACTION_ORIGIN_SWITCH_JOYCON_BUTTON_N 248 INPUT_ACTION_ORIGIN_SWITCH_JOYCON_BUTTON_E 249 INPUT_ACTION_ORIGIN_SWITCH_JOYCON_BUTTON_S 250 INPUT_ACTION_ORIGIN_SWITCH_JOYCON_BUTTON_W 251 INPUT_ACTION_ORIGIN_SWITCH_RESERVED15 252 INPUT_ACTION_ORIGIN_SWITCH_RESERVED16 253 INPUT_ACTION_ORIGIN_SWITCH_RESERVED17 254 INPUT_ACTION_ORIGIN_SWITCH_RESERVED18 255 INPUT_ACTION_ORIGIN_SWITCH_RESERVED19 256 INPUT_ACTION_ORIGIN_SWITCH_RESERVED20 257 INPUT_ACTION_ORIGIN_PS5_X 258 INPUT_ACTION_ORIGIN_PS5_CIRCLE 259 INPUT_ACTION_ORIGIN_PS5_TRIANGLE 260 INPUT_ACTION_ORIGIN_PS5_SQUARE 261 INPUT_ACTION_ORIGIN_PS5_LEFTBUMPER 262 INPUT_ACTION_ORIGIN_PS5_RIGHTBUMPER 263 INPUT_ACTION_ORIGIN_PS5_OPTION 264 INPUT_ACTION_ORIGIN_PS5_CREATE 265 INPUT_ACTION_ORIGIN_PS5_MUTE 266 INPUT_ACTION_ORIGIN_PS5_LEFTPAD_TOUCH 267 INPUT_ACTION_ORIGIN_PS5_LEFTPAD_SWIPE 268 INPUT_ACTION_ORIGIN_PS5_LEFTPAD_CLICK 269 INPUT_ACTION_ORIGIN_PS5_LEFTPAD_DPADNORTH 270 INPUT_ACTION_ORIGIN_PS5_LEFTPAD_DPADSOUTH 271 INPUT_ACTION_ORIGIN_PS5_LEFTPAD_DPADWEST 272 INPUT_ACTION_ORIGIN_PS5_LEFTPAD_DPADEAST 273 INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_TOUCH 274 INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_SWIPE 275 INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_CLICK 276 INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_DPADNORTH 277 INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_DPADSOUTH 278 INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_DPADWEST 279 INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_DPADEAST 280 INPUT_ACTION_ORIGIN_PS5_CENTERPAD_TOUCH 281 INPUT_ACTION_ORIGIN_PS5_CENTERPAD_SWIPE 282 INPUT_ACTION_ORIGIN_PS5_CENTERPAD_CLICK 283 INPUT_ACTION_ORIGIN_PS5_CENTERPAD_DPADNORTH 284 INPUT_ACTION_ORIGIN_PS5_CENTERPAD_DPADSOUTH 285 INPUT_ACTION_ORIGIN_PS5_CENTERPAD_DPADWEST 286 INPUT_ACTION_ORIGIN_PS5_CENTERPAD_DPADEAST 287 INPUT_ACTION_ORIGIN_PS5_LEFTTRIGGER_PULL 288 INPUT_ACTION_ORIGIN_PS5_LEFTTRIGGER_CLICK 289 INPUT_ACTION_ORIGIN_PS5_RIGHTTRIGGER_PULL 290 INPUT_ACTION_ORIGIN_PS5_RIGHTTRIGGER_CLICK 291 INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_MOVE 292 INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_CLICK 293 INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_DPADNORTH 294 INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_DPADSOUTH 295 INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_DPADWEST 296 INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_DPADEAST 297 INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_MOVE 298 INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_CLICK 299 INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_DPADNORTH 300 INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_DPADSOUTH 301 INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_DPADWEST 302 INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_DPADEAST 303 INPUT_ACTION_ORIGIN_PS5_DPAD_NORTH 304 INPUT_ACTION_ORIGIN_PS5_DPAD_SOUTH 305 INPUT_ACTION_ORIGIN_PS5_DPAD_WEST 306 INPUT_ACTION_ORIGIN_PS5_DPAD_EAST 307 INPUT_ACTION_ORIGIN_PS5_GYRO_MOVE 308 INPUT_ACTION_ORIGIN_PS5_GYRO_PITCH 309 INPUT_ACTION_ORIGIN_PS5_GYRO_YAW 310 INPUT_ACTION_ORIGIN_PS5_GYRO_ROLL 311 INPUT_ACTION_ORIGIN_PS5_DPAD_MOVE 312 INPUT_ACTION_ORIGIN_PS5_LEFTGRIP 313 INPUT_ACTION_ORIGIN_PS5_RIGHTGRIP 314 INPUT_ACTION_ORIGIN_PS5_LEFTFN 315 INPUT_ACTION_ORIGIN_PS5_RIGHTFN 316 INPUT_ACTION_ORIGIN_PS5_RESERVED5 317 INPUT_ACTION_ORIGIN_PS5_RESERVED6 318 INPUT_ACTION_ORIGIN_PS5_RESERVED7 319 INPUT_ACTION_ORIGIN_PS5_RESERVED8 320 INPUT_ACTION_ORIGIN_PS5_RESERVED9 321 INPUT_ACTION_ORIGIN_PS5_RESERVED10 322 INPUT_ACTION_ORIGIN_PS5_RESERVED11 323 INPUT_ACTION_ORIGIN_PS5_RESERVED12 324 INPUT_ACTION_ORIGIN_PS5_RESERVED13 325 INPUT_ACTION_ORIGIN_PS5_RESERVED14 326 INPUT_ACTION_ORIGIN_PS5_RESERVED15 327 INPUT_ACTION_ORIGIN_PS5_RESERVED16 328 INPUT_ACTION_ORIGIN_PS5_RESERVED17 329 INPUT_ACTION_ORIGIN_PS5_RESERVED18 330 INPUT_ACTION_ORIGIN_PS5_RESERVED19 331 INPUT_ACTION_ORIGIN_PS5_RESERVED20 332 INPUT_ACTION_ORIGIN_STEAMDECK_A 333 INPUT_ACTION_ORIGIN_STEAMDECK_B 334 INPUT_ACTION_ORIGIN_STEAMDECK_X 335 INPUT_ACTION_ORIGIN_STEAMDECK_Y 336 INPUT_ACTION_ORIGIN_STEAMDECK_L1 337 INPUT_ACTION_ORIGIN_STEAMDECK_R1 338 INPUT_ACTION_ORIGIN_STEAMDECK_MENU 339 INPUT_ACTION_ORIGIN_STEAMDECK_VIEW 340 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_TOUCH 341 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_SWIPE 342 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_CLICK 343 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_DPADNORTH 344 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_DPADSOUTH 345 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_DPADWEST 346 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_DPADEAST 347 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_TOUCH 348 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_SWIPE 349 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_CLICK 350 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_DPADNORTH 351 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_DPADSOUTH 352 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_DPADWEST 353 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_DPADEAST 354 INPUT_ACTION_ORIGIN_STEAMDECK_L2_SOFTPULL 355 INPUT_ACTION_ORIGIN_STEAMDECK_L2 356 INPUT_ACTION_ORIGIN_STEAMDECK_R2_SOFTPULL 357 INPUT_ACTION_ORIGIN_STEAMDECK_R2 358 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_MOVE 359 INPUT_ACTION_ORIGIN_STEAMDECK_L3 360 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_DPADNORTH 361 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_DPADSOUTH 362 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_DPADWEST 363 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_DPADEAST 364 INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_TOUCH 365 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_MOVE 366 INPUT_ACTION_ORIGIN_STEAMDECK_R3 367 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_DPADNORTH 368 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_DPADSOUTH 369 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_DPADWEST 370 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_DPADEAST 371 INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_TOUCH 372 INPUT_ACTION_ORIGIN_STEAMDECK_L4 373 INPUT_ACTION_ORIGIN_STEAMDECK_R4 374 INPUT_ACTION_ORIGIN_STEAMDECK_L5 375 INPUT_ACTION_ORIGIN_STEAMDECK_R5 376 INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_MOVE 377 INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_NORTH 378 INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_SOUTH 379 INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_WEST 380 INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_EAST 381 INPUT_ACTION_ORIGIN_STEAMDECK_GYRO_MOVE 382 INPUT_ACTION_ORIGIN_STEAMDECK_GYRO_PITCH 383 INPUT_ACTION_ORIGIN_STEAMDECK_GYRO_YAW 384 INPUT_ACTION_ORIGIN_STEAMDECK_GYRO_ROLL 385 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED1 386 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED2 387 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED3 388 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED4 389 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED5 390 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED6 391 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED7 392 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED8 393 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED9 394 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED10 395 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED11 396 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED12 397 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED13 398 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED14 399 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED15 400 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED16 401 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED17 402 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED18 403 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED19 404 INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED20 405 INPUT_ACTION_ORIGIN_COUNT 406 INPUT_ACTION_ORIGIN_MAXIMUMPOSSIBLEVALUE 32767"},{"location":"classes/input/#steaminputtype","title":"SteamInputType","text":"Enumerator Value INPUT_TYPE_UNKNOWN 0 INPUT_TYPE_STEAM_CONTROLLER 1 INPUT_TYPE_XBOX360_CONTROLLER 2 INPUT_TYPE_XBOXONE_CONTROLLER 3 INPUT_TYPE_GENERIC_XINPUT 4 INPUT_TYPE_PS4_CONTROLLER 5 INPUT_TYPE_APPLE_MFI_CONTROLLER 6 INPUT_TYPE_ANDROID_CONTROLLER 7 INPUT_TYPE_SWITCH_JOYCON_PAIR 8 INPUT_TYPE_SWITCH_JOYCON_SINGLE 9 INPUT_TYPE_SWITCH_PRO_CONTROLLER 10 INPUT_TYPE_MOBILE_TOUCH 11 INPUT_TYPE_PS3_CONTROLLER 12 INPUT_TYPE_PS5_CONTROLLER 13 INPUT_TYPE_STEAM_DECK_CONTROLLER 14 INPUT_TYPE_COUNT 15 INPUT_TYPE_MAXIMUM_POSSIBLE_VALUE 255"},{"location":"classes/input/#configurationenabletype","title":"ConfigurationEnableType","text":"Enumerator Value INPUT_CONFIGURATION_ENABLE_TYPE_NONE 0x0000 INPUT_CONFIGURATION_ENABLE_TYPE_PLAYSTATION 0x0001 INPUT_CONFIGURATION_ENABLE_TYPE_XBOX 0x0002 INPUT_CONFIGURATION_ENABLE_TYPE_GENERIC 0x0004 INPUT_CONFIGURATION_ENABLE_TYPE_SWITCH 0x0008"},{"location":"classes/input/#glyphsize","title":"GlyphSize","text":"Enumerator Value INPUT_GLYPH_SIZE_SMALL 0 INPUT_GLYPH_SIZE_MEDIUM 1 INPUT_GLYPH_SIZE_LARGE 2 INPUT_GLYPH_SIZE_COUNT 3"},{"location":"classes/input/#glyphstyle","title":"GlyphStyle","text":"Enumerator Value INPUT_GLYPH_STYLE_KNOCKOUT 0x0 INPUT_GLYPH_STYLE_LIGHT 0x1 INPUT_GLYPH_STYLE_DARK 0x2 INPUT_GLYPH_STYLE_NEUTRAL_COLOR_ABXY 0x10 INPUT_GLYPH_STYLE_SOLID_ABXY 0x20"},{"location":"classes/input/#scepadtriggereffectmode","title":"SCEPadTriggerEffectMode","text":"Enumerator Value PAD_TRIGGER_EFFECT_MODE_OFF 0 PAD_TRIGGER_EFFECT_MODE_FEEDBACK 1 PAD_TRIGGER_EFFECT_MODE_WEAPON 2 PAD_TRIGGER_EFFECT_MODE_VIBRATION 3 PAD_TRIGGER_EFFECT_MODE_MULTIPLE_POSITION_FEEDBACK 4 PAD_TRIGGER_EFFECT_MODE_SLOPE_FEEDBACK 5 PAD_TRIGGER_EFFECT_MODE_MULTIPLE_POSITION_VIBRATION 6"},{"location":"classes/inventory/","title":"Inventory","text":"<p>Steam Inventory query and manipulation API. See\u00a0Steam Inventory Service\u00a0for more information.</p> <p>Only available in the main GodotSteam branches and GodotSteam Server branches</p>"},{"location":"classes/inventory/#functions","title":"Functions","text":""},{"location":"classes/inventory/#addpromoitem","title":"addPromoItem","text":"<p>addPromoItem( <code>uint32</code> item )</p> <p>Grant a specific one-time promotional item to the current user.</p> <p>This can be safely called from the client because the items it can grant can be locked down via policies in the itemdefs. One of the primary scenarios for this call is to grant an item to users who also own a specific other game. This can be useful if your game has custom UI for showing a specific promo item to the user otherwise if you want to grant multiple promotional items then use addPromoItems or grantPromoItems.</p> <p>Any items that can be granted must have a \"promo\" attribute in their itemdef. That promo item list a set of app IDs that the user must own to be granted this given item. This version will grant all items that have promo attributes specified for them in the configured item definitions. This allows adding additional promotional items without having to update the game client. For example the following will allow the item to be granted if the user owns either TF2 or SpaceWar.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#addpromoitems","title":"addPromoItems","text":"<p>addPromoItems( <code>PoolIntArray</code> items )</p> <p>Grant a specific one-time promotional item to the current user.</p> <p>This can be safely called from the client because the items it can grant can be locked down via policies in the itemdefs. One of the primary scenarios for this call is to grant an item to users who also own a specific other game. If you want to grant a single promotional item then use addPromoItems. If you want to grant all possible promo items then use grantPromoItems.</p> <p>Any items that can be granted must have a \"promo\" attribute in their itemdef. That promo item list a set of app ID's that the user must own to be granted this given item. This version will grant all items that have promo attributes specified for them in the configured item definitions. This allows adding additional promotional items without having to update the game client. For example the following will allow the item to be granted if the user owns either TF2 or SpaceWar.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#checkresultsteamid","title":"checkResultSteamID","text":"<p>checkResultSteamID( <code>uint64_t</code> steam_id_expected, <code>int32</code> this_inventory_handle = 0 )</p> <p>Checks whether an inventory result handle belongs to the specified Steam ID. This is important when using deserializeResult, to verify that a remote player is not pretending to have a different user's inventory.</p> <p>Returns: bool</p> <p>Note: If the argument this_inventory_handle is omitted, GodotSteam will use the internally stored ID.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#consumeitem","title":"consumeItem","text":"<p>consumeItem( <code>uint64_t</code> item_consume, <code>uint32</code> quantity )</p> <p>Consumes items from a user's inventory. If the quantity of the given item goes to zero, it is permanently removed.</p> <p>Once an item is removed it cannot be recovered. This is not for the faint of heart - if your game implements item removal at all, a high-friction UI confirmation process is highly recommended.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p>Note: You must call destroyResult on the provided inventory result when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#deserializeresult","title":"deserializeResult","text":"<p>deserializeResult( <code>PoolIntArray</code> buffer )</p> <p>Deserializes a result set and verifies the signature bytes.</p> <p>This call has a potential soft-failure mode where the handle status is set to 27. getResultItems will still succeed in this mode. The \"expired\" result could indicate that the data may be out of date - not just due to timed expiration (one hour), but also because one of the items in the result set may have been traded or consumed since the result set was generated. You could compare the timestamp from getResultTimestamp to getServerRealTime to determine how old the data is. You could simply ignore the \"expired\" result code and continue as normal, or you could request the player with expired data to send an updated result set.</p> <p>You should call checkResultSteamID on the result handle when it completes to verify that a remote player is not pretending to have a different user's inventory.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#destroyresult","title":"destroyResult","text":"<p>destroyResult( <code>int32</code> this_inventory_handle = 0 )</p> <p>Destroys a result handle and frees all associated memory.</p> <p>Returns: void</p> <p>Note: If the argument this_inventory_handle is omitted, GodotSteam will use the internally stored ID.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#exchangeitems","title":"exchangeItems","text":"<p>exchangeItems( <code>PoolIntArray</code> output_items, <code>PoolIntArray</code> output_quantity, <code>PoolIntArray</code> input_items, <code>PoolIntArray</code> input_quantity )</p> <p>Grant one item in exchange for a set of other items.</p> <p>This can be used to implement crafting recipes or transmutations, or items which unpack themselves into other items (e.g., a chest).</p> <p>The caller of this API passes in the requested item and an array of existing items and quantities to exchange for it. The API currently takes an array of items to generate but at this time the size of that array must be 1 and the quantity of the new item must be 1.</p> <p>Any items that can be granted must have an exchange attribute in their itemdef. The exchange attribute specifies a set of recipes that are valid exchanges for this item. Exchange recipes are evaluated atomically by the Inventory Service; if the supplied components do not match the recipe, or do not contain sufficient quantity, the exchange will fail.</p> <p>Will allow the item to be exchanged for either one #101 and one #102, five #103s or three #104s and three #105s. See the Steam Inventory Schema documentation for more details.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p>Note: You must call destroyResult on the provided inventory result when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#generateitems","title":"generateItems","text":"<p>generateItems( <code>PoolIntArray</code> items, <code>PoolIntArray</code> quantity )</p> <p>Grants specific items to the current user, for developers only.</p> <p>This API is only intended for prototyping - it is only usable by Steam accounts that belong to the publisher group for your game.</p> <p>You can pass in an array of items, identified by their item defintion int's and optionally a second array of corresponding quantities for each item. The length of these arrays _must match!</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p>Note: You must call destroyResult on the provided inventory result when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getallitems","title":"getAllItems","text":"<p>getAllItems()</p> <p>Start retrieving all items in the current users inventory.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p>Note: Calls to this function are subject to rate limits and may return cached results if called too frequently. It is suggested that you call this function only when you are about to display the user's full inventory, or if you expect that the inventory may have changed.</p> <p>Note: You must call destroyResult on the provided inventory result when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getitemdefinitionproperty","title":"getItemDefinitionProperty","text":"<p>getItemDefinitionProperty( <code>uint32</code> definition, <code>string</code> name )</p> <p>Gets a string property from the specified item definition. Gets a property value for a specific item definition.</p> <p>Note that some properties (for example, \"name\") may be localized and will depend on the current Steam language settings (see [getCurrentGameLanguage). Property names are always ASCII alphanumeric and underscores.</p> <p>Pass in NULL for name to get a comma-separated list of available property names.</p> <p>Note: Call loadItemDefinitions first, to ensure that items are ready to be used before calling getItemDefinitionProperty.</p> <p>Returns: string.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getitemsbyid","title":"getItemsByID","text":"<p>getItemsByID( <code>PoolIntArray</code> id_array )</p> <p>Gets the state of a subset of the current user's inventory.</p> <p>The subset is specified by an array of item instance IDs.</p> <p>The results from this call can be serialized using [serializeResult and passed to other players to \"prove\" that the current user owns specific items, without exposing the user's entire inventory. For example, you could call this with the IDs of the user's currently equipped items and serialize this to a buffer, and then transmit this buffer to other players upon joining a game.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p>Note: You must call destroyResult on the provided inventory result when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getitemprice","title":"getItemPrice","text":"<p>getItemPrice( <code>uint32</code> definition )</p> <p>After a successful call to requestPrices, you can call this method to get the pricing for a specific item definition.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>price (uint64_t)</li> <li>base_price (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getitemswithprices","title":"getItemsWithPrices","text":"<p>getItemsWithPrices()</p> <p>After a successful call to requestPrices, you can call this method to get all the pricing for applicable item definitions.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>price_group (dictionary)</li> </ul> <p>Contains the following keys:</p> <ul> <li>item (int32)</li> <li>price (uint64_t)</li> <li>base_prices (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getresultitemproperty","title":"getResultItemProperty","text":"<p>getResultItemProperty( <code>uint32</code> index, <code>string</code> name, <code>int32</code> this_inventory_handle )</p> <p>Gets the dynamic properties from an item in an inventory result set.</p> <p>Property names are always composed of ASCII letters, numbers, and/or underscores.</p> <p>If the results do not fit in the given buffer, partial results may be copied.</p> <p>Returns: string.</p> <p>Note: If the argument this_inventory_handle is omitted, GodotSteam will use the internally stored ID.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getresultitems","title":"getResultItems","text":"<p>getResultItems( <code>int32</code> this_inventory_handle )</p> <p>Get the items associated with an inventory result handle.</p> <p>Returns: array</p> <p>Containing a list of:</p> <ul> <li>item_info (dictionary)</li> </ul> <p>Contains the following keys:</p> <ul> <li>item_id (int)</li> <li>item_definition (int)</li> <li>flags (int)</li> <li>quantity (int)</li> </ul> <p>Note: If the argument this_inventory_handle is omitted, GodotSteam will use the internally stored ID.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getresultstatus","title":"getResultStatus","text":"<p>getResultStatus( <code>int32</code> this_inventory_handle )</p> <p>Find out the status of an asynchronous inventory result handle. This is a polling equivalent to registering a callback function for inventory_result_ready.</p> <p>Note: If the argument this_inventory_handle is omitted, GodotSteam will use the internally stored ID.</p> <p>Returns: int / Result enum.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#getresulttimestamp","title":"getResultTimestamp","text":"<p>getResultTimestamp( <code>int32</code> this_inventory_handle )</p> <p>Gets the server time at which the result was generated.</p> <p>You can compare this value against getServerRealTime to determine the age of the result.</p> <p>Returns: uint32</p> <p>Note: If the argument this_inventory_handle is omitted, GodotSteam will use the internally stored ID.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#grantpromoitems","title":"grantPromoItems","text":"<p>grantPromoItems()</p> <p>Grant all potential one-time promotional items to the current user.</p> <p>This can be safely called from the client because the items it can grant can be locked down via policies in the itemdefs. One of the primary scenarios for this call is to grant an item to users who also own a specific other game. If you want to grant specific promotional items rather than all of them see: addPromoItem and addPromoItems.</p> <p>Any items that can be granted must have a \"promo\" attribute in their itemdef. That promo item list a set of app ID's that the user must own to be granted this given item. This version will grant all items that have promo attributes specified for them in the configured item definitions. This allows adding additional promotional items without having to update the game client. For example the following will allow the item to be granted if the user owns either TF2 or SpaceWar.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p>Note: You must call destroyResult on the provided inventory result when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#loaditemdefinitions","title":"loadItemDefinitions","text":"<p>loadItemDefinitions()</p> <p>Triggers an asynchronous load and refresh of item definitions.</p> <p>Item definitions are a mapping of \"definition IDs\" (integers between 1 and 999999999) to a set of string properties. Some of these properties are required to display items on the Steam community web site. Other properties can be defined by applications. There is no reason to call this function if your game hardcoded the numeric definition IDs (e.g. purple face mask = 20, blue weapon mod = 55) and does not allow for adding new item types without a client patch.</p> <p>Triggers a inventory_definition_update callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#requesteligiblepromoitemdefinitionsids","title":"requestEligiblePromoItemDefinitionsIDs","text":"<p>requestEligiblePromoItemDefinitionsIDs( <code>uint64_t</code> steam_id )</p> <p>Request the list of \"eligible\" promo items that can be manually granted to the given user.</p> <p>These are promo items of type \"manual\" that won't be granted automatically. An example usage of this is an item that becomes available every week.</p> <p>Triggers a inventory_eligible_promo_item callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#requestprices","title":"requestPrices","text":"<p>requestPrices()</p> <p>Request prices for all item definitions that can be purchased in the user's local currency. A inventory_request_prices_result call result will be returned with the user's local currency code. After that, you can call getItemsWithPrices to get prices for all the known item definitions, or getItemPrice for a specific item definition.</p> <p>Triggers a inventory_request_prices_result callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#serializeresult","title":"serializeResult","text":"<p>serializeResult( <code>int32</code> this_inventory_handle )</p> <p>Serialized result sets contain a short signature which can't be forged or replayed across different game sessions.</p> <p>A result set can be serialized on the local client, transmitted to other players via your game networking, and deserialized by the remote players. This is a secure way of preventing hackers from lying about posessing rare/high-value items. Serializes a result set with signature bytes to an output buffer. The size of a serialized result depends on the number items which are being serialized. When securely transmitting items to other players, it is recommended to use getItemsByID first to create a minimal result set.</p> <p>Returns: String</p> <p>Note: If the argument this_inventory_handle is omitted, GodotSteam will use the internally stored ID.</p> <p>Results have a built-in timestamp which will be considered \"expired\" after an hour has elapsed. See deserializeResult for expiration handling.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#startpurchase","title":"startPurchase","text":"<p>startPurchase( <code>PoolIntArray</code> items, <code>PoolIntArray</code> quantity )</p> <p>Starts the purchase process for the user, given a \"shopping cart\" of item definitions that the user would like to buy. The user will be prompted in the Steam Overlay to complete the purchase in their local currency, funding their Steam Wallet if necessary, etc.</p> <p>If the purchase process was started successfully, then order_id and transaction_id will be valid in the inventory_start_purchase_result call result.</p> <p>If the user authorizes the transaction and completes the purchase, then the callback inventory_result_ready will be triggered and you can then retrieve what new items the user has acquired.</p> <p>Triggers a inventory_start_purchase_result callback.</p> <p>Returns: void </p> <p>Note: You must call destroyResult on the inventory result for when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#transferitemquantity","title":"transferItemQuantity","text":"<p>transferItemQuantity( <code>uint64_t</code> item_id, <code>uint32</code> quantity, <code>uint64_t</code> item_destination, <code>bool</code> split )</p> <p>Transfer items between stacks within a user's inventory.</p> <p>This can be used to stack, split, and moving items. The source and destination items must have the same itemdef id. To move items onto a destination stack specify the source, the quantity to move, and the destination item id. To split an existing stack, pass -1 into item_destination. A new item stack will be generated with the requested quantity.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p>Note: Tradability/marketability restrictions are copied along with transferred items. The destination stack receives the latest tradability/marketability date of any item in its composition.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#triggeritemdrop","title":"triggerItemDrop","text":"<p>triggerItemDrop( <code>uint32</code> definition )</p> <p>Trigger an item drop if the user has played a long enough period of time.</p> <p>This period can be customized in two places:</p> <ul> <li>At the application level within Inventory Service: Playtime Item Grants. This will automatically apply to all \"playtimegenerator\" items that do not specify any overrides.</li> <li>In an individual \"playtimegenerator\" item definition. The settings would take precedence over any application-level settings.</li> </ul> <p>Only item definitions which are marked as \"playtime item generators\" can be spawned. Typically this function should be called at the end of a game or level or match or any point of significance in the game in which an item drop could occur. The granularity of the playtime generator settings is in minutes, so calling it more frequently than minutes is not useful and will be rate limited in the Steam client. The Steam servers will perform playtime accounting to prevent too-frequent drops. The servers will also manage adding the item to the players inventory.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#startupdateproperties","title":"startUpdateProperties","text":"<p>startUpdateProperties()</p> <p>Starts a transaction request to update dynamic properties on items for the current user. This call is rate-limited by user, so property modifications should be batched as much as possible (e.g. at the end of a map or game session). After calling setPropertyInt, setPropertyfloat,setPropertyBool, setPropertyString, or removeProperty for all the items that you want to modify, you will need to call submitUpdateProperties to send the request to the Steam servers. A inventory_result_ready callback will be fired with the results of the operation.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#submitupdateproperties","title":"submitUpdateProperties","text":"<p>submitUpdateProperties()</p> <p>Submits the transaction request to modify dynamic properties on items for the current user. See startUpdateProperties.</p> <p>Returns: int32</p> <p>The inventory handle, which is also stored internally. It will overwrite any previously stored inventory handle.</p> <p>Note: You must call destroyResult on the provided inventory result for when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#removeproperty","title":"removeProperty","text":"<p>removeProperty( <code>uint64_t</code> item_id, <code>string</code> name, <code>int32</code> this_inventory_update_handle )</p> <p>Removes a dynamic property for the given item.</p> <p>Returns: bool</p> <p>Note: If the argument this_inventory_update_handle is omitted, GodotSteam will use the internally stored ID. This is different from this_inventory_handle and is stored separately.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#setpropertystring","title":"setPropertyString","text":"<p>setPropertyString( <code>uint64_t</code> item_id, <code>string</code> name, <code>string</code> value, <code>int32</code> this_inventory_update_handle )</p> <p>Sets a dynamic property for the given item. Supported value types are strings.</p> <p>Returns: bool</p> <p>Note: If the argument this_inventory_update_handle is omitted, GodotSteam will use the internally stored ID. This is different from this_inventory_handle and is stored separately.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#setpropertybool","title":"setPropertyBool","text":"<p>setPropertyBool( <code>uint64_t</code> item_id, <code>string</code> name, <code>bool</code> value, <code>int32</code> this_inventory_update_handle )</p> <p>Sets a dynamic property for the given item. Supported value types are boolean.</p> <p>Returns: bool</p> <p>Note: If the argument this_inventory_update_handle is omitted, GodotSteam will use the internally stored ID. This is different from this_inventory_handle and is stored separately.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#setpropertyint","title":"setPropertyInt","text":"<p>setPropertyInt( <code>uint64_t</code> item_id, <code>string</code> name, <code>uint64_t</code> value, <code>int32</code> this_inventory_update_handle )</p> <p>Sets a dynamic property for the given item. Supported value types are 64 bit integers.</p> <p>Returns: bool</p> <p>Note: If the argument this_inventory_update_handle is omitted, GodotSteam will use the internally stored ID. This is different from this_inventory_handle and is stored separately.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#setpropertyfloat","title":"setPropertyFloat","text":"<p>setPropertyFloat( <code>uint64_t</code> item_id, <code>string</code> name, <code>float</code> value, <code>int32</code> this_inventory_update_handle )</p> <p>Sets a dynamic property for the given item. Supported value types are 32 bit floats.</p> <p>Returns: bool</p> <p>Note: If the argument this_inventory_update_handle is omitted, GodotSteam will use the internally stored ID. Also note this different from this_inventory_handle and is stored separately.</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/inventory/#signals","title":"Signals","text":""},{"location":"classes/inventory/#inventory_definition_update","title":"inventory_definition_update","text":"<p>inventory_definition_update</p> <p>This callback is triggered whenever item definitions have been updated, which could be in response to loadItemDefinitions or any time new item definitions are available (eg, from the dynamic addition of new item types while players are still in-game).</p> <p>Returns:</p> <ul> <li>definitions (array)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#inventory_eligible_promo_item","title":"inventory_eligible_promo_item","text":"<p>inventory_eligible_promo_item</p> <p>Returned when you have requested the list of \"eligible\" promo items that can be manually granted to the given user. These are promo items of type \"manual\" that won't be granted automatically.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>cached (bool)</li> <li>definitions (array)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#inventory_full_update","title":"inventory_full_update","text":"<p>inventory_full_update</p> <p>Triggered when getAllItems successfully returns a result which is newer / fresher than the last known result. (It will not trigger if the inventory hasn't changed, or if results from two overlapping calls are reversed in flight and the earlier result is already known to be stale/out-of-date.) The regular inventory_result_ready callback will still be triggered immediately afterwards; this is an additional notification for your convenience.</p> <p>Returns:</p> <ul> <li>inventory_handle (int32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#inventory_request_prices_result","title":"inventory_request_prices_result","text":"<p>inventory_request_prices_result</p> <p>Returned after requestPrices is called.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>currency (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#inventory_result_ready","title":"inventory_result_ready","text":"<p>inventory_result_ready</p> <p>This is fired whenever an inventory result transitions from k_EResultPending to any other completed state, see getResultStatus for the complete list of states. There will always be exactly one callback per handle.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>inventory_handle (int32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#inventory_start_purchase_result","title":"inventory_start_purchase_result","text":"<p>inventory_start_purchase_result</p> <p>Returned after startPurchase is called.</p> <p>Returns:</p> <ul> <li>result (string)</li> <li>order_id (uint64_t)</li> <li>transaction_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/inventory/#enums","title":"Enums","text":""},{"location":"classes/inventory/#steamitemflags","title":"SteamItemFlags","text":"Enumerator Value STEAM_ITEM_NO_TRADE (1&lt;&lt;0) STEAM_ITEM_REMOVED (1&lt;&lt;8) STEAM_ITEM_CONSUMED (1&lt;&lt;9)"},{"location":"classes/main/","title":"Main","text":"<p>Only available in the main GodotSteam branches</p>"},{"location":"classes/main/#functions","title":"Functions","text":""},{"location":"classes/main/#getsteamid32","title":"getSteamID32","text":"<p>getSteamID32( <code>uint64_t</code> steam_id )</p> <p>Convert a SteamID64 into a SteamID.</p> <p>Returns: uint32_t</p> <p>Note: This is a GodotSteam specific function.</p>"},{"location":"classes/main/#isanonaccount","title":"isAnonAccount","text":"<p>isAnonAccount( <code>uint64_t</code> steam_id )</p> <p>Is this an anonymous account?</p> <p>Returns: bool</p> <p>Note: While this is not listed in the Steamworks docs, it is in the SDK. </p>"},{"location":"classes/main/#isanonuseraccount","title":"isAnonUserAccount","text":"<p>isAnonUserAccount( <code>uint64_t</code> steam_id )</p> <p>Is this an anonymous user account? Used to create an account or reset a password, but do not try to do this.</p> <p>Returns: bool</p> <p>Note: While this is not listed in the Steamworks docs, it is in the SDK. </p>"},{"location":"classes/main/#ischataccount","title":"isChatAccount","text":"<p>isChatAccount( <code>uint64_t</code> steam_id )</p> <p>Is this a chat account ID?</p> <p>Returns: bool</p> <p>Note: While this is not listed in the Steamworks docs, it is in the SDK. </p>"},{"location":"classes/main/#isclanaccount","title":"isClanAccount","text":"<p>isClanAccount( <code>uint64_t</code> steam_id )</p> <p>Is this a clan account ID?</p> <p>Returns: bool</p> <p>Note: While this is not listed in the Steamworks docs, it is in the SDK. </p>"},{"location":"classes/main/#isconsoleuseraccount","title":"isConsoleUserAccount","text":"<p>isConsoleUserAccount( <code>uint64_t</code> steam_id )</p> <p>Is this a faked up Steam ID for a PSN friend account?</p> <p>Returns: bool</p> <p>Note: While this is not listed in the Steamworks docs, it is in the SDK. </p>"},{"location":"classes/main/#isindividualaccount","title":"isIndividualAccount","text":"<p>isIndividualAccount( <code>uint64_t</code> steam_id )</p> <p>Is this an individual user account ID?</p> <p>Returns: bool</p> <p>Note: While this is not listed in the Steamworks docs, it is in the SDK. </p>"},{"location":"classes/main/#islobby","title":"isLobby","text":"<p>isLobby( <code>uint64_t</code> steam_id )</p> <p>Is this a lobby account ID?</p> <p>Returns: bool</p> <p>Note: While this is not listed in the Steamworks docs, it is in the SDK. </p>"},{"location":"classes/main/#issteamrunning","title":"isSteamRunning","text":"<p>isSteamRunning()</p> <p>Check if the Steam client is running. </p> <p>Return: bool</p> <p>Naturally, returns true if the Steam client is running.</p> <p>Note: While this is not listed in the Steamworks docs, it is in the SDK. </p>"},{"location":"classes/main/#restartappifnecessary","title":"restartAppIfNecessary","text":"<p>restartAppIfNecessary( <code>uint32_t</code> app_id )</p> <p>Checks if your executable was launched through Steam and relaunches it through Steam if it wasn't.</p> <p>Return: bool</p> <p>If this returns true then it starts the Steam client if required and launches your game again through it, and you should quit your process as soon as possible. If it returns false, then your game was launched by the Steam client and no action needs to be taken.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/main/#run_callbacks","title":"run_callbacks","text":"<p>run_callbacks()</p> <p>Enables your application to receive callbacks from Steamworks. Must be placed in your _process function.</p> <p>Returns: void</p>"},{"location":"classes/main/#steaminit","title":"steamInit","text":"<p>steamInit( <code>bool</code> retrieve_stats = true, <code>uint32_t</code> app_id, <code>bool</code> embed_callbacks )</p> <p>Starts up the Steam API.</p> <p>Return: dictionary</p> <ul> <li>status (int)</li> <li>verbal (string) </li> </ul> <p>You will receive one of these results:</p> <ul> <li>1 / \"Steamworks active\"</li> <li>2 / \"Steamworks failed to initialize\"</li> <li>20 / \"Steam not running\"</li> <li>79 / \"Invalid app ID or app not installed\"</li> </ul> <p>You can pass your app ID to the second argument and GodotSteam will set the OS environment for you so you do not have to do this manually anymore. If nothing is passed, it will not be set.</p> <p>You can pass true to the third argument to have GodotSteam connect and use run_callbacks internally so you do not have to do this manually anymore. If nothing is passed, it will not run callbacks internally.</p> <p>Note: This function does not contain the second or third argument in GDNative. Also, this function does not contain the third argument in GDExtension.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/main/#steaminitex","title":"steamInitEx","text":"<p>steamInitEx( <code>bool</code> retrieve_stats = true, <code>uint32_t</code> app_id, <code>bool</code> embed_callbacks )</p> <p>Initialize the Steamworks SDK. On success STEAM_API_INIT_RESULT_OK is returned. Otherwise, if error_message is non-NULL, it will receive a non-localized message that explains the reason for the failure.</p> <p>Returns: dictionary</p> <ul> <li>status (int)</li> <li>verbal (string)</li> </ul> <p>You will receive one of these integer results:</p> <ul> <li>0 / \"Steamworks active\"</li> <li>1 / \"Failed (generic)\"</li> <li>2 / \"Cannot connect to Steam, client probably isn't running\"</li> <li>3 / \"Steam client appears to be out of date\"</li> </ul> <p>You can pass your app ID to the second argument and GodotSteam will set the OS environment for you so you do not have to do this manually anymore. If nothing is passed, it will not be set.</p> <p>You can pass true to the third argument to have GodotSteam connect and use run_callbacks internally so you do not have to do this manually anymore. If nothing is passed, it will not run callbacks internally.</p> <p>Note: This function does not contain the second or third argument in GDNative. Also, this function does not contain the third argument in GDExtension.</p>"},{"location":"classes/main/#steamshutdown","title":"steamShutdown","text":"<p>steamShutdown</p> <p>Shuts down the Steamworks API, releases pointers and frees memory.</p> <p>Returns: nothing</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/main/#signals","title":"Signals","text":""},{"location":"classes/main/#steamworks_error","title":"steamworks_error","text":"<p>steamworks_error</p> <p>Intended to serve as generic error messaging for failed call results.</p> <p>Returns:</p> <ul> <li>failed_signal (string)</li> <li>message (string)</li> </ul> <p>Note: this callback is unique to GodotSteam.</p>"},{"location":"classes/main/#enums","title":"Enums","text":""},{"location":"classes/main/#accounttype","title":"AccountType","text":"Enumerator Value ACCOUNT_TYPE_INVALID 0 ACCOUNT_TYPE_INDIVIDUAL 1 ACCOUNT_TYPE_MULTISEAT 2 ACCOUNT_TYPE_GAME_SERVER 3 ACCOUNT_TYPE_ANON_GAME_SERVER 4 ACCOUNT_TYPE_PENDING 5 ACCOUNT_TYPE_CONTENT_SERVER 6 ACCOUNT_TYPE_CLAN 7 ACCOUNT_TYPE_CHAT 8 ACCOUNT_TYPE_CONSOLE_USER 9 ACCOUNT_TYPE_ANON_USER 10 ACCOUNT_TYPE_MAX 11"},{"location":"classes/main/#appownershipflags","title":"AppOwnershipFlags","text":"Enumerator Value APP_OWNERSHIP_FLAGS_NONE 0x0000 APP_OWNERSHIP_FLAGS_OWNS_LICENSE 0x0001 APP_OWNERSHIP_FLAGS_FREE_LICENSE 0x0002 APP_OWNERSHIP_FLAGS_REGION_RESTRICTED 0x0004 APP_OWNERSHIP_FLAGS_LOW_VIOLENCE 0x0008 APP_OWNERSHIP_FLAGS_INVALID_PLATFORM 0x0010 APP_OWNERSHIP_FLAGS_SHARED_LICENSE 0x0020 APP_OWNERSHIP_FLAGS_FREE_WEEKEND 0x0040 APP_OWNERSHIP_FLAGS_RETAIL_LICENSE 0x0080 APP_OWNERSHIP_FLAGS_LICENSE_LOCKED 0x0100 APP_OWNERSHIP_FLAGS_LICENSE_PENDING 0x0200 APP_OWNERSHIP_FLAGS_LICENSE_EXPIRED 0x0400 APP_OWNERSHIP_FLAGS_LICENSE_PERMANENT 0x0800 APP_OWNERSHIP_FLAGS_LICENSE_RECURRING 0x1000 APP_OWNERSHIP_FLAGS_LICENSE_CANCELED 0x2000 APP_OWNERSHIP_FLAGS_AUTO_GRANT 0x4000 APP_OWNERSHIP_FLAGS_PENDING_GIFT 0x8000 APP_OWNERSHIP_FLAGS_RENTAL_NOT_ACTIVATED 0x10000 APP_OWNERSHIP_FLAGS_RENTAL 0x20000 APP_OWNERSHIP_FLAGS_SITE_LICENSE 0x40000"},{"location":"classes/main/#appreleasestate","title":"AppReleaseState","text":"Enumerator Value APP_RELEASE_STATE_UNKNOWN 0 APP_RELEASE_STATE_UNAVAILABLE 1 APP_RELEASE_STATE_PRERELEASE 2 APP_RELEASE_STATE_PRELOAD_ONLY 3 APP_RELEASE_STATE_RELEASED 4"},{"location":"classes/main/#apptype","title":"AppType","text":"Enumerator Value APP_TYPE_INVALID 0x000 APP_TYPE_GAME 0x001 APP_TYPE_APPLICATION 0x002 APP_TYPE_TOOL 0x004 APP_TYPE_DEMO 0x008 APP_TYPE_MEDIA_DEPRECATED 0x010 APP_TYPE_DLC 0x020 APP_TYPE_GUIDE 0x040 APP_TYPE_DRIVER 0x080 APP_TYPE_CONFIG 0x100 APP_TYPE_HARDWARE 0x200 APP_TYPE_FRANCHISE 0x400 APP_TYPE_VIDEO 0x800 APP_TYPE_PLUGIN 0x1000 APP_TYPE_MUSIC 0x2000 APP_TYPE_SERIES 0x4000 APP_TYPE_SHORTCUT 0x40000000 APP_TYPE_DEPOT_ONLY 0X80000000"},{"location":"classes/main/#authsessionresponse","title":"AuthSessionResponse","text":"Enumerator Value AUTH_SESSION_RESPONSE_OK 0 AUTH_SESSION_RESPONSE_USER_NOT_CONNECTED_TO_STEAM 1 AUTH_SESSION_RESPONSE_NO_LICENSE_OR_EXPIRED 2 AUTH_SESSION_RESPONSE_VAC_BANNED 3 AUTH_SESSION_RESPONSE_LOGGED_IN_ELSEWHERE 4 AUTH_SESSION_RESPONSE_VAC_CHECK_TIMEDOUT 5 AUTH_SESSION_RESPONSE_AUTH_TICKET_CANCELED 6 AUTH_SESSION_RESPONSE_AUTH_TICKET_INVALID_ALREADY_USED 7 AUTH_SESSION_RESPONSE_AUTH_TICKET_INVALID 8 AUTH_SESSION_RESPONSE_PUBLISHER_ISSUED_BAN 9"},{"location":"classes/main/#beginauthsessionresult","title":"BeginAuthSessionResult","text":"Enumerator Value BEGIN_AUTH_SESSION_RESULT_OK 0 BEGIN_AUTH_SESSION_RESULT_INVALID_TICKET 1 BEGIN_AUTH_SESSION_RESULT_DUPLICATE_REQUEST 2 BEGIN_AUTH_SESSION_RESULT_INVALID_VERSION 3 BEGIN_AUTH_SESSION_RESULT_GAME_MISMATCH 4 BEGIN_AUTH_SESSION_RESULT_EXPIRED_TICKET 5"},{"location":"classes/main/#broadcastuploadresult","title":"BroadcastUploadResult","text":"Enumerator Value BROADCAST_UPLOAD_RESULT_NONE 0 BROADCAST_UPLOAD_RESULT_OK 1 BROADCAST_UPLOAD_RESULT_INIT_FAILED 2 BROADCAST_UPLOAD_RESULT_FRAME_FAILED 3 BROADCAST_UPLOAD_RESULT_TIME_OUT 4 BROADCAST_UPLOAD_RESULT_BANDWIDTH_EXCEEDED 5 BROADCAST_UPLOAD_RESULT_LOW_FPS 6 BROADCAST_UPLOAD_RESULT_MISSING_KEYFRAMES 7 BROADCAST_UPLOAD_RESULT_NO_CONNECTION 8 BROADCAST_UPLOAD_RESULT_RELAY_FAILED 9 BROADCAST_UPLOAD_RESULT_SETTINGS_CHANGED 10 BROADCAST_UPLOAD_RESULT_MISSING_AUDIO 11 BROADCAST_UPLOAD_RESULT_TOO_FAR_BEHIND 12 BROADCAST_UPLOAD_RESULT_TRANSCODE_BEHIND 13"},{"location":"classes/main/#chatentrytype","title":"ChatEntryType","text":"Enumerator Value CHAT_ENTRY_TYPE_INVALID 0 CHAT_ENTRY_TYPE_CHAT_MSG 1 CHAT_ENTRY_TYPE_TYPING 2 CHAT_ENTRY_TYPE_INVITE_GAME 3 CHAT_ENTRY_TYPE_EMOTE 4 CHAT_ENTRY_TYPE_LEFT_CONVERSATION 6 CHAT_ENTRY_TYPE_ENTERED 7 CHAT_ENTRY_TYPE_WAS_KICKED 8 CHAT_ENTRY_TYPE_WAS_BANNED 9 CHAT_ENTRY_TYPE_DISCONNECTED 10 CHAT_ENTRY_TYPE_HISTORICAL_CHAT 11 CHAT_ENTRY_TYPE_LINK_BLOCKED 14"},{"location":"classes/main/#chatroomenterresponse","title":"ChatRoomEnterResponse","text":"Enumerator Value CHAT_ROOM_ENTER_RESPONSE_SUCCESS 1 CHAT_ROOM_ENTER_RESPONSE_DOESNT_EXIST 2 CHAT_ROOM_ENTER_RESPONSE_NOT_ALLOWED 3 CHAT_ROOM_ENTER_RESPONSE_FULL 4 CHAT_ROOM_ENTER_RESPONSE_ERROR 5 CHAT_ROOM_ENTER_RESPONSE_BANNED 6 CHAT_ROOM_ENTER_RESPONSE_LIMITED 7 CHAT_ROOM_ENTER_RESPONSE_CLAN_DISABLED 8 CHAT_ROOM_ENTER_RESPONSE_COMMUNITY_BAN 9 CHAT_ROOM_ENTER_RESPONSE_MEMBER_BLOCKED_YOU 10 CHAT_ROOM_ENTER_RESPONSE_YOU_BLOCKED_MEMBER 11"},{"location":"classes/main/#chatsteamidinstanceflags","title":"ChatSteamIDInstanceFlags","text":"Enumerator Value CHAT_ACCOUNT_INSTANCE_MASK 0X00000FFF CHAT_INSTANCE_FLAG_CLAN ((k_unSteamAccountInstanceMask + 1) &gt;&gt; 1) CHAT_INSTANCE_FLAG_LOBBY ((k_unSteamAccountInstanceMask + 1) &gt;&gt; 2) CHAT_INSTANCE_FLAG_MMS_LOBBY ((k_unSteamAccountInstanceMask + 1) &gt;&gt; 3)"},{"location":"classes/main/#denyreason","title":"DenyReason","text":"Enumerator Value DENY_INVALID 0 DENY_INVALID_VERSION 1 DENY_GENERIC 2 DENY_NOT_LOGGED_ON 3 DENY_NO_LICENSE 4 DENY_CHEATER 5 DENY_LOGGED_IN_ELSEWHERE 6 DENY_UNKNOWN_TEXT 7 DENY_INCOMPATIBLE_ANTI_CHEAT 8 DENY_MEMORY_CORRUPTION 9 DENY_INCOMPATIBLE_SOFTWARE 10 DENY_STEAM_CONNECTION_LOST 11 DENY_STEAM_CONNECTION_ERROR 12 DENY_STEAM_RESPONSE_TIMED_OUT 13 DENY_STEAM_VALIDATION_STALLED 14 DENY_STEAM_OWNER_LEFT_GUEST_USER 15"},{"location":"classes/main/#gameidtype","title":"GameIDType","text":"Enumerator Value GAME_TYPE_APP 0 GAME_TYPE_GAME_MOD 1 GAME_TYPE_SHORTCUT 2 GAME_TYPE_P2P 3"},{"location":"classes/main/#launchoptiontype","title":"LaunchOptionType","text":"Enumerator Value LAUNCH_OPTION_TYPE_NONE 0 LAUNCH_OPTION_TYPE_DEFAULT 1 LAUNCH_OPTION_TYPE_SAFE_MODE 2 LAUNCH_OPTION_TYPE_MULTIPLAYER 3 LAUNCH_OPTION_TYPE_CONFIG 4 LAUNCH_OPTION_TYPE_OPEN_VR 5 LAUNCH_OPTION_TYPE_SERVER 6 LAUNCH_OPTION_TYPE_EDITOR 7 LAUNCH_OPTION_TYPE_MANUAL 8 LAUNCH_OPTION_TYPE_BENCHMARK 9 LAUNCH_OPTION_TYPE_OPTION1 10 LAUNCH_OPTION_TYPE_OPTION2 11 LAUNCH_OPTION_TYPE_OPTION3 12 LAUNCH_OPTION_TYPE_OCULUS_VR 13 LAUNCH_OPTION_TYPE_OPEN_VR_OVERLAY 14 LAUNCH_OPTION_TYPE_OS_VR 15 LAUNCH_OPTION_TYPE_DIALOG 1000"},{"location":"classes/main/#notificationposition","title":"NotificationPosition","text":"Enumerator Value POSITION_TOP_LEFT 0 POSITION_TOP_RIGHT 1 POSITION_BOTTOM_LEFT 2 POSITION_BOTTOM_RIGHT 3"},{"location":"classes/main/#result","title":"Result","text":"Enumerator Value RESULT_OK 1 RESULT_FAIL 2 RESULT_NO_CONNECTION 3 RESULT_INVALID_PASSWORD 5 RESULT_LOGGED_IN_ELSEWHERE 6 RESULT_INVALID_PROTOCOL_VER 7 RESULT_INVALID_PARAM 8 RESULT_FILE_NOT_FOUND 9 RESULT_BUSY 10 RESULT_INVALID_STATE 11 RESULT_INVALID_NAME 12 RESULT_INVALID_EMAIL 13 RESULT_DUPLICATE_NAME 14 RESULT_ACCESS_DENIED 15 RESULT_TIMEOUT 16 RESULT_BANNED 17 RESULT_ACCOUNT_NOT_FOUND 18 RESULT_INVALID_STEAM_ID 19 RESULT_SERVICE_UNAVAILABLE 20 RESULT_NOT_LOGGED_ON 21 RESULT_PENDING 22 RESULT_ENCRYPTION_FAILURE 23 RESULT_INSUFFICIENT_PRIVILEGE 24 RESULT_LIMIT_EXCEEDED 25 RESULT_REVOKED 26 RESULT_EXPIRED 27 RESULT_ALREADY_REDEEMED 28 RESULT_DUPLICATE_REQUEST 29 RESULT_ALREADY_OWNED 30 RESULT_IP_NOT_FOUND 31 RESULT_PERSIST_FAILED 32 RESULT_LOCKING_FAILED 33 RESULT_LOG_ON_SESSION_REPLACED 34 RESULT_CONNECT_FAILED 35 RESULT_HANDSHAKE_FAILED 36 RESULT_IO_FAILURE 37 RESULT_REMOTE_DISCONNECT 38 RESULT_SHOPPING_CART_NOT_FOUND 39 RESULT_BLOCKED 40 RESULT_IGNORED 41 RESULT_NO_MATCH 42 RESULT_ACCOUNT_DISABLED 43 RESULT_SERVICE_READ_ONLY 44 RESULT_ACCOUNT_NOT_FEATURED 45 RESULT_ADMINISTRATOR_OK 46 RESULT_CONTENT_VERSION 47 RESULT_TRY_ANOTHER_CM 48 RESULT_PASSWORD_REQUIRED_TO_KICK_SESSION 49 RESULT_ALREADY_LOGGED_IN_ELSEWHERE 50 RESULT_SUSPENDED 51 RESULT_CANCELLED 52 RESULT_DATA_CORRUPTION 53 RESULT_DISK_FULL 54 RESULT_REMOTE_CALL_FAILED 55 RESULT_PASSWORD_UNSET 56 RESULT_EXTERNAL_ACCOUNT_UNLINKED 57 RESULT_PSN_TICKET_INVALID 58 RESULT_EXTERNAL_ACCOUNT_ALREADY_LINKED 59 RESULT_REMOTE_FILE_CONFLICT 60 RESULT_ILLEGAL_PASSWORD 61 RESULT_SAME_AS_PREVIOUS_VALUE 62 RESULT_ACCOUNT_LOG_ON_DENIED 63 RESULT_CANNOT_USE_OLD_PASSWORD 64 RESULT_INVALID_LOGIN_AUTH_CODE 65 RESULT_ACCOUNT_LOG_ON_DENIED_NO_MAIL 66 RESULT_HARDWARE_NOT_CAPABLE_OF_IPT 67 RESULT_IPT_INIT_ERROR 68 RESULT_PARENTAL_CONTROL_RESTRICTED 69 RESULT_FACEBOOK_QUERY_ERROR 70 RESULT_EXPIRED_LOGIN_AUTH_CODE 71 RESULT_IP_LOGIN_RESTRICTION_FAILED 72 RESULT_ACCOUNT_LOCKED_DOWN 73 RESULT_ACCOUNT_LOG_ON_DENIED_VERIFIED_EMAIL_REQUIRED 74 RESULT_NO_MATCHING_URL 75 RESULT_BAD_RESPONSE 76 RESULT_REQUIRE_PASSWORD_REENTRY 77 RESULT_VALUE_OUT_OF_RANGE 78 RESULT_UNEXPECTED_ERROR 79 RESULT_DISABLED 80 RESULT_INVALID_CEG_SUBMISSION 81 RESULT_RESTRICTED_DEVICE 82 RESULT_REGION_LOCKED 83 RESULT_RATE_LIMIT_EXCEEDED 84 RESULT_ACCOUNT_LOGIN_DENIED_NEED_TWO_FACTOR 85 RESULT_ITEM_DELETED 86 RESULT_ACCOUNT_LOGIN_DENIED_THROTTLE 87 RESULT_TWO_FACTOR_CODE_MISMATCH 88 RESULT_TWO_FACTOR_ACTIVATION_CODE_MISMATCH 89 RESULT_ACCOUNT_ASSOCIATED_TO_MULTIPLE_PARTNERS 90 RESULT_NOT_MODIFIED 91 RESULT_NO_MOBILE_DEVICE 92 RESULT_TIME_NOT_SYNCED 93 RESULT_SMS_CODE_FAILED 94 RESULT_ACCOUNT_LIMIT_EXCEEDED 95 RESULT_ACCOUNT_ACTIVITY_LIMIT_EXCEEDED 96 RESULT_PHONE_ACTIVITY_LIMIT_EXCEEDED 97 RESULT_REFUND_TO_WALLET 98 RESULT_EMAIL_SEND_FAILURE 99 RESULT_NOT_SETTLED 100 RESULT_NEED_CAPTCHA 101 RESULT_GSLT_DENIED 102 RESULT_GS_OWNER_DENIED 103 RESULT_INVALID_ITEM_TYPE 104 RESULT_IP_BANNED 105 RESULT_GSLT_EXPIRED 106 RESULT_INSUFFICIENT_FUNDS 107 RESULT_TOO_MANY_PENDING 108"},{"location":"classes/main/#steamapiinitresult","title":"SteamAPIInitResult","text":"Enumerator Value STEAM_API_INIT_RESULT_OK 0 STEAM_API_INIT_RESULT_FAILED_GENERIC 1 STEAM_API_INIT_RESULT_NO_STEAM_CLIENT 2 STEAM_API_INIT_RESULT_VERSION_MISMATCH 3"},{"location":"classes/main/#universe","title":"Universe","text":"Enumerator Value UNIVERSE_INVALID 0 UNIVERSE_PUBLIC 1 UNIVERSE_BETA 2 UNIVERSE_INTERNAL 3 UNIVERSE_DEV 4 UNIVERSE_MAX 5"},{"location":"classes/main/#userhaslicenseforappresult","title":"UserHasLicenseForAppResult","text":"Enumerator Value USER_HAS_LICENSE_RESULT_HAS_LICENSE 0 USER_HAS_LICENSE_RESULT_DOES_NOT_HAVE_LICENSE 1 USER_HAS_LICENSE_RESULT_NO_AUTH 2"},{"location":"classes/main/#voiceresult","title":"VoiceResult","text":"Enumerator Value VOICE_RESULT_OK 0 VOICE_RESULT_NOT_INITIALIZED 1 VOICE_RESULT_NOT_RECORDING 2 VOICE_RESULT_NO_DATE 3 VOICE_RESULT_BUFFER_TOO_SMALL 4 VOICE_RESULT_DATA_CORRUPTED 5 VOICE_RESULT_RESTRICTED 6"},{"location":"classes/main/#vrhmdtype","title":"VRHMDType","text":"Enumerator Value VR_HMD_TYPE_NONE -1 VR_HMD_TYPE_UNKNOWN 0 VR_HMD_TYPE_HTC_DEV 1 VR_HMD_TYPE_HTC_VIVEPRE 2 VR_HMD_TYPE_HTC_VIVE 3 VR_HMD_TYPE_HTC_UNKNOWN 20 VR_HMD_TYPE_OCULUS_DK1 21 VR_HMD_TYPE_OCULUS_DK2 22 VR_HMD_TYPE_OCULUS_RIFT 23 VR_HMD_TYPE_OCULUS_UNKNOWN 40"},{"location":"classes/main_server/","title":"Main Server","text":"<p>Only available in the GodotSteam Server branches</p>"},{"location":"classes/main_server/#functions","title":"Functions","text":""},{"location":"classes/main_server/#isserversecure","title":"isServerSecure","text":"<p>isServerSecure()</p> <p>No official notes, but should be checking if the server is secured.</p> <p>Returns: bool</p>"},{"location":"classes/main_server/#getserversteamid","title":"getServerSteamID","text":"<p>getServerSteamID()</p> <p>Gets the server's Steam ID.</p> <p>Returns: uint64_t</p>"},{"location":"classes/main_server/#serverinit","title":"serverInit","text":"<p>serverInit( <code>string</code> ip, <code>uint16</code> game_port, <code>uint16</code> query_port, <code>int</code> server_mode, <code>string</code> version_number )</p> <p>Initialize SteamGameServer client and interface objects, and set server properties which may not be changed.</p> <p>After calling this function, you should set any additional server parameters, and then logOnAnonymous() or logOn().</p> <p>Returns: bool</p>"},{"location":"classes/main_server/#serverinitex","title":"serverInitEx","text":"<p>serverInitEx( <code>string</code> ip, <code>uint16</code> game_port, <code>uint16</code> query_port, <code>int</code> server_mode, <code>string</code> version_number )</p> <p>Initialize SteamGameServer client and interface objects, and set server properties which may not be changed.</p> <p>After calling this function, you should set any additional server parameters, and then logOnAnonymous() or logOn().</p> <p>On success STEAM_API_INIT_RESULT_OK is returned.  Otherwise, if error_message is non-NULL, it will receive a non-localized message that explains the reason for the failure.</p> <p>Returns: dictionary</p> <ul> <li>status (int)</li> <li>verbal (string) </li> </ul> <p>You will receive one of these results:</p> <ul> <li>0 / \"Steamworks active\"</li> <li>1 / \"Failed (generic)\"</li> <li>2 / \"Cannot connect to Steam, client probably isn't running\"</li> <li>3 / \"Steam client appears to be out of date\"</li> </ul>"},{"location":"classes/main_server/#serverreleasecurrentthreadmemory","title":"serverReleaseCurrentThreadMemory","text":"<p>serverReleaseCurrentThreadMemory()</p> <p>Frees all API-related memory associated with the calling thread. This memory is released automatically by RunCallbacks so single-threaded servers do not need to call this.</p>"},{"location":"classes/main_server/#servershutdown","title":"serverShutdown","text":"<p>serverShutdown()</p> <p>Shut down the server connection to Steam.</p>"},{"location":"classes/main_server/#enums","title":"Enums","text":""},{"location":"classes/main_server/#accounttype","title":"AccountType","text":"Enumerator Value ACCOUNT_TYPE_INVALID 0 ACCOUNT_TYPE_INDIVIDUAL 1 ACCOUNT_TYPE_MULTISEAT 2 ACCOUNT_TYPE_GAME_SERVER 3 ACCOUNT_TYPE_ANON_GAME_SERVER 4 ACCOUNT_TYPE_PENDING 5 ACCOUNT_TYPE_CONTENT_SERVER 6 ACCOUNT_TYPE_CLAN 7 ACCOUNT_TYPE_CHAT 8 ACCOUNT_TYPE_CONSOLE_USER 9 ACCOUNT_TYPE_ANON_USER 10 ACCOUNT_TYPE_MAX 11"},{"location":"classes/main_server/#authsessionresponse","title":"AuthSessionResponse","text":"Enumerator Value AUTH_SESSION_RESPONSE_OK 0 AUTH_SESSION_RESPONSE_USER_NOT_CONNECTED_TO_STEAM 1 AUTH_SESSION_RESPONSE_NO_LICENSE_OR_EXPIRED 2 AUTH_SESSION_RESPONSE_VAC_BANNED 3 AUTH_SESSION_RESPONSE_LOGGED_IN_ELSEWHERE 4 AUTH_SESSION_RESPONSE_VAC_CHECK_TIMEDOUT 5 AUTH_SESSION_RESPONSE_AUTH_TICKET_CANCELED 6 AUTH_SESSION_RESPONSE_AUTH_TICKET_INVALID_ALREADY_USED 7 AUTH_SESSION_RESPONSE_AUTH_TICKET_INVALID 8 AUTH_SESSION_RESPONSE_PUBLISHER_ISSUED_BAN 9"},{"location":"classes/main_server/#beginauthsessionresult","title":"BeginAuthSessionResult","text":"Enumerator Value BEGIN_AUTH_SESSION_RESULT_OK 0 BEGIN_AUTH_SESSION_RESULT_INVALID_TICKET 1 BEGIN_AUTH_SESSION_RESULT_DUPLICATE_REQUEST 2 BEGIN_AUTH_SESSION_RESULT_INVALID_VERSION 3 BEGIN_AUTH_SESSION_RESULT_GAME_MISMATCH 4 BEGIN_AUTH_SESSION_RESULT_EXPIRED_TICKET 5"},{"location":"classes/main_server/#denyreason","title":"DenyReason","text":"Enumerator Value DENY_INVALID 0 DENY_INVALID_VERSION 1 DENY_GENERIC 2 DENY_NOT_LOGGED_ON 3 DENY_NO_LICENSE 4 DENY_CHEATER 5 DENY_LOGGED_IN_ELSEWHERE 6 DENY_UNKNOWN_TEXT 7 DENY_INCOMPATIBLE_ANTI_CHEAT 8 DENY_MEMORY_CORRUPTION 9 DENY_INCOMPATIBLE_SOFTWARE 10 DENY_STEAM_CONNECTION_LOST 11 DENY_STEAM_CONNECTION_ERROR 12 DENY_STEAM_RESPONSE_TIMED_OUT 13 DENY_STEAM_VALIDATION_STALLED 14 DENY_STEAM_OWNER_LEFT_GUEST_USER 15"},{"location":"classes/main_server/#gameidtype","title":"GameIDType","text":"Enumerator Value GAME_TYPE_APP 0 GAME_TYPE_GAME_MOD 1 GAME_TYPE_SHORTCUT 2 GAME_TYPE_P2P 3"},{"location":"classes/main_server/#result","title":"Result","text":"Enumerator Value RESULT_OK 1 RESULT_FAIL 2 RESULT_NO_CONNECTION 3 RESULT_INVALID_PASSWORD 5 RESULT_LOGGED_IN_ELSEWHERE 6 RESULT_INVALID_PROTOCOL_VER 7 RESULT_INVALID_PARAM 8 RESULT_FILE_NOT_FOUND 9 RESULT_BUSY 10 RESULT_INVALID_STATE 11 RESULT_INVALID_NAME 12 RESULT_INVALID_EMAIL 13 RESULT_DUPLICATE_NAME 14 RESULT_ACCESS_DENIED 15 RESULT_TIMEOUT 16 RESULT_BANNED 17 RESULT_ACCOUNT_NOT_FOUND 18 RESULT_INVALID_STEAM_ID 19 RESULT_SERVICE_UNAVAILABLE 20 RESULT_NOT_LOGGED_ON 21 RESULT_PENDING 22 RESULT_ENCRYPTION_FAILURE 23 RESULT_INSUFFICIENT_PRIVILEGE 24 RESULT_LIMIT_EXCEEDED 25 RESULT_REVOKED 26 RESULT_EXPIRED 27 RESULT_ALREADY_REDEEMED 28 RESULT_DUPLICATE_REQUEST 29 RESULT_ALREADY_OWNED 30 RESULT_IP_NOT_FOUND 31 RESULT_PERSIST_FAILED 32 RESULT_LOCKING_FAILED 33 RESULT_LOG_ON_SESSION_REPLACED 34 RESULT_CONNECT_FAILED 35 RESULT_HANDSHAKE_FAILED 36 RESULT_IO_FAILURE 37 RESULT_REMOTE_DISCONNECT 38 RESULT_SHOPPING_CART_NOT_FOUND 39 RESULT_BLOCKED 40 RESULT_IGNORED 41 RESULT_NO_MATCH 42 RESULT_ACCOUNT_DISABLED 43 RESULT_SERVICE_READ_ONLY 44 RESULT_ACCOUNT_NOT_FEATURED 45 RESULT_ADMINISTRATOR_OK 46 RESULT_CONTENT_VERSION 47 RESULT_TRY_ANOTHER_CM 48 RESULT_PASSWORD_REQUIRED_TO_KICK_SESSION 49 RESULT_ALREADY_LOGGED_IN_ELSEWHERE 50 RESULT_SUSPENDED 51 RESULT_CANCELLED 52 RESULT_DATA_CORRUPTION 53 RESULT_DISK_FULL 54 RESULT_REMOTE_CALL_FAILED 55 RESULT_PASSWORD_UNSET 56 RESULT_EXTERNAL_ACCOUNT_UNLINKED 57 RESULT_PSN_TICKET_INVALID 58 RESULT_EXTERNAL_ACCOUNT_ALREADY_LINKED 59 RESULT_REMOTE_FILE_CONFLICT 60 RESULT_ILLEGAL_PASSWORD 61 RESULT_SAME_AS_PREVIOUS_VALUE 62 RESULT_ACCOUNT_LOG_ON_DENIED 63 RESULT_CANNOT_USE_OLD_PASSWORD 64 RESULT_INVALID_LOGIN_AUTH_CODE 65 RESULT_ACCOUNT_LOG_ON_DENIED_NO_MAIL 66 RESULT_HARDWARE_NOT_CAPABLE_OF_IPT 67 RESULT_IPT_INIT_ERROR 68 RESULT_PARENTAL_CONTROL_RESTRICTED 69 RESULT_FACEBOOK_QUERY_ERROR 70 RESULT_EXPIRED_LOGIN_AUTH_CODE 71 RESULT_IP_LOGIN_RESTRICTION_FAILED 72 RESULT_ACCOUNT_LOCKED_DOWN 73 RESULT_ACCOUNT_LOG_ON_DENIED_VERIFIED_EMAIL_REQUIRED 74 RESULT_NO_MATCHING_URL 75 RESULT_BAD_RESPONSE 76 RESULT_REQUIRE_PASSWORD_REENTRY 77 RESULT_VALUE_OUT_OF_RANGE 78 RESULT_UNEXPECTED_ERROR 79 RESULT_DISABLED 80 RESULT_INVALID_CEG_SUBMISSION 81 RESULT_RESTRICTED_DEVICE 82 RESULT_REGION_LOCKED 83 RESULT_RATE_LIMIT_EXCEEDED 84 RESULT_ACCOUNT_LOGIN_DENIED_NEED_TWO_FACTOR 85 RESULT_ITEM_DELETED 86 RESULT_ACCOUNT_LOGIN_DENIED_THROTTLE 87 RESULT_TWO_FACTOR_CODE_MISMATCH 88 RESULT_TWO_FACTOR_ACTIVATION_CODE_MISMATCH 89 RESULT_ACCOUNT_ASSOCIATED_TO_MULTIPLE_PARTNERS 90 RESULT_NOT_MODIFIED 91 RESULT_NO_MOBILE_DEVICE 92 RESULT_TIME_NOT_SYNCED 93 RESULT_SMS_CODE_FAILED 94 RESULT_ACCOUNT_LIMIT_EXCEEDED 95 RESULT_ACCOUNT_ACTIVITY_LIMIT_EXCEEDED 96 RESULT_PHONE_ACTIVITY_LIMIT_EXCEEDED 97 RESULT_REFUND_TO_WALLET 98 RESULT_EMAIL_SEND_FAILURE 99 RESULT_NOT_SETTLED 100 RESULT_NEED_CAPTCHA 101 RESULT_GSLT_DENIED 102 RESULT_GS_OWNER_DENIED 103 RESULT_INVALID_ITEM_TYPE 104 RESULT_IP_BANNED 105 RESULT_GSLT_EXPIRED 106 RESULT_INSUFFICIENT_FUNDS 107 RESULT_TOO_MANY_PENDING 108"},{"location":"classes/main_server/#servermode","title":"ServerMode","text":"Enumerator Value SERVER_MODE_INVALID 0 SERVER_MODE_NO_AUTHENTICATION 1 SERVER_MODE_AUTHENTICATION 2 SERVER_MODE_AUTHENTICATION_AND_SECURE 3"},{"location":"classes/main_server/#steamapiinitresult","title":"SteamAPIInitResult","text":"Enumerator Value STEAM_API_INIT_RESULT_OK 0 STEAM_API_INIT_RESULT_FAILED_GENERIC 1 STEAM_API_INIT_RESULT_NO_STEAM_CLIENT 2 STEAM_API_INIT_RESULT_VERSION_MISMATCH 3"},{"location":"classes/main_server/#universe","title":"Universe","text":"Enumerator Value UNIVERSE_INVALID 0 UNIVERSE_PUBLIC 1 UNIVERSE_BETA 2 UNIVERSE_INTERNAL 3 UNIVERSE_DEV 4 UNIVERSE_MAX 5"},{"location":"classes/matchmaking/","title":"Matchmaking","text":"<p>Functions for clients to access matchmaking services, favorite servers, and to operate on game lobbies. See\u00a0Steam Matchmaking &amp; Lobbies\u00a0for more information.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/matchmaking/#functions","title":"Functions","text":""},{"location":"classes/matchmaking/#addfavoritegame","title":"addFavoriteGame","text":"<p>addFavoriteGame( <code>string</code> ip, <code>uint16</code> port, <code>uint16</code> queryPort, <code>uint32</code> flags, <code>uint32</code> lastPlayed )</p> <p>Adds the game server to the local favorites list or updates the time played of the server if it already exists in the list.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#addrequestlobbylistdistancefilter","title":"addRequestLobbyListDistanceFilter","text":"<p>addRequestLobbyListDistanceFilter( <code>int</code> distance_filter )</p> <p>Sets the physical distance for which we should search for lobbies, this is based on the user's IP address and an IP location map on the Steam backend.</p> <p>See the LobbyDistanceFilter enum for possible values to pass in.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#addrequestlobbylistfilterslotsavailable","title":"addRequestLobbyListFilterSlotsAvailable","text":"<p>addRequestLobbyListFilterSlotsAvailable( <code>int</code> slots_available )</p> <p>Filters to only return lobbies with the specified number of open slots available.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#addrequestlobbylistnearvaluefilter","title":"addRequestLobbyListNearValueFilter","text":"<p>addRequestLobbyListNearValueFilter( <code>string</code> keyToMatch, <code>int</code> valueToBeCloseTo )</p> <p>Sorts the results closest to the specified value.</p> <p>Near filters don't actually filter out values, they just influence how the results are sorted. You can specify multiple near filters, with the first near filter influencing the most, and the last near filter influencing the least.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#addrequestlobbylistnumericalfilter","title":"addRequestLobbyListNumericalFilter","text":"<p>addRequestLobbyListNumericalFilter( <code>string</code> key_to_match, <code>int</code> value_to_match, <code>int</code> comparison_type )</p> <p>Adds a numerical comparison filter to the next requestLobbyList call.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#addrequestlobbylistresultcountfilter","title":"addRequestLobbyListResultCountFilter","text":"<p>addRequestLobbyListResultCountFilter( <code>int</code> max_results )</p> <p>Sets the maximum number of lobbies to return. The lower the count the faster it is to download the lobby results &amp; details to the client.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#addrequestlobbyliststringfilter","title":"addRequestLobbyListStringFilter","text":"<p>addRequestLobbyListStringFilter( <code>string</code> key_to_match, <code>string</code> value_to_match, <code>int</code> comparison_type )</p> <p>Adds a string comparison filter to the next requestLobbyList call.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#createlobby","title":"createLobby","text":"<p>createLobby( <code>int</code> lobby_type, <code>int</code> max_members )</p> <p>Create a new matchmaking lobby.</p> <p>Triggers all three callbacks: lobby_created, lobby_joined, and lobby_data_update.</p> <p>Returns: void</p> <p>If the results returned via the lobby_created call result indicate success then the lobby is joined and ready to use at this point.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#deletelobbydata","title":"deleteLobbyData","text":"<p>deleteLobbyData( <code>uint64_t</code> steam_lobby_id, <code>string</code> key )</p> <p>Removes a metadata key from the lobby.</p> <p>This can only be done by the owner of the lobby.</p> <p>This will only send the data if the key existed. There is a slight delay before sending the data so you can call this repeatedly to set all the data you need to and it will automatically be batched up and sent after the last sequential call.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#getalllobbydata","title":"getAllLobbyData","text":"<p>getAllLobbyData( <code>uint64_t</code> steam_lobby_id )</p> <p>Get lobby data by the lobby's ID.</p> <p>Returns: dictionary</p> <p>Containing the following keys:</p> <ul> <li>index (int)</li> <li>key (string)</li> <li>value (string)</li> </ul> <p>Note: This is a GodotSteam specific function.</p>"},{"location":"classes/matchmaking/#getfavoritegames","title":"getFavoriteGames","text":"<p>getFavoriteGames()</p> <p>Gets the details of the favorite game server by index.</p> <p>Returns: array</p> <p>Containing a list of:</p> <p>favorite (dictionary)</p> <p>Contains the following keys:</p> <ul> <li>ret (bool)</li> <li>app (uint32)</li> <li>ip (string)</li> <li>game_port (uint16)</li> <li>query_port (uint16)</li> <li>flags (uint32)</li> <li>last_played (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#getlobbydata","title":"getLobbyData","text":"<p>getLobbyData( <code>uint64_t</code> steam_lobby_id, <code>string</code> key )</p> <p>Gets the metadata associated with the specified key from the specified lobby.</p> <p>Returns: string</p> <p>Returns an empty string if no value is set for this key, or if steam_lobby_id is invalid.</p> <p>Note: This can only get metadata from lobbies that the client knows about, either after receiving a list of lobbies from lobby_match_list, retrieving the data with requestLobbyData, or after joining a lobby.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#getlobbygameserver","title":"getLobbyGameServer","text":"<p>getLobbyGameServer( <code>uint64_t</code> steam_lobby_id )</p> <p>Gets the details of a game server set in a lobby. Either the IP/Port or the Steam ID of the game server has to be valid, depending on how you want the clients to be able to connect.</p> <p>Returns: dictionary</p> <ul> <li>ret (bool) - true if the lobby is valid and has a valid game server set; otherwise, false.</li> <li>ip (string)</li> <li>port (uint32)</li> <li>id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#getlobbymemberbyindex","title":"getLobbyMemberByIndex","text":"<p>getLobbyMemberByIndex( <code>uint64_t</code> steam_lobby_id, <code>int</code> member )</p> <p>Gets the Steam ID of the lobby member at the given index.</p> <p>Returns: int</p> <p>Note: You must call getNumLobbyMembers before calling this.</p> <p>Note: The current user must be in the lobby to retrieve the Steam IDs of other users in that lobby.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#getlobbymemberdata","title":"getLobbyMemberData","text":"<p>getLobbyMemberData( <code>uint64_t</code> steam_lobby_id, <code>uint64_t</code> steam_user_id, <code>string</code> key )</p> <p>Gets per-user metadata from another player in the specified lobby.</p> <p>This can only be queried from members in lobbies that you are currently in.</p> <p>Returns: string</p> <p>Returns NULL if steam_lobby_id is invalid, or steam_user_id is not in the lobby. Returns an empty string if key is not set for the player.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#getlobbymemberlimit","title":"getLobbyMemberLimit","text":"<p>getLobbyMemberLimit( <code>uint64_t</code> steam_lobby_id )</p> <p>The current limit on the number of users who can join the lobby.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#getlobbyowner","title":"getLobbyOwner","text":"<p>getLobbyOwner( <code>uint64_t</code> steam_lobby_id )</p> <p>Returns the current lobby owner.</p> <p>Returns: uint64_t</p> <p>Note: You must be a member of the lobby to access this. There always one lobby owner - if the current owner leaves, another user in the lobby will become the owner automatically. It is possible (but rare) to join a lobby just as the owner is leaving, thus entering a lobby with self as the owner.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#getnumlobbymembers","title":"getNumLobbyMembers","text":"<p>getNumLobbyMembers( <code>uint64_t</code> steam_lobby_id )</p> <p>Gets the number of users in a lobby.</p> <p>This is used for iteration. After calling this then getLobbyMemberByIndex can be used to get the Steam ID of each person in the lobby. Persona information for other lobby members (name, avatar, etc.) is automatically received and accessible via the Friends class.</p> <p>Returns: int</p> <p>Note: The current user must be in the lobby to retrieve the Steam IDs of other users in that lobby.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#inviteusertolobby","title":"inviteUserToLobby","text":"<p>inviteUserToLobby( <code>uint64_t</code> steam_lobby_id, <code>uint64_t</code> steam_id_invitee )</p> <p>Invite another user to the lobby.</p> <p>If the specified user clicks the join link, a join_requested callback will be posted if the user is in-game, or if the game isn't running yet then the game will be automatically launched with the command line parameter <code>+connect_lobby &lt;64-bit lobby Steam ID&gt;</code> instead.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#joinlobby","title":"joinLobby","text":"<p>joinLobby( <code>int</code> steam_lobby_id )</p> <p>Joins an existing lobby.</p> <p>The lobby Steam ID can be obtained either from a search with requestLobbyList joining on a friend, or from an invite.</p> <p>Triggers a lobby_joined callback for yourself and a lobby_chat_update callback for any other users already in the lobby.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#leavelobby","title":"leaveLobby","text":"<p>leaveLobby( <code>uint64_t</code> steam_lobby_id )</p> <p>Leave a lobby that the user is currently in; this will take effect immediately on the client side, other users in the lobby will be notified by a lobby_chat_update callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#removefavoritegame","title":"removeFavoriteGame","text":"<p>removeFavoriteGame( <code>uint32</code> app_id, <code>string</code> ip, <code>uint16</code> port, <code>uint16</code> query_port, <code>uint32</code> flags )</p> <p>Removes the game server from the local favorites list.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#requestlobbydata","title":"requestLobbyData","text":"<p>requestLobbyData( <code>uint64_t</code> steam_lobby_id )</p> <p>Refreshes all of the metadata for a lobby that you're not in right now.</p> <p>You will never do this for lobbies you're a member of; that data will always be up to date. You can use this to refresh lobbies that you have obtained from requestLobbyList or that are available via friends.</p> <p>Triggers a lobby_data_update callback.</p> <p>Returns: bool</p> <p>True if the request was successfully sent to the server. False if no connection to Steam could be made, or steam_lobby_id is invalid.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#requestlobbylist","title":"requestLobbyList","text":"<p>requestLobbyList()</p> <p>Get a filtered list of relevant lobbies.</p> <p>There can only be one active lobby search at a time. The old request will be canceled if a new one is started. Depending on the user's connection to the Steam back-end, this call can take from 300ms to 5 seconds to complete, and has a timeout of 20 seconds.</p> <p>Triggers a lobby_match_list callback.</p> <p>Returns: void</p> <p>Note: To filter the results you must call the addRequestLobbyList functions before calling this. The filters are cleared on each call to this function.</p> <p>Note: If addRequestLobbyListDistanceFilter is not called, LOBBY_DISTANCE_FILTER_DEFAULT (1) will be used, which will only find matches in the same or nearby regions.</p> <p>Note: This will only return lobbies that are not full, and only lobbies that are LOBBY_TYPE_PUBLIC (2) or LOBBY_TYPE_INVISIBLE (3), and are set to joinable with setLobbyJoinable.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#sendlobbychatmsg","title":"sendLobbyChatMsg","text":"<p>sendLobbyChatMsg( <code>uint64_t</code> steam_lobby_id, <code>string</code> message_body )</p> <p>Broadcasts a chat (text or binary data) message to the all of the users in the lobby. All users in the lobby (including the local user) will receive a lobby_message callback with the message.</p> <p>For communication that needs to be arbitrated (for example having a user pick from a set of characters, and making sure only one user has picked a character), you can use the lobby owner as the decision maker. getLobbyOwner returns the current lobby owner. There is guaranteed to always be one and only one lobby member who is the owner. So for the choose-a-character scenario, the user who is picking a character would send the binary message 'I want to be Zoe', the lobby owner would see that message, see if it was OK, and broadcast the appropriate result (user X is Zoe).</p> <p>These messages are sent via the Steam back-end, and so the bandwidth available is limited. For higher-volume traffic like voice or game data, you'll want to use the Steam Networking API.</p> <p>Triggers a lobby_message callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#setlobbydata","title":"setLobbyData","text":"<p>setLobbyData( <code>uint64_t</code> steam_lobby_id, <code>string</code> key, <code>string</code> value )</p> <p>Sets a key/value pair in the lobby metadata. This can be used to set the the lobby name, current map, game mode, etc.</p> <p>This can only be set by the owner of the lobby. Lobby members should use setLobbyMemberData instead.</p> <p>Each user in the lobby will be receive notification of the lobby data change via a lobby_data_update callback, and any new users joining will receive any existing data.</p> <p>This will only send the data if it has changed. There is a slight delay before sending the data so you can call this repeatedly to set all the data you need to and it will automatically be batched up and sent after the last sequential call.</p> <p>Returns: bool</p> <p>True if the data has been set successfully. False if steam_lobby_id was invalid, or the key/value are too long.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#setlobbygameserver","title":"setLobbyGameServer","text":"<p>setLobbyGameServer( <code>uint64_t</code> steam_lobby_id, <code>string</code> server_ip, <code>uint16</code> server_port, <code>uint64_t</code> steam_id_game_server )</p> <p>Sets the game server associated with the lobby.</p> <p>This can only be set by the owner of the lobby.</p> <p>Either the IP/Port or the Steam ID of the game server must be valid, depending on how you want the clients to be able to connect.</p> <p>A lobby_game_created callback will be sent to all players in the lobby, usually at this point, the users will join the specified game server.</p> <p>Triggers a lobby_game_created callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#setlobbyjoinable","title":"setLobbyJoinable","text":"<p>setLobbyJoinable( <code>uint64_t</code> steam_lobby_id, <code>bool</code> joinable )</p> <p>Sets whether or not a lobby is joinable by other players. This always defaults to enabled for a new lobby.</p> <p>If joining is disabled, then no players can join, even if they are a friend or have been invited.</p> <p>Lobbies with joining disabled will not be returned from a lobby search.</p> <p>Returns: bool</p> <p>True upon success; otherwise, false if you're not the owner of the lobby.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#setlobbymemberdata","title":"setLobbyMemberData","text":"<p>setLobbyMemberData( <code>uint64_t</code> steam_lobby_id, <code>string</code> key, <code>string</code> value )</p> <p>Sets per-user metadata for the local user.</p> <p>Each user in the lobby will be receive notification of the lobby data change via a lobby_data_update callback, and any new users joining will receive any existing data.</p> <p>There is a slight delay before sending the data so you can call this repeatedly to set all the data you need to and it will automatically be batched up and sent after the last sequential call.</p> <p>Triggers a lobby_data_update callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#setlobbymemberlimit","title":"setLobbyMemberLimit","text":"<p>setLobbyMemberLimit( <code>uint64_t</code> steam_lobby_id, <code>int</code> max_members )</p> <p>Set the maximum number of players that can join the lobby.</p> <p>This is also set when you create the lobby with createLobby.</p> <p>This can only be set by the owner of the lobby.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#setlobbyowner","title":"setLobbyOwner","text":"<p>setLobbyOwner( <code>uint64_t</code> steam_lobby_id, <code>uint64_t</code> steam_id_new_owner )</p> <p>Changes who the lobby owner is.</p> <p>This can only be set by the owner of the lobby. This will trigger a lobby_data_update for all of the users in the lobby, each user should update their local state to reflect the new owner. This is typically accomplished by displaying a crown icon next to the owners name.</p> <p>Triggers a lobby_data_update callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#setlobbytype","title":"setLobbyType","text":"<p>setLobbyType( <code>int</code> steam_lobby_id, <code>int</code> eLobbyType )</p> <p>Updates what type of lobby this is.</p> <p>This is also set when you create the lobby with createLobby.</p> <p>This can only be set by the owner of the lobby.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/matchmaking/#signals","title":"Signals","text":""},{"location":"classes/matchmaking/#favorites_list_accounts_updated","title":"favorites_list_accounts_updated","text":"<p>favorites_list_accounts_updated</p> <p>Called when an account on your favorites list is updated.</p> <p>Returns:</p> <ul> <li>result (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#favorites_list_changed","title":"favorites_list_changed","text":"<p>favorites_list_changed</p> <p>A server was added/removed from the favorites list, you should refresh now.</p> <p>Returns:</p> <ul> <li>favorite (dictionary):<ul> <li>ip (string)</li> <li>query_port (uint32)</li> <li>connection_port (uint32)</li> <li>app_id (uint32_t)</li> <li>flags (uint32)</li> <li>add (bool)</li> <li>account_id (uint32)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_chat_update","title":"lobby_chat_update","text":"<p>lobby_chat_update</p> <p>A lobby chat room state has changed, this is usually sent when a user has joined or left the lobby.</p> <p>Returns:</p> <ul> <li>lobby_id (uint64_t)</li> <li>changed_id (uint64_t)</li> <li>making_change_id (uint64_t)</li> <li>chat_state (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_created","title":"lobby_created","text":"<p>lobby_created</p> <p>Result of our request to create a lobby. At this point, the lobby has been joined and is ready for use. A lobby_joined callback will also be received (since the user is joining their own lobby).</p> <p>Returns:</p> <ul> <li>connect (int) as Result enum</li> <li>lobby (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_data_update","title":"lobby_data_update","text":"<p>lobby_data_update</p> <p>The lobby metadata has changed.</p> <p>If <code>member_id</code> is a user in the lobby, then use getLobbyMemberData to access per-user details; otherwise, if <code>member_id == lobby_id</code>, use getLobbyData to access the lobby metadata.</p> <p>Returns:</p> <ul> <li>success (uint8)</li> <li>lobby_id (uint64_t)</li> <li>member_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_game_created","title":"lobby_game_created","text":"<p>lobby_game_created</p> <p>A game server has been set via setLobbyGameServer for all of the members of the lobby to join. It's up to the individual clients to take action on this; the typical game behavior is to leave the lobby and connect to the specified game server; but the lobby may stay open throughout the session if desired.</p> <p>Returns:</p> <ul> <li>lobby_id (uint64_t)</li> <li>server_id (uint64_t)</li> <li>server_ip (uint32)</li> <li>port (uint16)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_invite","title":"lobby_invite","text":"<p>lobby_invite</p> <p>Someone has invited you to join a lobby. Normally you don't need to do anything with this, as the Steam UI will also display a 'user has invited you to the lobby, join?' notification and message.</p> <p>Returns:</p> <ul> <li>inviter (uint64_t)</li> <li>lobby (uint64_t)</li> <li>game (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_joined","title":"lobby_joined","text":"<p>lobby_joined</p> <p>Recieved upon attempting to enter a lobby. Lobby metadata is available to use immediately after receiving this.</p> <p>Returns:</p> <ul> <li>lobby_id (uint64_t)</li> <li>permissions (uint32_t) (unused; always 0)</li> <li>locked (bool)</li> <li>response (uint32_t) as ChatRoomEnterResponse enum</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_kicked","title":"lobby_kicked","text":"<p>lobby_kicked</p> <p>Posted if a user is forcefully removed from a lobby; can occur if a user loses connection to Steam.</p> <p>Returns:</p> <ul> <li>lobby_id (uint64_t)</li> <li>admin_id (uint64_t)</li> <li>due_to_disconnect (uint8)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_match_list","title":"lobby_match_list","text":"<p>lobby_match_list</p> <p>Result when requesting the lobby list.</p> <p>Emits signal in response to function requestLobbyList.</p> <p>Returns:</p> <ul> <li>lobbies (array) as lobby IDs (uint64_t)</li> </ul> <p>Notes: With the GDNative plug-in, this callback will also send back the lobby count as an integer; this fixes a very strange issue with GDNative mangling the lobbies array.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#lobby_message","title":"lobby_message","text":"<p>lobby_message</p> <p>A chat (text or binary) message for this lobby has been received.</p> <p>Returns:</p> <ul> <li>lobby_id (uint64_t)</li> <li>user (uint64_t)</li> <li>buffer (string)</li> <li>chat_type (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking/#enums","title":"Enums","text":""},{"location":"classes/matchmaking/#chatmemberstatechange","title":"ChatMemberStateChange","text":"Enumerator Value CHAT_MEMBER_STATE_CHANGE_ENTERED 0x0001 CHAT_MEMBER_STATE_CHANGE_LEFT 0x0002 CHAT_MEMBER_STATE_CHANGE_DISCONNECTED 0x0004 CHAT_MEMBER_STATE_CHANGE_KICKED 0x0008 CHAT_MEMBER_STATE_CHANGE_BANNED 0x0010"},{"location":"classes/matchmaking/#lobbycomparison","title":"LobbyComparison","text":"Enumerator Value LOBBY_COMPARISON_EQUAL_TO_OR_LESS_THAN -2 LOBBY_COMPARISON_LESS_THAN -1 LOBBY_COMPARISON_EQUAL 0 LOBBY_COMPARISON_GREATER_THAN 1 LOBBY_COMPARISON_EQUAL_TO_GREATER_THAN 2 LOBBY_COMPARISON_NOT_EQUAL 3"},{"location":"classes/matchmaking/#lobbydistancefilter","title":"LobbyDistanceFilter","text":"Enumerator Value LOBBY_DISTANCE_FILTER_CLOSE 0 LOBBY_DISTANCE_FILTER_DEFAULT 1 LOBBY_DISTANCE_FILTER_FAR 2 LOBBY_DISTANCE_FILTER_WORLDWIDE 3"},{"location":"classes/matchmaking/#lobbytype","title":"LobbyType","text":"Enumerator Value LOBBY_TYPE_PRIVATE 0 LOBBY_TYPE_FRIENDS_ONLY 1 LOBBY_TYPE_PUBLIC 2 LOBBY_TYPE_INVISIBLE 3"},{"location":"classes/matchmaking_servers/","title":"Matchmaking Servers","text":"<p>Functions which provide access to the game server browser. See\u00a0Game Servers\u00a0for more information.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/matchmaking_servers/#functions","title":"Functions","text":""},{"location":"classes/matchmaking_servers/#cancelquery","title":"cancelQuery","text":"<p>cancelQuery( <code>uint64_t</code> server_list_request = 0 )</p> <p>Cancel an outstanding server list request.</p> <p>You should call this to cancel any in-progress requests before destructing a callback object that may have been passed to one of the below request calls. Not doing so may result in a crash when a callback occurs on the destructed object. Canceling a query does not release the allocated request handle. The request handle must be released using releaseRequest.</p> <p>You can pass a server_list_request handle or, if you do not, it will use the last internally stored one.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#cancelserverquery","title":"cancelServerQuery","text":"<p>cancelServerQuery( <code>int</code> server_query )</p> <p>Cancel an outstanding individual server query.</p> <p>The calls that create this type of query are: pingServer, playerDetails, and serverRules. You should call this to cancel any in-progress requests before destructing a callback object that may have been passed to one of the above calls to avoid crashing when callbacks occur.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#getservercount","title":"getServerCount","text":"<p>getServerCount( <code>uint64_t</code> server_list_request = 0 )</p> <p>Gets the number of servers in the given list. This is used for iterating with getServerDetails.</p> <p>You can pass a server_list_request handle or, if you do not, it will use the last internally stored one.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#getserverdetails","title":"getServerDetails","text":"<p>getServerDetails( <code>int</code> server, <code>uint64_t</code> server_list_request = 0 )</p> <p>Get the details of a given server in the list.</p> <p>You can get the valid range of index values by calling getServerCount. You will also receive index values in request_server_list_server_responded callbacks.</p> <p>You can pass a server_list_request handle or, if you do not, it will use the last internally stored one.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ping (int)</li> <li>success_response (bool)</li> <li>no_refresh (bool)</li> <li>game_dir (string)</li> <li>map (string)</li> <li>description (string)</li> <li>app_id (uint32)</li> <li>players (int)</li> <li>max_players (int)</li> <li>bot_players (int)</li> <li>password (bool)</li> <li>secure (bool)</li> <li>last_played (uint32)</li> <li>server_version (int)  </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#isrefreshing","title":"isRefreshing","text":"<p>isRefreshing( <code>uint64_t</code> server_list_request = 0 )</p> <p>Checks if the server list request is currently refreshing.</p> <p>You can pass a server_list_request handle or, if you do not, it will use the last internally stored one.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#pingserver","title":"pingServer","text":"<p>pingServer( <code>string</code> ip, <code>uint</code> port )</p> <p>Queries an individual game server directly via IP/Port to request an updated ping time and other details from the server.</p> <p>You must inherit from the ISteamMatchmakingPingResponse object to receive this callback.</p> <p>Currently not enabled.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#playerdetails","title":"playerDetails","text":"<p>playerDetails( <code>string</code> ip, <code>uint16</code> port )</p> <p>Queries an individual game server directly via IP/Port to request the list of players currently playing on the server.</p> <p>You must inherit from the ISteamMatchmakingPlayersResponse object to receive this callback.</p> <p>Currently not enabled.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/matchmaking_servers/#refreshquery","title":"refreshQuery","text":"<p>refreshQuery( <code>uint64_t</code> server_list_request = 0 )</p> <p>Ping every server in your list again but don't update the list of servers.</p> <p>The query callback installed when the server list was requested will be used again to post notifications and request_server_list_refresh_complete will be called again, so the callback must remain valid until it completes or the request is released with releaseRequest.</p> <p>You can pass a server_list_request handle or, if you do not, it will use the last internally stored one.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#refreshserver","title":"refreshServer","text":"<p>refreshServer( <code>int</code> server, <code>uint64_t</code> server_list_request = 0 )</p> <p>Refreshes a single server inside of a query.</p> <p>If you want to refresh all of the servers then you should use refreshQuery.</p> <p>You can pass a server_list_request handle or, if you do not, it will use the last internally stored one.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#releaserequest","title":"releaseRequest","text":"<p>releaseRequest( <code>uint64_t</code> server_list_request = 0 )</p> <p>Releases the asynchronous server list request object and cancels any pending query on it if there's a pending query in progress.</p> <p>You can pass a server_list_request handle or, if you do not, it will use the last internally stored one.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#requestfavoritesserverlist","title":"requestFavoritesServerList","text":"<p>requestFavoritesServerList( <code>uint32</code> app_id, <code>array</code> filters )</p> <p>Request a new list of game servers from the 'favorites' server list.</p> <p>See MatchMakingKeyValuePair_t for more information.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#requestfriendsserverlist","title":"requestFriendsServerList","text":"<p>requestFriendsServerList( <code>uint32</code> app_id, <code>array</code> filters )</p> <p>Request a new list of game servers from the 'friends' server list.</p> <p>See MatchMakingKeyValuePair_t for more information.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#requesthistoryserverlist","title":"requestHistoryServerList","text":"<p>requestHistoryServerList( <code>uint32</code> app_id, <code>array</code> filters )</p> <p>Request a new list of game servers from the 'history' server list.</p> <p>See MatchMakingKeyValuePair_t for more information.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#requestinternetserverlist","title":"requestInternetServerList","text":"<p>requestInternetServerList( <code>uint32</code> app_id, <code>array</code> filters )</p> <p>Request a new list of game servers from the 'internet' server list.</p> <p>See MatchMakingKeyValuePair_t for more information.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#requestlanserverlist","title":"requestLANServerList","text":"<p>requestLANServerList( <code>uint32</code> app_id )</p> <p>Request a new list of game servers from the 'LAN' server list.</p> <p>See MatchMakingKeyValuePair_t for more information.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#requestspectatorserverlist","title":"requestSpectatorServerList","text":"<p>requestSpectatorServerList( <code>uint32</code> app_id, <code>array</code> filters )</p> <p>Request a new list of game servers from the 'spectator' server list.</p> <p>See MatchMakingKeyValuePair_t for more information.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/matchmaking_servers/#serverrules","title":"serverRules","text":"<p>serverRules( <code>string</code> ip, <code>uint16</code> port )</p> <p>Queries an individual game server directly via IP/Port to request the list of rules that the server is running. (See setKeyValue to set the rules on the server side.)</p> <p>You must inherit from the ISteamMatchmakingRulesResponse object to receive this callback.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/matchmaking_servers/#signals","title":"Signals","text":""},{"location":"classes/matchmaking_servers/#ping_server_failed_to_respond","title":"ping_server_failed_to_respond","text":"<p>ping_server_failed_to_respond</p> <p>The server has failed to respond to a ping request.</p> <p>Returns: void</p>"},{"location":"classes/matchmaking_servers/#ping_server_responded","title":"ping_server_responded","text":"<p>ping_server_responded</p> <p>The server has responded to a ping request.</p> <p>Returns: server_details (dictionary)</p> <p>Contains the following keys:</p> <ul> <li>name (string)</li> <li>connection_address (string)</li> <li>query_address (string)</li> <li>ping (int)</li> <li>success_response (bool)</li> <li>no_refresh (bool)</li> <li>game_dir (string)</li> <li>map (string)</li> <li>description (string)</li> <li>app_id (int)</li> <li>players (int)</li> <li>max_players (int)</li> <li>bot_players (int)</li> <li>password (bool)</li> <li>secure (bool)</li> <li>last_played (int)</li> <li>server_version (int)</li> <li>game_tags (string)</li> <li>steam_id (uint64_t)</li> </ul>"},{"location":"classes/matchmaking_servers/#player_details_failed_to_respond","title":"player_details_failed_to_respond","text":"<p>player_details_failed_to_respond</p> <p>The server failed to respond to a player details request.</p> <p>Returns: void   </p>"},{"location":"classes/matchmaking_servers/#player_details_player_added","title":"player_details_player_added","text":"<p>player_details_player_added</p> <p>The server has responded to a player details request.</p> <p>Returns:</p> <ul> <li>name (string)</li> <li>score (int)</li> <li>time_played (float)</li> </ul>"},{"location":"classes/matchmaking_servers/#player_details_refresh_complete","title":"player_details_refresh_complete","text":"<p>player_details_refresh_complete</p> <p>The server has completed a player details request.</p> <p>Returns: void</p>"},{"location":"classes/matchmaking_servers/#request_server_list_refresh_complete","title":"request_server_list_refresh_complete","text":"<p>request_server_list_refresh_complete</p> <p>A server list request has completed.</p> <p>Returns:</p> <ul> <li>request_handle (uint64_t)</li> <li>response (int / MatchMakingServerResponse enum)</li> </ul>"},{"location":"classes/matchmaking_servers/#request_server_list_server_failed_to_respond","title":"request_server_list_server_failed_to_respond","text":"<p>request_server_list_server_failed_to_respond</p> <p>A server failed to respond to a list request.</p> <p>Returns:</p> <ul> <li>request_handle (uint64_t)</li> <li>server (int)</li> </ul>"},{"location":"classes/matchmaking_servers/#request_server_list_server_responded","title":"request_server_list_server_responded","text":"<p>request_server_list_server_responded</p> <p>A server has responded to a list request.</p> <p>Returns:</p> <ul> <li>request_handle (uint64_t)</li> <li>server (int)</li> </ul>"},{"location":"classes/matchmaking_servers/#server_rules_failed_to_respond","title":"server_rules_failed_to_respond","text":"<p>server_rules_failed_to_respond</p> <p>The server failed to respond with a rules request.</p> <p>Returns: void</p>"},{"location":"classes/matchmaking_servers/#server_rules_refresh_complete","title":"server_rules_refresh_complete","text":"<p>server_rules_refresh_complete</p> <p>The server has completed a rules refresh.</p> <p>Returns: void</p>"},{"location":"classes/matchmaking_servers/#server_rules_responded","title":"server_rules_responded","text":"<p>server_rules_responded</p> <p>The server responded with a rules request.</p> <p>Returns:</p> <ul> <li>rule (string)</li> <li>value (string)</li> </ul>"},{"location":"classes/matchmaking_servers/#enums","title":"Enums","text":""},{"location":"classes/matchmaking_servers/#matchmakingserverresponse","title":"MatchMakingServerResponse","text":"Enumerator Value SERVER_RESPONDED 0 SERVER_FAILED_TO_RESPOND 1 NO_SERVERS_LISTED_ON_MASTER_SERVER 2"},{"location":"classes/music/","title":"Music","text":"<p>Functions to control music playback in the Steam client. This gives games the opportunity to do things like pause the music or lower the volume when an important cut scene is shown, and then start playing again afterwards. These functions only work with soundtracks you purchased or own on Steam.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/music/#functions","title":"Functions","text":""},{"location":"classes/music/#getplaybackstatus","title":"getPlaybackStatus","text":"<p>getPlaybackStatus()</p> <p>Gets the current status of the Steam Music player.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music/#musicisenabled","title":"musicIsEnabled","text":"<p>musicIsEnabled()</p> <p>Checks if Steam Music is enabled.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music/#musicisplaying","title":"musicIsPlaying","text":"<p>musicIsPlaying()</p> <p>Checks if Steam Music is active. This does not necessarily a song is currently playing, it may be paused. For finer grain control use getPlaybackStatus.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music/#musicgetvolume","title":"musicGetVolume","text":"<p>musicGetVolume()</p> <p>Gets the current volume of the Steam Music player.</p> <p>Returns: float</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music/#musicpause","title":"musicPause","text":"<p>musicPause()</p> <p>Pause the Steam Music player.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music/#musicplay","title":"musicPlay","text":"<p>musicPlay()</p> <p>Have the Steam Music player resume playing.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music/#musicplaynext","title":"musicPlayNext","text":"<p>musicPlayNext()</p> <p>Have the Steam Music player skip to the next song.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music/#musicplayprev","title":"musicPlayPrev","text":"<p>musicPlayPrev()</p> <p>Have the Steam Music player play the previous song.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music/#musicsetvolume","title":"musicSetVolume","text":"<p>musicSetVolume( <code>float</code> value )</p> <p>Sets the volume of the Steam Music player.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/music/#signals","title":"Signals","text":""},{"location":"classes/music/#music_playback_status_has_changed","title":"music_playback_status_has_changed","text":"<p>music_playback_status_has_changed</p> <p>No notes about this in the Steam docs, but we can assume it just updates us about the playback status.</p> <p>Returns: nothing</p>"},{"location":"classes/music/#music_volume_has_changed","title":"music_volume_has_changed","text":"<p>music_volume_has_changed</p> <p>No notes about this in the Steam docs, but we can assume it just updates us about the volume changes.</p> <p>Returns: new_volume (float)</p>"},{"location":"classes/music/#enums","title":"Enums","text":""},{"location":"classes/music/#audioplaybackstatus","title":"AudioPlaybackStatus","text":"Enumerator Value AUDIO_PLAYBACK_UNDEFINED 0 AUDIO_PLAYBACK_PLAYING 1 AUDIO_PLAYBACK_PAUSED 2 AUDIO_PLAYBACK_IDLE 3"},{"location":"classes/music_remote/","title":"Music Remote","text":"<p>Allows direct interaction with the Steam Music player. These functions only work with soundtracks you purchased or own on Steam.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/music_remote/#functions","title":"Functions","text":""},{"location":"classes/music_remote/#activationsuccess","title":"activationSuccess","text":"<p>activationSuccess( <code>bool</code> value )</p> <p>If remote access was successfully activated.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#iscurrentmusicremote","title":"isCurrentMusicRemote","text":"<p>isCurrentMusicRemote()</p> <p>Is a remote music client / host connected?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#currententrydidchange","title":"currentEntryDidChange","text":"<p>currentEntryDidChange()</p> <p>Did the currenty music entry just change?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#currententryisavailable","title":"currentEntryIsAvailable","text":"<p>currentEntryIsAvailable( <code>bool</code> available )</p> <p>Is the current music entry available?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#currententrywillchange","title":"currentEntryWillChange","text":"<p>currentEntryWillChange()</p> <p>Will the current music entry change?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#deregistersteammusicremote","title":"deregisterSteamMusicRemote","text":"<p>deregisterSteamMusicRemote()</p> <p>Disconnect from remote music client / host.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#enablelooped","title":"enableLooped","text":"<p>enableLooped( <code>bool</code> value )</p> <p>Enable track loop on client.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#enableplaylists","title":"enablePlaylists","text":"<p>enablePlaylists( <code>bool</code> value )</p> <p>Enable playlists on client.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#enableplaynext","title":"enablePlayNext","text":"<p>enablePlayNext( <code>bool</code> value )</p> <p>Play the next track on client.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#enableplayprevious","title":"enablePlayPrevious","text":"<p>enablePlayPrevious( <code>bool</code> value )</p> <p>Play previous track on client.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#enablequeue","title":"enableQueue","text":"<p>enableQueue( <code>bool</code> value )</p> <p>Enable the music queue on the client.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#enableshuffled","title":"enableShuffled","text":"<p>enableShuffled( <code>bool</code> value )</p> <p>Enable shuffle on the client.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#playlistdidchange","title":"playlistDidChange","text":"<p>playlistDidChange()</p> <p>Has the playlist changed?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#playlistwillchange","title":"playlistWillChange","text":"<p>playlistWillChange()</p> <p>Will the playlist change?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#queuedidchange","title":"queueDidChange","text":"<p>queueDidChange()</p> <p>Did the song queue change?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#queuewillchange","title":"queueWillChange","text":"<p>queueWillChange()</p> <p>Will the song queue change?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#registersteammusicremote","title":"registerSteamMusicRemote","text":"<p>registerSteamMusicRemote( <code>string</code> name )</p> <p>Connect to a music remote client / host?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#resetplaylistentries","title":"resetPlaylistEntries","text":"<p>resetPlaylistEntries()</p> <p>Reset the playlist entries.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#resetqueueentries","title":"resetQueueEntries","text":"<p>resetQueueEntries()</p> <p>Reset the song queue entries.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#setcurrentplaylistentry","title":"setCurrentPlaylistEntry","text":"<p>setCurrentPlaylistEntry( <code>int</code> id )</p> <p>Set a new current playlist.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#setcurrentqueueentry","title":"setCurrentQueueEntry","text":"<p>setCurrentQueueEntry( <code>int</code> id )</p> <p>Set a new current song queue.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#setdisplayname","title":"setDisplayName","text":"<p>setDisplayName( <code>string</code> name )</p> <p>Set a new display name.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#setplaylistentry","title":"setPlaylistEntry","text":"<p>setPlaylistEntry( <code>int</code> id, <code>int</code> position, <code>string</code> entryText )</p> <p>Set a new playlist entry.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#setpngicon64x64","title":"setPNGIcon64x64","text":"<p>setPNGIcon64x64( <code>PoolByteArray</code> icon )</p> <p>Set a PNG icon for a song? A playlist?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#setqueueentry","title":"setQueueEntry","text":"<p>setQueueEntry( <code>int</code> id, <code>int</code> position, <code>string</code> entryText )</p> <p>Set a new queue entry.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#updatecurrententrycoverart","title":"updateCurrentEntryCoverArt","text":"<p>updateCurrentEntryCoverArt( <code>PoolByteArray</code> art )</p> <p>Update the current song entry's cover art.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#updatecurrententryelapsedseconds","title":"updateCurrentEntryElapsedSeconds","text":"<p>updateCurrentEntryElapsedSeconds( <code>int</code> value )</p> <p>Update the current seconds that have elapsed for an entry.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#updatecurrententrytext","title":"updateCurrentEntryText","text":"<p>updateCurrentEntryText( <code>string</code> text )</p> <p>Update the current song entry's text?</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#updatelooped","title":"updateLooped","text":"<p>updateLooped( <code>bool</code> value )</p> <p>Update looped or not.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#updateplaybackstatus","title":"updatePlaybackStatus","text":"<p>updatePlaybackStatus( <code>int</code> status )</p> <p>Update the current playback status:</p> <ul> <li>0 - undefined</li> <li>1 - playing</li> <li>2 - paused</li> <li>3 - idle.</li> </ul> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#updateshuffled","title":"updateShuffled","text":"<p>updateShuffled( <code>bool</code> value )</p> <p>Update whether to shuffle or not.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#updatevolume","title":"updateVolume","text":"<p>updateVolume( <code>float</code> value )</p> <p>Volume is between 0.0 and 1.0.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/music_remote/#signals","title":"Signals","text":""},{"location":"classes/music_remote/#music_player_remote_to_front","title":"music_player_remote_to_front","text":"<p>music_player_remote_to_front</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_remote_will_activate","title":"music_player_remote_will_activate","text":"<p>music_player_remote_will_activate</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_remote_will_deactivate","title":"music_player_remote_will_deactivate","text":"<p>music_player_remote_will_deactivate</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_selects_playlist_entry","title":"music_player_selects_playlist_entry","text":"<p>music_player_selects_playlist_entry</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns:</p> <ul> <li>entry (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_selects_queue_entry","title":"music_player_selects_queue_entry","text":"<p>music_player_selects_queue_entry</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns:</p> <p>*entry (int)</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_wants_looped","title":"music_player_wants_looped","text":"<p>music_player_wants_looped</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns:</p> <ul> <li>looped (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_wants_pause","title":"music_player_wants_pause","text":"<p>music_player_wants_pause</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_wants_play","title":"music_player_wants_play","text":"<p>music_player_wants_play</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_wants_play_next","title":"music_player_wants_play_next","text":"<p>music_player_wants_play_next</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_wants_play_previous","title":"music_player_wants_play_previous","text":"<p>music_player_wants_play_previous</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_wants_playing_repeat_status","title":"music_player_wants_playing_repeat_status","text":"<p>music_player_wants_playing_repeat_status</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns:</p> <ul> <li>status (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_wants_shuffled","title":"music_player_wants_shuffled","text":"<p>music_player_wants_shuffled</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns:</p> <ul> <li>shuffled (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_wants_volume","title":"music_player_wants_volume","text":"<p>music_player_wants_volume</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns:</p> <ul> <li>volume (float)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/music_remote/#music_player_will_quit","title":"music_player_will_quit","text":"<p>music_player_will_quit</p> <p>There are no notes in the Steamworks documentation.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/","title":"Networking","text":"<p>Networking functions for making connections and sending data between clients, traversing NATs when possible. See the\u00a0Steam Networking\u00a0overview for more information.</p> <p>This API Is Deprecated</p> <p>It may be removed in a future Steamworks SDK release but should continue to work. Valve suggest using Networking Sockets\u00a0or\u00a0Networking Messages\u00a0instead. </p> <p>Only available in the main GodotSteam branches and GodotSteam Server branches</p>"},{"location":"classes/networking/#functions","title":"Functions","text":""},{"location":"classes/networking/#acceptp2psessionwithuser","title":"acceptP2PSessionWithUser","text":"<p>acceptP2PSessionWithUser( <code>uint64_t</code> steam_id_remote )</p> <p>This allows the game to specify accept an incoming packet. This needs to be called before a real connection is established to a remote host, the game will get a chance to say whether or not the remote user is allowed to talk to them.</p> <p>When a remote user that you haven't sent a packet to recently, tries to first send you a packet, your game will receive a callback p2p_session_request. This callback contains the Steam ID of the user who wants to send you a packet. In response to this callback, you'll want to see if it's someone you want to talk to (for example, if they're in a lobby with you), and if so, accept the connection; otherwise if you don't want to talk to the user, just ignore the request. If the user continues to send you packets, another p2p_session_request will be posted periodically. If you've called sendP2PPacket on the other user, this implicitly accepts the session request.</p> <p>Returns: bool</p> <ul> <li>true\u00a0upon success;\u00a0false\u00a0only if\u00a0<code>steam_id_remote</code>\u00a0is invalid.</li> </ul> <p>Note: This call should only be made in response to a p2p_session_request callback.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/#allowp2ppacketrelay","title":"allowP2PPacketRelay","text":"<p>allowP2PPacketRelay( <code>bool</code> allow )</p> <p>Allow or disallow P2P connections to fall back to being relayed through the Steam servers if a direct connection or NAT-traversal cannot be established.</p> <p>This only applies to connections created after setting this value, or to existing connections that need to automatically reconnect after this value is set.</p> <p>P2P packet relay is allowed by default.</p> <p>Returns: bool</p> <ul> <li>This function always returns true.</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/#closep2pchannelwithuser","title":"closeP2PChannelWithUser","text":"<p>closeP2PChannelWithUser( <code>uint64_t</code> steam_id_remote, <code>int</code> channel )</p> <p>Closes a P2P channel when you're done talking to a user on the specific channel.</p> <p>Once all channels to a user have been closed, the open session to the user will be closed and new data from this user will trigger a new p2p_session_request callback.</p> <p>Returns: bool</p> <ul> <li>true\u00a0if the channel was successfully closed; otherwise,\u00a0false\u00a0if there was no active session or channel with the user.</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/#closep2psessionwithuser","title":"closeP2PSessionWithUser","text":"<p>closeP2PSessionWithUser( <code>uint64_t</code> steam_id_remote )</p> <p>This should be called when you're done communicating with a user, as this will free up all of the resources allocated for the connection under-the-hood.</p> <p>If the remote user tries to send data to you again, a new p2p_session_request callback will be posted.</p> <p>Returns: bool</p> <ul> <li>true\u00a0if the session was successfully closed; otherwise,\u00a0false\u00a0if no connection was open with\u00a0<code>steam_id_remote</code>.</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/#getp2psessionstate","title":"getP2PSessionState","text":"<p>getP2PSessionState( <code>uint64_t</code> steam_id_remote )</p> <p>Fills out a dictionary with details about the connection like whether or not there is an active connection; number of bytes queued on the connection; the last error code, if any; whether or not a relay server is being used; and the IP and Port of the remote user, if known.</p> <p>This should only needed for debugging purposes.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>connection_active (bool)</li> <li>connecting (bool)</li> <li>session_error (uint8)</li> <li>using_relay (bool)</li> <li>bytes_queued_for_send (int32)</li> <li>packets_queued_for_send (int32)</li> <li>remote_ip (uint32)</li> <li>remote_port (uint16)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/#getavailablep2ppacketsize","title":"getAvailableP2PPacketSize","text":"<p>getAvailableP2PPacketSize( <code>int</code> channel )</p> <p>Calls isP2PPacketAvailable under the hood, returns the size of the available packet or zero if there is no such packet.</p> <p>Returns: uint32_t</p>"},{"location":"classes/networking/#readp2ppacket","title":"readP2PPacket","text":"<p>readP2PPacket( <code>uint32_t</code> packet, <code>int</code> channel )</p> <p>Reads in a packet that has been sent from another user via SendP2PPacket.</p> <p>This call is not blocking, and will return false if no data is available.</p> <p>Before calling this you should have called getAvailableP2PPacketSize.</p> <p>Returns: dictionary</p> <ul> <li>data (PoolByteArray)</li> <li>steam_id_remote (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/#sendp2ppacket","title":"sendP2PPacket","text":"<p>sendP2PPacket( <code>uint64_t</code> steam_id_remote, <code>array</code> data, <code>int</code> send_type, <code>int</code> channel )</p> <p>Sends a P2P packet to the specified user.</p> <p>This is a session-less API which automatically establishes NAT-traversing or Steam relay server connections.</p> <p>See EP2PSend for descriptions of the different ways of sending packets. The integers passed in GodotSteam are:</p> <ul> <li>0 - send ureliable</li> <li>1 - send unreliable, no delay</li> <li>2 - send reliable</li> <li>3 - send reliable with buffering</li> </ul> <p>The type of data you send is arbitrary, you can use an off the shelf system like Protocol Buffers or Cap'n Proto to encode your packets in an efficient way, or you can create your own messaging system.</p> <p>Sends a P2P packet to the specified user.</p> <p>Triggers a p2p_session_request callback.</p> <p>Returns: bool</p> <p>True if the packet was successfully sent. Note that this does not mean successfully received, if we can't get through to the user after a timeout of 20 seconds, then an error will be posted via the p2p_session_connect_fail callback.</p> <p>Note: The first packet send may be delayed as the NAT-traversal code runs.</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/networking/#signals","title":"Signals","text":""},{"location":"classes/networking/#p2p_session_connect_fail","title":"p2p_session_connect_fail","text":"<p>p2p_session_connect_fail</p> <p>Called when a user sends a packet and it fails.</p> <p>Returns:</p> <ul> <li>steam_id_remote (uint64_t)</li> <li>session_error (uint8_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/#p2p_session_request","title":"p2p_session_request","text":"<p>p2p_session_request</p> <p>Called when a user sends a packet.</p> <p>Returns:</p> <ul> <li>steam_id_remote (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking/#enums","title":"Enums","text":""},{"location":"classes/networking/#p2psend","title":"P2PSend","text":"Enumerator Value P2P_SEND_UNRELIABLE 0 P2P_SEND_UNRELIABLE_NO_DELAY 1 P2P_SEND_RELIABLE 2 P2P_SEND_RELIABLE_WITH_BUFFERING 3"},{"location":"classes/networking/#p2psessionerror","title":"P2PSessionError","text":"Enumerator Value P2P_SESSION_ERROR_NONE 0 P2P_SESSION_ERROR_NOT_RUNNING_APP 1 P2P_SESSION_ERROR_NO_RIGHTS_TO_APP 2 P2P_SESSION_ERROR_DESTINATION_NOT_LOGGED_ON 3 P2P_SESSION_ERROR_TIMEOUT 4 P2P_SESSION_ERROR_MAX 5"},{"location":"classes/networking/#snetsocketconnectiontype","title":"SNetSocketConnectionType","text":"Enumerator Value NET_SOCKET_CONNECTION_TYPE_NOT_CONNECTED 0 NET_SOCKET_CONNECTION_TYPE_UDP 1 NET_SOCKET_CONNECTION_TYPE_UDP_RELAY 2"},{"location":"classes/networking/#snetsocketstate","title":"SNetSocketState","text":"Enumerator Value NET_SOCKET_STATE_INVALID 0 NET_SOCKET_STATE_CONNECTED 1 NET_SOCKET_STATE_INITIATED 10 NET_SOCKET_STATE_LOCAL_CANDIDATE_FOUND 11 NET_SOCKET_STATE_RECEIVED_REMOTE_CANDIDATES 12 NET_SOCKET_STATE_CHALLENGE_HANDSHAKE 15 NET_SOCKET_STATE_DISCONNECTING 21 NET_SOCKET_STATE_LOCAL_DISCONNECT 22 NET_SOCKET_STATE_TIMEOUT_DURING_CONNECT 23 NET_SOCKET_STATE_REMOTE_END_DISCONNECTED 24 NET_SOCKET_STATE_BROKEN 25"},{"location":"classes/networking_messages/","title":"Networking Messages","text":"<p>Networking API intended to make it easy to port non-connection-oriented code to take advantage of P2P connectivity and Steam Datagram Relay. These are part of the newer networking classes; not to be confused with the older, now-deprecated Networking class.</p> <p>Only available in the main GodotSteam branches and GodotSteam Server branches</p>"},{"location":"classes/networking_messages/#functions","title":"Functions","text":""},{"location":"classes/networking_messages/#acceptsessionwithuser","title":"acceptSessionWithUser","text":"<p>acceptSessionWithUser( <code>uint64_t</code> remote_steam_id )</p> <p>Call this in response to a network_messages_session_request callback. network_messages_session_request callbacks are posted when a user tries to send you a message, and you haven't tried to talk to them first. If you don't want to talk to them, just ignore the request. If the user continues to send you messages, network_messages_session_request callbacks will continue to be posted periodically.</p> <p>Returns false if there is no session with the user pending or otherwise. If there is an existing active session, this function will return true, even if it is not pending.</p> <p>Calling sendMessageToUser will implicitly accept any pending session request to that user.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_messages/#closechannelwithuser","title":"closeChannelWithUser","text":"<p>closeChannelWithUser( <code>uint64_t</code> remote_steam_id, <code>int</code> channel )</p> <p>Call this  when you're done talking to a user on a specific channel. Once all open channels to a user have been closed, the open session to the user will be closed, and any new data from this user will trigger a network_messages_session_request callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_messages/#closesessionwithuser","title":"closeSessionWithUser","text":"<p>closeSessionWithUser( <code>uint64_t</code> remote_steam_id )</p> <p>Call this when you're done talking to a user to immediately free up resources under-the-hood. If the remote user tries to send data to you again, another network_messages_session_request callback will be posted.</p> <p>Note that sessions that go unused for a few minutes are automatically timed out.</p> <p>Returns: bool.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_messages/#getsessionconnectioninfo","title":"getSessionConnectionInfo","text":"<p>getSessionConnectionInfo<code>uint64_t</code> remote_steam_id, <code>bool</code> get_connection, <code>bool</code> get_status )</p> <p>Returns information about the latest state of a connection, if any, with the given peer. Primarily intended for debugging purposes, but can also be used to get more detailed failure information.</p> <p>Returns the value of connection state or 0 if no connection exists with specified peer. You may pass false for either get_connection or get_status if you do not need the corresponding details. Note that sessions time out after a while, so if a connection fails, or sendMessageToUser returns 3, you cannot wait indefinitely to obtain the reason for failure.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li> <p>state (int) with values being:</p> <ul> <li>0 - none</li> <li>1 - connecting</li> <li>2 - finding route</li> <li>3 - connected</li> <li>4 - closed by peer</li> <li>5 - problem detected locally</li> <li>-1 - wait</li> <li>-2 - linger</li> <li>-3 - dead</li> </ul> </li> </ul> <p>If get_connection is true:</p> <ul> <li>identity (uint64_t)</li> <li>user_data (uint64_t)</li> <li>listen_socket (uint32)</li> <li>remote_address (string)</li> <li>remote_pop (uint32)</li> <li>pop_relay (uint32)</li> <li>connection_state (int); same as above states</li> <li>end_reason (int)</li> <li>end_debug (string)</li> <li>debug_description (string)</li> <li>info_flags (int)</li> </ul> <p>If get_status is true:</p> <ul> <li>ping (int)</li> <li>local_quality (float)</li> <li>remote_quality (float)</li> <li>packets_out_per_second (float)</li> <li>bytes_out_per_second (float)</li> <li>packets_in_per_second (float)</li> <li>bytes_in_per_second (float)</li> <li>send_rate (int)</li> <li>pending_unreliable (int)</li> <li>pending_reliable (int)</li> <li>send_unacknowledged_reliable (int)</li> <li>queue_time (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_messages/#receivemessagesonchannel","title":"receiveMessagesOnChannel","text":"<p>receiveMessagesOnChannel( <code>int</code> channel, <code>int</code> max_messages )</p> <p>Reads the next message that has been sent from another user via sendMessageToUser on the given channel. Returns number of messages returned into your list. (0 if no message are available on that channel.)</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>messages (dictionary)</li> </ul> <p>Contains the following keys:</p> <ul> <li>payload (string)</li> <li>size (int)</li> <li>connection (uint32)</li> <li>identity (uint64_t)</li> <li>receiver_user_data (uint64_t)</li> <li>time_received (uint64_t)</li> <li>message_number (uint64_t)</li> <li>channel (int)</li> <li>flags (int)</li> <li>sender_user_data (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_messages/#sendmessagetouser","title":"sendMessageToUser","text":"<p>sendMessageToUser( <code>uint64_t</code> remote_steam_id, <code>PoolByteArray</code> data, <code>int</code> flags, <code>int</code> channel )</p> <p>Sends a message to the specified host via identity_reference. If we don't already have a session with that user, a session is implicitly created. There might be some handshaking that needs to happen before we can actually begin sending message data. If this handshaking fails and we can't get through, an error will be posted via the callback network_messages_session_failed. There is no notification when the operation succeeds. (You should have the peer send a reply for this purpose.)</p> <p>Sending a message to a host will also implicitly accept any incoming connection from that host.</p> <p>flags is a bitmask of k_nSteamNetworkingSend_xxx options.</p> <p>channel is a routing number you can use to help route message to different systems. You'll have to call receiveMessagesOnChannel with the same channel number in order to retrieve the data on the other end.</p> <p>Using different channels to talk to the same user will still use the same underlying connection, saving on resources. If you don't need this feature, use 0. Otherwise, small integers are the most efficient.</p> <p>It is guaranteed that reliable messages to the same host on the same channel will be be received by the remote host (if they are received at all) exactly once, and in the same order that they were sent.</p> <p>No other order guarantees exist! In particular, unreliable messages may be dropped, received out of order with respect to each other and with respect to reliable data, or may be received multiple times. Messages on different channels are not guaranteed to be received in the order they were sent.</p> <p>A note for those familiar with TCP/IP ports, or converting an existing codebase that opened multiple sockets: You might notice that there is only one channel, and with TCP/IP each endpoint has a port number. You can think of the channel number as the destination port. If you need each message to also include a source port (so the recipient can route the reply), then just put that in your message. That is essentially how UDP works!</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_messages/#signals","title":"Signals","text":""},{"location":"classes/networking_messages/#network_messages_session_request","title":"network_messages_session_request","text":"<p>network_messages_session_request</p> <p>Posted when a remote host is sending us a message, and we do not already have a session with them.</p> <p>Returns:</p> <ul> <li>remote_steam_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_messages/#network_messages_session_failed","title":"network_messages_session_failed","text":"<p>network_messages_session_failed</p> <p>Posted when we fail to establish a connection, or we detect that communications have been disrupted it an unusual way. There is no notification when a peer proactively closes the session. (\"Closed by peer\" is not a concept of UDP-style communications, and Networking Messages is primarily intended to make porting UDP code easy.)</p> <p>Remember: callbacks are asynchronous. See notes on sendMessageToUser, and NETWORKING_SEND_AUTO_RESTART_BROKEN_SESSION in particular.</p> <p>Also, if a session times out due to inactivity, no callbacks will be posted. The only way to detect that this is happening is that querying the session state may return none, connecting, and findingroute again.</p> <p>Returns:</p> <ul> <li>reason (int)</li> <li>remote_steam_id (int)</li> <li>connection_state (int)</li> <li>debug_message (string)</li> </ul> <p>The returned reason integer will map to these enums: NetworkingConnectionEnd</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_messages/#enums","title":"Enums","text":""},{"location":"classes/networking_messages/#networkingconnectionend","title":"NetworkingConnectionEnd","text":"Enumerator Value CONNECTION_END_INVALID 0 CONNECTION_END_APP_MIN 1000 CONNECTION_END_MAX 1999 CONNECTION_END_APP_EXCEPTION_MIN 2000 CONNECTION_END_APP_EXCEPTION_MAX 2999 CONNECTION_END_LOCAL_MIN 3000 CONNECTION_END_LOCAL_OFFLINE_MODE 3001 CONNECTION_END_LOCAL_MANY_RELAY_CONNECTIVITY 3002 CONNECTION_END_LOCAL_HOSTED_sERVER_PRIMARY_RELAY 3003 CONNECTION_END_LOCAL_NETWORK_CONFIG 3004 CONNECTION_END_LOCAL_RIGHTS 3005 CONNECTION_END_LOCAL_MAX 3999 CONNECTION_END_REMOVE_MIN 4000 CONNECTION_END_REMOTE_TIMEOUT 4001 CONNECTION_END_REMOTE_BAD_CRYPT 4002 CONNECTION_END_REMOTE_BAD_CERT 4003 CONNECTION_END_REMOTE_NOT_LOGGED_IN 4004 CONNECTION_END_REMOTE_NOT_RUNNING_APP 4005 CONNECTION_END_BAD_PROTOCOL_VERSION 4006 CONNECTION_END_REMOTE_MAX 4999 CONNECTION_END_MISC_MIN 5000 CONNECTION_END_MISC_GENERIC 5001 CONNECTION_END_MISC_INTERNAL_ERROR 5002 CONNECTION_END_MISC_TIMEOUT 5003 CONNECTION_END_MISC_RELAY_CONNECTIVITY 5004 CONNECTION_END_MISC_STEAM_CONNECTIVITY 5005 CONNECTION_END_MISC_NO_RELAY_SESSIONS_TO_CLIENT 5006 CONNECTION_END_MISC_MAX 5999"},{"location":"classes/networking_sockets/","title":"Networking Sockets","text":"<p>These are part of the newer networking classes; not to be confused with the older, now-deprecated Networking class.</p> <p>Only available in the main GodotSteam branches and GodotSteam Server branches</p>"},{"location":"classes/networking_sockets/#functions","title":"Functions","text":""},{"location":"classes/networking_sockets/#acceptconnection","title":"acceptConnection","text":"<p>acceptConnection( <code>uint32</code> connection_handle )</p> <p>Accept an incoming connection that has been received on a listen socket.</p> <p>Returns: int</p>"},{"location":"classes/networking_sockets/#beginasyncrequestfakeip","title":"beginAsyncRequestFakeIP","text":"<p>beginAsyncRequestFakeIP( <code>int</code> num_ports )</p> <p>Begin asynchronous process of allocating a fake IPv4 address that other peers can use to contact us via P2P. IP addresses returned by this function are globally unique for a given app ID.</p> <p>Triggers a fake_ip_result callback.</p> <p>Returns: bool</p> <p>False if a request was already in progress, true if a new request was started.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#closeconnection","title":"closeConnection","text":"<p>closeConnection( <code>uint32</code> peer, <code>int</code> reason, <code>string</code> debug_message, <code>bool</code> linger )</p> <p>Disconnects from the remote host and invalidates the connection handle. Any unread data on the connection is discarded.</p> <p>reason is an application defined code that will be received on the other end and recorded (when possible) in backend analytics. The value should come from a restricted range. (See ESteamNetConnectionEnd.) If you don't need to communicate any information to the remote host, and do not want analytics to be able to distinguish \"normal\" connection terminations from \"exceptional\" ones, you may pass zero, in which case the generic value of CONNECTION_END_APP_MIN will be used.</p> <p>debug_message is an optional human-readable diagnostic string that will be received by the remote host and recorded (when possible) in backend analytics.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#closelistensocket","title":"closeListenSocket","text":"<p>closeListenSocket( <code>uint32</code> socket )</p> <p>Destroy a listen socket. All the connections that were accepted on the listen socket are closed ungracefully.</p> <p>Returns: bool</p>"},{"location":"classes/networking_sockets/#configureconnectionlanes","title":"configureConnectionLanes","text":"<p>configureConnectionLanes()</p> <p>Configure multiple outbound messages streams (\"lanes\") on a connection, and control head-of-line blocking between them. Messages within a given lane are always sent in the order they are queued, but messages from different lanes may be sent out of order. Each lane has its own message number sequence. The first message sent on each lane will be assigned the number 1.</p> <p>Each lane has a \"priority\". Lower priority lanes will only be processed when all higher-priority lanes are empty. The magnitudes of the priority values are not relevant, only their sort order. Higher numeric values take priority over lower numeric values.</p> <p>Each lane also is assigned a weight, which controls the approximate proportion of the bandwidth that will be consumed by the lane, relative to other lanes of the same priority. (This is assuming the lane stays busy. An idle lane does not build up \"credits\" to be be spent once a message is queued.) This value is only meaningful as a proportion, relative to other lanes with the same priority. For lanes with different priorities, the strict priority order will prevail, and their weights relative to each other are not relevant. Thus, if a lane has a unique priority value, the weight value for that lane is not relevant.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#connectbyipaddress","title":"connectByIPAddress","text":"<p>connectByIPAddress( <code>string</code> ip_address_with_port, <code>array</code> options )</p> <p>Creates a connection and begins talking to a \"server\" over UDP at the given IPv4 or IPv6 address.  The remote host must be listening with a matching call to createListenSocketIP on the specified port.</p> <p>A network_connection_status_changed callback will be triggered when we start connecting, and then another one on either timeout or successful connection.</p> <p>If the server does not have any identity configured, then their network address will be the only identity in use.  Or, the network host may provide a platform-specific identity with or without a valid certificate to authenticate that identity.  (These details will be contained in the network_connection_status_changed.)  It's up to your application to decide whether to allow the connection.</p> <p>By default, all connections will get basic encryption sufficient to prevent casual eavesdropping.  But note that without certificates (or a shared secret distributed through some other out-of-band mechanism), you don't have any way of knowing who is actually on the other end, and thus are vulnerable to man-in-the-middle attacks.</p> <p>If you need to set any initial config options, pass them here.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#connectp2p","title":"connectP2P","text":"<p>connectP2P( <code>uint64_t</code> remote_steam_id, <code>int</code> port, <code>array</code> options )</p> <p>Begin connecting to a server that is identified using a platform-specific identifier. This uses the default rendezvous service, which depends on the platform and library configuration. (E.g. on Steam, it goes through the steam backend.) The traffic is relayed over the Steam Datagram Relay network.</p> <p>If you use this, you probably want to call initRelayNetworkAccess when your app initializes. If you need to set any initial config options, pass them here.</p> <p>See SteamNetworkingConfigValue_t for more about why this is preferable to setting the options \"immediately\" after creation.</p> <p>Pass your options as an array of arrays; each sub-array containing:</p> <ul> <li>config value (int)</li> <li>data type (int)</li> <li>data value (int or string)</li> </ul> <p>Alternately you can pass an empty array.</p> <p>Returns: uint32 </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#connecttohosteddedicatedserver","title":"connectToHostedDedicatedServer","text":"<p>connectToHostedDedicatedServer( <code>uint64_t</code> remote_steam_id, <code>int</code> virtual_port, <code>array</code> options )</p> <p>Client call to connect to a server hosted in a Valve data center, on the specified virtual port. You must have placed a ticket for this server into the cache, or else this connect attempt will fail!</p> <p>Pass your options as an array of arrays; each sub-array containing:</p> <ul> <li>config value (int)</li> <li>data type (int)</li> <li>data value (int or string)</li> </ul> <p>Alternately you can pass an empty array.</p> <p>Returns: uint32 </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#createfakeudpport","title":"createFakeUDPPort","text":"<p>createFakeUDPPort( <code>int</code> fake_server_port)</p> <p>Get an interface that can be used like a UDP port to send/receive datagrams to a FakeIP address. This is intended to make it easy to port existing UDP-based code to take advantage of SDR.</p> <p>fake_server_port refers to the index of the port allocated using beginAsyncRequestFakeIP and is used to create \"server\" ports. You may call this before the allocation has completed. However, any attempts to send packets will fail until the allocation has succeeded. When the peer receives packets sent from this interface, the from address of the packet will be the globally-unique FakeIP. If you call this function multiple times and pass the same (nonnegative) fake port index, the same object will be returned, and this object is not reference counted.</p> <p>To create a \"client\" port (e.g. the equivalent of an ephemeral UDP port) pass -1. In this case, a distinct object will be returned for each call. When the peer receives packets sent from this interface, the peer will assign a FakeIP from its own locally-controlled namespace.</p> <p>Returns: void</p>"},{"location":"classes/networking_sockets/#createhosteddedicatedserverlistensocket","title":"createHostedDedicatedServerListenSocket","text":"<p>createHostedDedicatedServerListenSocket( <code>int</code> virtual_port, <code>array</code> options )</p> <p>Create a listen socket on the specified virtual port. The physical UDP port to use will be determined by the SDR_LISTEN_PORT environment variable. If a UDP port is not configured, this call will fail.</p> <p>This function should be used when you are using the ticket generator library to issue your own tickets. Clients connecting to the server on this virtual port will need a ticket, and they must connect using connectToHostedDedicatedServer.</p> <p>Pass your options as an array of arrays; each sub-array containing:</p> <ul> <li>config value (int)</li> <li>data type (int)</li> <li>data value (int or string)</li> </ul> <p>Alternately you can pass an empty array.</p> <p>Returns: uint32 </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#createlistensocketip","title":"createListenSocketIP","text":"<p>createListenSocketIP( <code>string</code> ip_address, <code>Array</code> options )</p> <p>Creates a \"server\" socket that listens for clients to connect to by calling connectByIPAddress, over ordinary UDP (IPv4 or IPv6)</p> <p>Pass your options as an array of arrays; each sub-array containing:</p> <ul> <li>config value (int)</li> <li>data type (int)</li> <li>data value (int or string)</li> </ul> <p>Alternately you can pass an empty array.</p> <p>Returns: uint32 </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#createlistensocketp2p","title":"createListenSocketP2P","text":"<p>createListenSocketP2P( <code>int</code> virtual_port, <code>array</code> options )</p> <p>Like createListenSocketIP, but clients will connect using connectP2P. The connection will be relayed through the Valve network.</p> <p>virtual_port specifies how clients can connect to this socket using connectP2P. It's very common for applications to only have one listening socket; in that case, use zero. If you need to open multiple listen sockets and have clients be able to connect to one or the other, then virtual_port should be a small integer (&lt;1000) unique to each listen socket you create.</p> <p>Pass your options as an array of arrays; each sub-array containing:</p> <ul> <li>config value (int)</li> <li>data type (int)</li> <li>data value (int or string)</li> </ul> <p>Alternately you can pass an empty array.</p> <p>Returns: uint32 </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#createlistensocketp2pfakeip","title":"createListenSocketP2PFakeIP","text":"<p>createListenSocketP2PFakeIP( <code>int</code> fake_port, <code>array</code> options )</p> <p>Create a listen socket that will listen for P2P connections sent to our FakeIP. A peer can initiate connections to this listen socket by calling connectByIPAddress.</p> <p>fake_port refers to the index of the fake port requested, not the actual port number. For example, pass 0 to refer to the first port in the reservation. You must call this only after calling beginAsyncRequestFakeIP. However, you do not need to wait for the request to complete before creating the listen socket.</p> <p>Pass your options as an array of arrays; each sub-array containing:</p> <ul> <li>config value (int)</li> <li>data type (int)</li> <li>data value (int or string)</li> </ul> <p>Alternately you can pass an empty array.</p> <p>Returns: uint32 </p>"},{"location":"classes/networking_sockets/#createpollgroup","title":"createPollGroup","text":"<p>createPollGroup()</p> <p>Create a new poll group.</p> <p>You should destroy the poll group when you are done using destroyPollGroup.</p> <p>Returns: uint32 </p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#createsocketpair","title":"createSocketPair","text":"<p>createSocketPair( <code>bool</code> loopback, <code>uint64_t</code> remote_steam_id1, <code>uint64_t</code> remote_steam_id2 )</p> <p>Create a pair of connections that are talking to each other, e.g. a loopback connection. This is very useful for testing, or so that your client/server code can work the same even when you are running a local \"server\".</p> <p>The two connections will immediately be placed into the connected state, and no callbacks will be posted immediately. After this, if you close either connection, the other connection will receive a callback, exactly as if they were communicating over the network. You must close both sides in order to fully clean up the resources!</p> <p>By default, internal buffers are used, completely bypassing the network, the chopping up of messages into packets, encryption, copying the payload, etc. This means that loopback packets, by default, will not simulate lag or loss. Passing true for loopback will cause the socket pair to send packets through the local network loopback device (127.0.0.1) on ephemeral ports. Fake lag and loss are supported in this case, and CPU time is expended to encrypt and decrypt.</p> <p>If you use real network loopback, this might be translated to the actual bound loopback port. Otherwise, the port will be zero.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>success (bool)</li> <li>connection1 (int)</li> <li>connection2 (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#destroypollgroup","title":"destroyPollGroup","text":"<p>destroyPollGroup( <code>uint32</code> poll_group )</p> <p>Destroy a poll group created with createPollGroup.</p> <p>If there are any connections in the poll group, they are removed from the group, and left in a state where they are not part of any poll group. Returns false if passed an invalid poll group handle.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#findrelayauthticketforserver","title":"findRelayAuthTicketForServer","text":"<p>findRelayAuthTicketForServer( <code>int</code> game_server, <code>int</code> port )</p> <p>Search cache for a ticket to talk to the server on the specified virtual port. If found, returns the number of seconds until the ticket expires, and optionally the complete cracked ticket. Returns 0 if we don't have a ticket.</p> <p>Currently not enabled; requires datagram header.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#flushmessagesonconnection","title":"flushMessagesOnConnection","text":"<p>flushMessagesOnConnection( <code>uint32</code> connection_handle )</p> <p>Flush any messages waiting on the Nagle timer and send them at the next transmission opportunity (often that means right now).</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#getauthenticationstatus","title":"getAuthenticationStatus","text":"<p>getAuthenticationStatus()</p> <p>Query our readiness to participate in authenticated communications. A network_authentication_status callback is posted any time this status changes, but you can use this function to query it at any time.</p> <p>Returns: int</p>"},{"location":"classes/networking_sockets/#getcertificaterequest","title":"getCertificateRequest","text":"<p>getCertificateRequest()</p> <p>Certificate provision by the application. On Steam, we normally handle all this automatically and you will not need to use these advanced functions.</p> <p>Get blob that describes a certificate request. You can send this to your game coordinator. Pass this blob to your game coordinator and call SteamDatagram_CreateCert.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>certificate (int)</li> <li>cert_size (int)</li> <li>error_message (string)</li> </ul>"},{"location":"classes/networking_sockets/#getconnectioninfo","title":"getConnectionInfo","text":"<p>getConnectionInfo( <code>uint32</code> connection_handle )</p> <p>Returns basic information about the high-level state of the connection. Returns false if the connection handle is invalid.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>identity (uint64_t)</li> <li>user_data (uint64)</li> <li>listen_socket (uint32)</li> <li>remote_address (string)</li> <li>remote_pop (uint32)</li> <li>pop_relay (uint32)</li> <li>connection_state (int)</li> <li>end_reason (int)</li> <li>end_debug (string)</li> <li>debug_description (string)</li> <li>info_flags (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#getconnectionname","title":"getConnectionName","text":"<p>getConnectionName( <code>int</code> peer )</p> <p>Fetch connection name into your buffer, which is at least nMaxLen bytes. Returns false if handle is invalid.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#getconnectionrealtimestatus","title":"getConnectionRealTimeStatus","text":"<p>GetConnectionRealTimeStatus( <code>uint32</code> connection_handle, <code>int</code> lanes, <code>bool</code> get_status )</p> <p>Returns a small set of information about the real-time state of the connection and the queue status of each lane.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li> <p>connection_status (dictionary):</p> <ul> <li>state (int)</li> <li>ping (int)</li> <li>local_quality (float)</li> <li>remote_quality (float)</li> <li>packets_out_per_second (float)</li> <li>bytes_out_per_second (float)</li> <li>packets_in_per_second (float)</li> <li>bytes_in_per_second (float)</li> <li>send_rate (int)</li> <li>pending_unreliable (int)</li> <li>pending_reliable (int)</li> <li>send_unacknowledged_reliable (int)</li> <li>queue_time (uint64_t)</li> </ul> </li> <li> <p>lanes_status (array):</p> <ul> <li>lane_status (dictionary):<ul> <li>pending_unreliable (int)</li> <li>pending_reliable (int)</li> <li>sent_unacknowledged_reliatble (int)</li> <li>queue_time (uint64_t)</li> </ul> </li> </ul> </li> </ul>"},{"location":"classes/networking_sockets/#getconnectionuserdata","title":"getConnectionUserData","text":"<p>getConnectionUserData( <code>uint32</code> peer )</p> <p>Fetch connection user data. Returns -1 if handle is invalid or if you haven't set any userdata on the connection.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#getdetailedconnectionstatus","title":"getDetailedConnectionStatus","text":"<p>getDetailedConnectionStatus( <code>uint32</code> connection_handle )</p> <p>Returns very detailed connection stats in diagnostic text format. Useful for dumping to a log, etc. The format of this information is subject to change.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>success (int)</li> <li>buffer (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#getfakeip","title":"getFakeIP","text":"<p>getFakeIP( <code>int</code> first_port )</p> <p>Return info about the FakeIP and port(s) that we have been assigned, if any.</p> <p>first_port is currently reserved and must be zero. Make sure and check result.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (int)</li> <li>identity_type (int)</li> <li>ip (string)</li> <li>ports (uint16)</li> </ul>"},{"location":"classes/networking_sockets/#getgamecoordinatorserverlogin","title":"getGameCoordinatorServerLogin","text":"<p>getGameCoordinatorServerLogin()</p> <p>Generate an authentication blob that can be used to securely login with your backend, using SteamDatagram_ParseHostedServerLogin. (See steamdatagram_gamecoordinator.h)</p> <p>Currently not enabled.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/networking_sockets/#gethosteddedicatedserveraddress","title":"getHostedDedicatedServerAddress","text":"<p>getHostedDedicatedServerAddress()</p> <p>Return info about the hosted server. This contains the PoPID of the server, and opaque routing information that can be used by the relays to send traffic to your server.</p> <p>Currently not enabled.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#gethosteddedicatedserverpopid","title":"getHostedDedicatedServerPOPId","text":"<p>getHostedDedicatedServerPOPId()</p> <p>Returns 0 if SDR_LISTEN_PORT is not set. Otherwise, returns the data center the server is running in. This will be k_SteamDatagramPOPID_dev in non-production envirionment.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#gethosteddedicatedserverport","title":"getHostedDedicatedServerPort","text":"<p>getHostedDedicatedServerPort()</p> <p>Returns the value of the SDR_LISTEN_PORT environment variable. This is the UDP server your server will be listening on. This will configured automatically for you in production environments.</p> <p>Returns: uint16</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#getlistensocketaddress","title":"getListenSocketAddress","text":"<p>getListenSocketAddress( <code>uint32</code> socket, <code>bool</code> with_port )</p> <p>Returns local IP and port that a listen socket created using CreateListenSocketIP is bound to. The <code>with_port</code> argument defaults to true.</p> <p>Returns: string</p> <p>Note: This is not how you find out your public IP that clients can connect to.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#getidentity","title":"getIdentity","text":"<p>getIdentity()</p> <p>Get the identity assigned to this interface.</p> <p>E.g. on Steam, this is the user's Steam ID, or for the gameserver interface, the Steam ID assigned to the gameserver. Returns false and sets the result to an invalid identity if we don't know our identity yet. (E.g. GameServer has not logged in. On Steam, the user will know their SteamID even if they are not signed into Steam.)</p> <p>Returns: string</p> <p>Notes: Was removed in GodotSteam 3.25 / 4.8.</p>"},{"location":"classes/networking_sockets/#getremotefakeipforconnection","title":"getRemoteFakeIPForConnection","text":"<p>getRemoteFakeIPForConnection( <code>uint32</code> connection_handle )</p> <p>If the connection was initiated using the \"FakeIP\" system, then we we can get an IP address for the remote host. If the remote host had a global FakeIP at the time the connection was established, this function will return that global IP.</p> <p>Otherwise, a FakeIP that is unique locally will be allocated from the local FakeIP address space, and that will be returned.</p> <p>This should also add the returning struct to your ip_addresses vector as fake_ip_address.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (int)</li> <li>ip_address (string)</li> <li>port (uint16)</li> <li>ip_type (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/networking_sockets/#initauthentication","title":"initAuthentication","text":"<p>initAuthentication()</p> <p>Indicate our desire to be ready participate in authenticated communications. If we are currently not ready, then steps will be taken to obtain the necessary certificates. (This includes a certificate for us, as well as any CA certificates needed to authenticate peers.)</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#receivemessagesonconnection","title":"receiveMessagesOnConnection","text":"<p>receiveMessagesOnConnection( <code>uint32</code> connection_handle, <code>int</code> max_messages )</p> <p>Fetch the next available message(s) from the connection, if any. Returns the number of messages returned into your array, up to max_messages. If the connection handle is invalid, -1 is returned. If no data is available, 0, is returned.</p> <p>Returns: array </p> <p>Contains a list of:</p> <ul> <li>messages (dictionary):</li> </ul> <p>Contains the following keys:</p> <ul> <li>payload (string)</li> <li>size (int)</li> <li>connection (int)</li> <li>identity (uint64_t)</li> <li>receiver_user_data (uint64_t)</li> <li>time_received (uint64_t)</li> <li>message_number (uint64_t)</li> <li>channel (int)</li> <li>flags (int)</li> <li>sender_user_data (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#receivemessagesonpollgroup","title":"receiveMessagesOnPollGroup","text":"<p>receiveMessagesOnPollGroup( <code>uint32</code> poll_group, <code>int</code> max_messages )</p> <p>Same as receiveMessagesOnConnection, but will return the next messages available on any connection in the poll group. Examine connection to know which connection. user_data might also be useful.</p> <p>Returns: array </p> <p>Contains a list of:</p> <ul> <li>messages (dictionary):</li> </ul> <p>Contains the following keys:</p> <ul> <li>payload (string)</li> <li>size (int)</li> <li>connection (int)</li> <li>identity (uint64_t)</li> <li>receiver_user_data (uint64_t)</li> <li>time_received (uint64_t)</li> <li>message_number (uint64_t)</li> <li>channel (int)</li> <li>flags (int)</li> <li>sender_user_data (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#receivedrelayauthticket","title":"receivedRelayAuthTicket","text":"<p>receivedRelayAuthTicket()</p> <p>Call this when you receive a ticket from your backend / matchmaking system. Puts the ticket into a persistent cache, and optionally returns the parsed ticket.</p> <p>Currently not enabled.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>game_server (string)</li> <li>authorized_client (string)</li> <li>public_ip (string)</li> <li>expiry (int32)</li> <li>routing (int)</li> <li>app_id (uint32)</li> <li>restrict_to_v_port (int)</li> <li>number_of_extras (int)</li> <li>extra_fields (vector)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#resetidentity","title":"resetIdentity","text":"<p>resetIdentity( <code>uint64_t</code> remote_steam_id )</p> <p>Reset the identity associated with this instance. Any open connections are closed. Any previous certificates, etc are discarded.</p> <p>Note: This function is not actually supported on Steam!  It is included for use on other platforms where the active user can sign out and a new user can sign in.</p> <p>Returns: void</p>"},{"location":"classes/networking_sockets/#runnetworkingcallbacks","title":"runNetworkingCallbacks","text":"<p>runNetworkingCallbacks()</p> <p>Invoke all callback functions queued for this interface. You don't need to call this if you are using Steam's callback dispatch mechanism run_callbacks.</p> <p>Returns: void</p>"},{"location":"classes/networking_sockets/#sendmessages","title":"sendMessages","text":"<p>sendMessages( <code>int</code> messages, <code>PoolByteArray</code> data, <code>uint32</code> connection_handle, <code>int</code> flags )</p> <p>Send one or more messages without copying the message payload. This is the most efficient way to send messages.</p> <p>Returns: array</p> <p>The array contains the message number that was assigned to the message if sending was successful.  If sending failed, then a negative Result value is placed into the array.  For example, the array will hold RESULT_INVALID_STATE / -k_EResultInvalidState if the connection was in an invalid state.</p> <p>Possible failure codes include:</p> <ul> <li>RESULT_INVALID_PARAM / k_EResultInvalidParam<ul> <li>invalid connection handle, or the individual message is too big; more than MAX_STEAM_PACKET_SIZE / k_cbMaxSteamNetworkingSocketsMessageSizeSend or 512 * 1024.</li> </ul> </li> <li>RESULT_INVALID_STATE / k_EResultInvalidState<ul> <li>Connection is in an invalid state</li> </ul> </li> <li>RESULT_NO_CONNECTION / k_EResultNoConnection<ul> <li>Connection has ended</li> </ul> </li> <li>RESULT_IGNORED / k_EResultIgnored<ul> <li>You used k_nSteamNetworkingSend_NoDelay, and the message was dropped because we were not ready to send it.</li> </ul> </li> <li>RESULT_LIMIT_EXCEEDED / k_EResultLimitExceeded</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#sendmessagetoconnection","title":"sendMessageToConnection","text":"<p>sendMessageToConnection( <code>int</code> connection_handle, <code>PoolByteArray</code> data, <code>int</code> flags )</p> <p>Send a message to the remote host on the specified connection.</p> <p>Returns: dictionary</p> <ul> <li>result (int)</li> <li>message_number (int64)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#setconnectionpollgroup","title":"setConnectionPollGroup","text":"<p>setConnectionPollGroup( <code>uint32</code> connection_handle, <code>uint32</code> pollGroup )</p> <p>Assign a connection to a poll group. Note that a connection may only belong to a single poll group. Adding a connection to a poll group implicitly removes it from any other poll group it is in.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#setconnectionname","title":"setConnectionName","text":"<p>setConnectionName( <code>uint32</code> peer, <code>string</code> name )</p> <p>Set a name for the connection, used mostly for debugging.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/networking_sockets/#signals","title":"Signals","text":""},{"location":"classes/networking_sockets/#fake_ip_result","title":"fake_ip_result","text":"<p>fake_ip_result</p> <p>A struct used to describe a \"fake IP\" we have been assigned to use as an identifier. This callback is posted when beginAsyncRequestFakeIP completes.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>identity (uint64_t)</li> <li>fake_ip (string)</li> <li>port_list (array)</li> </ul>"},{"location":"classes/networking_sockets/#network_authentication_status","title":"network_authentication_status","text":"<p>network_authentication_status</p> <p>This callback is posted whenever the state of our readiness changes.</p> <p>Returns:</p> <ul> <li>available (int)</li> <li>debug_message (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#network_connection_status_changed","title":"network_connection_status_changed","text":"<p>network_connection_status_changed</p> <p>This callback is posted whenever a connection is created, destroyed, or changes state. The m_info field will contain a complete description of the connection at the time the change occurred and the callback was posted. In particular, m_info.m_eState will have the new connection state.</p> <p>Returns:</p> <ul> <li>connect_handle (uint64_t)</li> <li>connection (dictionary)<ul> <li>identity (uint64_t)</li> <li>user_data (uint64_t)</li> <li>listen_socket (uint32)</li> <li>remote_address (string)</li> <li>remote_pop (uint32)</li> <li>pop_relay (uint32)</li> <li>connection_state (int)</li> <li>end_reason (string)</li> <li>end_debug (string)</li> <li>debug_description (string)</li> </ul> </li> <li>old_state (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_sockets/#enums","title":"Enums","text":""},{"location":"classes/networking_sockets/#networkingconfigvalue","title":"NetworkingConfigValue","text":"Enumerator Value NETWORKING_CONFIG_INVALID 0 NETWORKING_CONFIG_FAKE_PACKET_LOSS_SEND 2 NETWORKING_CONFIG_FAKE_PACKET_LOSS_RECV 3 NETWORKING_CONFIG_FAKE_PACKET_LAG_SEND 4 NETWORKING_CONFIG_FAKE_PACKET_LAG_RECV 5 NETWORKING_CONFIG_FAKE_PACKET_REORDER_SEND 6 NETWORKING_CONFIG_FAKE_PACKET_REORDER_RECV 7 NETWORKING_CONFIG_FAKE_PACKET_REORDER_TIME 8 NETWORKING_CONFIG_FAKE_PACKET_DUP_SEND 26 NETWORKING_CONFIG_FAKE_PACKET_DUP_REVC 27 NETWORKING_CONFIG_FAKE_PACKET_DUP_TIME_MAX 28 NETWORKING_CONFIG_TIMEOUT_INITIAL 24 NETWORKING_CONFIG_TIMEOUT_CONNECTED 25 NETWORKING_CONFIG_SEND_BUFFER_SIZE 9 NETWORKING_CONFIG_RECV_BUFFER_SIZE 47 NETWORKING_CONFIG_RECV_BUFFER_MESSAGES 48 NETWORKING_CONFIG_RECV_MAX_MESSAGE_SIZE 49 NETWORKING_CONFIG_RECV_MAX_SEGMENTS_PER_PACKET 50 NETWORKING_CONFIG_SEND_RATE_MIN 10 NETWORKING_CONFIG_SEND_RATE_MAX 11 NETWORKING_CONFIG_NAGLE_TIME 12 NETWORKING_CONFIG_IP_ALLOW_WITHOUT_AUTH 23 NETWORKING_CONFIG_SDR_CLIENT_CONSEC_PING_TIMEOUT_FAIL_INITIAL 19 NETWORKING_CONFIG_SDR_CLIENT_CONSEC_PING_TIMEOUT_FAIL 20 NETWORKING_CONFIG_SDR_CLIENT_MIN_PINGS_BEFORE_PING_ACCURATE 21 NETWORKING_CONFIG_SDR_CLIENT_SINGLE_SOCKET 22 NETWORKING_CONFIG_SDR_CLIENT_FORCE_RELAY_CLUSTER 29 NETWORKING_CONFIG_SDR_CLIENT_DEBUG_TICKET_ADDRESS 30 NETWORKING_CONFIG_SDR_CLIENT_FORCE_PROXY_ADDR 31 NETWORKING_CONFIG_LOG_LEVEL_ACK_RTT 13 NETWORKING_CONFIG_LOG_LEVEL_PACKET_DECODE 14 NETWORKING_CONFIG_LOG_LEVEL_MESSAGE 15 NETWORKING_CONFIG_LOG_LEVEL_PACKET_GAPS 16 NETWORKING_CONFIG_LOG_LEVEL_P2P_RENDEZVOUS 17 NETWORKING_CONFIG_LOG_LEVEL_SRD_RELAY_PINGS 18"},{"location":"classes/networking_sockets/#networkinggetconfigvalueresult","title":"NetworkingGetConfigValueResult","text":"Enumerator Value NETWORKING_GET_CONFIG_VALUE_BAD_VALUE -1 NETWORKING_GET_CONFIG_VALUE_BAD_SCOPE_OBJ -2 NETWORKING_GET_CONFIG_VALUE_BUFFER_TOO_SMALL -3 NETWORKING_GET_CONFIG_VALUE_OK 1 NETWORKING_GET_CONFIG_VALUE_OK_INHERITED 2 NETWORKING_GET_CONFIG_VALUE_FORCE_32BIT 0x7fffffff"},{"location":"classes/networking_sockets/#networkingconnectionstate","title":"NetworkingConnectionState","text":"Enumerator Value CONNECTION_STATE_NONE 0 CONNECTION_STATE_CONNECTING 1 CONNECTION_STATE_FINDING_ROUTE 2 CONNECTION_STATE_CONNECTED 3 CONNECTION_STATE_CLOSED_BY_PEER 4 CONNECTION_STATE_PROBLEM_DETECTED_LOCALLY 5 CONNECTION_STATE_FIN_WAIT -1 CONNECTION_STATE_LINGER -2 CONNECTION_STATE_DEAD -3 CONNECTION_STATE_FORCE32BIT 0x7fffffff"},{"location":"classes/networking_sockets/#networkingconnectionend","title":"NetworkingConnectionEnd","text":"Enumerator Value CONNECTION_END_INVALID 0 CONNECTION_END_APP_MIN 1000 CONNECTION_END_MAX 1999 CONNECTION_END_APP_EXCEPTION_MIN 2000 CONNECTION_END_APP_EXCEPTION_MAX 2999 CONNECTION_END_LOCAL_MIN 3000 CONNECTION_END_LOCAL_OFFLINE_MODE 3001 CONNECTION_END_LOCAL_MANY_RELAY_CONNECTIVITY 3002 CONNECTION_END_LOCAL_HOSTED_sERVER_PRIMARY_RELAY 3003 CONNECTION_END_LOCAL_NETWORK_CONFIG 3004 CONNECTION_END_LOCAL_RIGHTS 3005 CONNECTION_END_LOCAL_MAX 3999 CONNECTION_END_REMOVE_MIN 4000 CONNECTION_END_REMOTE_TIMEOUT 4001 CONNECTION_END_REMOTE_BAD_CRYPT 4002 CONNECTION_END_REMOTE_BAD_CERT 4003 CONNECTION_END_REMOTE_NOT_LOGGED_IN 4004 CONNECTION_END_REMOTE_NOT_RUNNING_APP 4005 CONNECTION_END_BAD_PROTOCOL_VERSION 4006 CONNECTION_END_REMOTE_MAX 4999 CONNECTION_END_MISC_MIN 5000 CONNECTION_END_MISC_GENERIC 5001 CONNECTION_END_MISC_INTERNAL_ERROR 5002 CONNECTION_END_MISC_TIMEOUT 5003 CONNECTION_END_MISC_RELAY_CONNECTIVITY 5004 CONNECTION_END_MISC_STEAM_CONNECTIVITY 5005 CONNECTION_END_MISC_NO_RELAY_SESSIONS_TO_CLIENT 5006 CONNECTION_END_MISC_MAX 5999"},{"location":"classes/networking_sockets/#networkingidentitytype","title":"NetworkingIdentityType","text":"Enumerator Value IDENTITY_TYPE_INVALID 0 IDENTITY_TYPE_STEAMID 16 IDENTITY_TYPE_IP_ADDRESS 1 IDENTITY_TYPE_GENERIC_STRING 2 IDENTITY_TYPE_GENERIC_BYTES 3 IDENTITY_TYPE_UNKNOWN_TYPE 4 IDENTITY_TYPE_XBOX_PAIRWISE 17 IDENTITY_TYPE_SONY_PSN 18 IDENTITY_TYPE_GOOGLE_STADIA 19 IDENTITY_TYPE_FORCE_32BIT 0x7fffffff"},{"location":"classes/networking_sockets/#networkingsocketsdebugoutputtype","title":"NetworkingSocketsDebugOutputType","text":"Enumerator Value NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_NONE 0 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_BUG 1 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_ERROR 2 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_IMPORTANT 3 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_WARNING 4 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_MSG 5 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_VERBOSE 6 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_DEBUG 7 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_EVERYTHING 8 NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_FORCE_32BIT 0x7fffffff"},{"location":"classes/networking_types/","title":"Networking Types","text":"<p>Miscellaneous types and functions used by networking APIs. These are part of the newer networking classes; not to be confused with the older, now-deprecated Networking class.</p> <p>These Networking Type functions are all unique to GodotSteam since we cannot work with C++ structs directly in GDscript. These will create networking identities to use with Networking Messages, Networking Sockets, and Networking Utils classes. Much like how it works in a C++ implementation, the struct must be created (with either addIdentity or addIPAddress) then it must be populated with data (Steam ID, IP address, etc.).</p> <p>For more information on using Networking Types for Networking Messages, look over the on_network_messages_session_request function in the Networking Tutorial to understand the flow of addIdentity, setIdentitySteamID64, &amp; acceptSessionWithUser before you call your Networking Messages functions.</p> <p>Only available in the main GodotSteam branches and GodotSteam Server branches</p> <p>This class no longer exists in GodotSteam as of versions 3.25 / 4.8</p>"},{"location":"classes/networking_types/#functions","title":"Functions","text":""},{"location":"classes/networking_types/#addidentity","title":"addIdentity","text":"<p>addIdentity( <code>string</code> reference_name )</p> <p>Create a new network identity struct and store it for use. When this network identity is used in other functions, you will always use the reference_name to use this struct.</p> <p>You will have to set the IP, Steam ID, string, or bytes with other functions below otherwise the identity is invalid.</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#addipaddress","title":"addIPAddress","text":"<p>addIPAddress( <code>string</code> refrence_name )</p> <p>Add a new IP address struct and store it for use. When this networking IP address is used in other functions, you will always use the <code>reference_name</code> to use this struct.</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#clearipaddress","title":"clearIPAddress","text":"<p>clearIPAddress( <code>string</code> reference_name )</p> <p>IP Address - Set everything to zero. E.g. [::]:0.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#clearidentity","title":"clearIdentity","text":"<p>clearIdentity( <code>string</code> reference_name )</p> <p>Clear a network identity's data.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#getgenericbytes","title":"getGenericBytes","text":"<p>getGenericBytes( <code>string</code> reference_name )</p> <p>Returns null if not generic bytes type.</p> <p>Returns: uint8</p>"},{"location":"classes/networking_types/#getgenericstring","title":"getGenericString","text":"<p>getGenericString( <code>string</code> reference_name )</p> <p>Returns null if not generic string type.</p> <p>Returns: string</p>"},{"location":"classes/networking_types/#getidentities","title":"getIdentities","text":"<p>getIdentities()</p> <p>Get a list of all known network identities.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>this_identity (dictionary)<ul> <li>reference_name (string)</li> <li>steam_id (uint64_t)</li> <li>type (int)</li> </ul> </li> </ul>"},{"location":"classes/networking_types/#getidentityipaddr","title":"getIdentityIPAddr","text":"<p>getIdentityIPAddr( <code>string</code> reference_name )</p> <p>Returns null if we are not an IP address.</p> <p>Returns: uint32</p>"},{"location":"classes/networking_types/#getidentitysteamid","title":"getIdentitySteamID","text":"<p>getIdentitySteamID( <code>string</code> reference_name )</p> <p>Return back a Steam ID32 or 0 if identity is not a Steam ID.</p> <p>Returns: uint32 </p>"},{"location":"classes/networking_types/#getidentitysteamid64","title":"getIdentitySteamID64","text":"<p>getIdentitySteamID64( <code>string</code> reference_name )</p> <p>Returns 0 if identity is not a Steam ID.</p> <p>Returns: uint64_t</p>"},{"location":"classes/networking_types/#getipaddresses","title":"getIPAddresses","text":"<p>getIPAddresses()</p> <p>Get a list of all IP address structs and their names.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>this_address (dictionary)<ul> <li>reference_name (string)</li> <li>localhost (bool)</li> <li>ip_address (uint32)</li> </ul> </li> </ul>"},{"location":"classes/networking_types/#getipv4","title":"getIPv4","text":"<p>getIPv4( <code>string</code> reference_name )</p> <p>Returns IP in host byte order (e.g. aa.bb.cc.dd as 0xaabbccdd). Returns 0 if IP is not mapped IPv4.</p> <p>Returns: uint32</p>"},{"location":"classes/networking_types/#getpsnid","title":"getPSNID","text":"<p>getPSNID( <code>string</code> reference_name )</p> <p>Retrieve this identity's Playstation Network ID.</p> <p>Returns: uint64 </p>"},{"location":"classes/networking_types/#getstadiaid","title":"getStadiaID","text":"<p>getStadiaID( <code>string</code> reference_name )</p> <p>Retrieve this identity's Google Stadia ID.</p> <p>Returns: uint64</p>"},{"location":"classes/networking_types/#getxboxpairwiseid","title":"getXboxPairwiseID","text":"<p>getXboxPairwiseID( <code>string</code> reference_name )</p> <p>Retrieve this identity's XBox pair ID.</p> <p>Returns: string</p>"},{"location":"classes/networking_types/#isaddresslocalhost","title":"isAddressLocalHost","text":"<p>isAddressLocalHost( <code>string</code> reference_name )</p> <p>Return true if this identity is localhost. (Either IPv6 ::1, or IPv4 127.0.0.1).</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#isidentityinvalid","title":"isIdentityInvalid","text":"<p>isIdentityInvalid( <code>string</code> reference_name )</p> <p>Return true if we are the invalid type. Does not make any other validity checks (e.g. is SteamID actually valid).</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#isidentitylocalhost","title":"isIdentityLocalHost","text":"<p>isIdentityLocalHost( <code>string</code> reference_name )</p> <p>Return true if this identity is localhost.</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#isipv4","title":"isIPv4","text":"<p>isIPv4( <code>string</code> reference_name )</p> <p>Return true if IP is mapped IPv4.</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#isipv6allzeros","title":"isIPv6AllZeros","text":"<p>isIPv6AllZeros( <code>string</code> reference_name )</p> <p>Return true if the IP is ::0. (Doesn't check port.).</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#parseipaddressstring","title":"parseIPAddressString","text":"<p>parseIPAddressString( <code>string</code> reference_name )</p> <p>Parse an IP address and optional port. If a port is not present, it is set to 0. (This means that you cannot tell if a zero port was explicitly specified.).</p> <p>Returns: string</p>"},{"location":"classes/networking_types/#parseidentitystring","title":"parseIdentityString","text":"<p>parseIdentityString( <code>string</code> reference_name )</p> <p>Parse back a string that was generated using ToString. If we don't understand the string, but it looks \"reasonable\" (it matches the pattern <code>type:&lt;type-data&gt;</code> and doesn't have any funky characters, etc), then we will return true, and the type is set to k_ESteamNetworkingIdentityType_UnknownType (0). False will only be returned if the string looks invalid.</p> <p>Returns: string</p>"},{"location":"classes/networking_types/#setgenericbytes","title":"setGenericBytes","text":"<p>setGenericBytes( <code>string</code> reference_name, <code>uint8</code> data )</p> <p>Returns false if invalid size.</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#setidentityipaddr","title":"setIdentityIPAddr","text":"<p>setIdentityIPAddr( <code>string</code> reference_name, <code>string</code> ip_address_name )</p> <p>Set to specified IP:port.</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#setidentitylocalhost","title":"setIdentityLocalHost","text":"<p>setIdentityLocalHost( <code>string</code> reference_name )</p> <p>Set to localhost. (We always use IPv6 ::1 for this, not 127.0.0.1).</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#setidentitysteamid","title":"setIdentitySteamID","text":"<p>setIdentitySteamID( <code>string</code> reference_name, <code>uint32</code> steam_id )</p> <p>Set a 32-bit Steam ID.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#setidentitysteamid64","title":"setIdentitySteamID64","text":"<p>setIdentitySteamID64( <code>string</code> reference_name, <code>uint64_t</code> steam_id )</p> <p>Takes SteamID as raw 64-bit number.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#setgenericstring","title":"setGenericString","text":"<p>setGenericString( <code>string</code> reference_name, <code>string</code> this_string )</p> <p>Returns false if invalid length.</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#setpsnid","title":"setPSNID","text":"<p>setPSNID( <code>string</code> reference_name, <code>uint64_t</code> psn_id )</p> <p>Set the Playstation Network ID for this identity.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#setstadiaid","title":"setStadiaID","text":"<p>setStadiaID( <code>string</code> reference_name, <code>uint64_t</code> stadia_id )</p> <p>Set the Google Stadia ID for this identity.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#setxboxpairwiseid","title":"setXboxPairwiseID","text":"<p>setXboxPairwiseID( <code>string</code> reference_name, <code>string</code> xbox_id )</p> <p>Set the Xbox Pairwise ID for this identity.</p> <p>Returns: bool</p>"},{"location":"classes/networking_types/#toidentitystring","title":"toIdentityString","text":"<p>toIdentityString( <code>string</code> reference_name )</p> <p>Print to a human-readable string. This is suitable for debug messages or any other time you need to encode the identity as a string. It has a URL-like format <code>type:&lt;type-data&gt;</code>. Your buffer should be at least k_cchMaxString (128) bytes big to avoid truncation.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#toipaddressstring","title":"toIPAddressString","text":"<p>toIPAddressString( <code>string</code> reference_name, <code>bool</code> with_port )</p> <p>Print to a string, with or without the port. Mapped IPv4 addresses are printed as dotted decimal (12.34.56.78), otherwise this will print the canonical form according to RFC5952. If you include the port, IPv6 will be surrounded by brackets, e.g. [::1:2]:80. Your buffer should be at least k_cchMaxString (128) bytes to avoid truncation.</p> <p>Returns: string</p>"},{"location":"classes/networking_types/#setipv4","title":"setIPv4","text":"<p>setIPv4( <code>string</code> reference_name, <code>uint32</code> ip, <code>uint16</code> port )</p> <p>Sets to IPv4 mapped address. IP and port are in host byte order.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#setipv6","title":"setIPv6","text":"<p>setIPv6( <code>string</code> reference_name, <code>uint8</code> ipv6, <code>uint16</code> port )</p> <p>Set IPv6 address. IP is interpreted as bytes, so there are no endian issues. (Same as inaddr_in6.) The IP can be a mapped IPv4 address.</p> <p>Returns: void</p>"},{"location":"classes/networking_types/#setipv6localhost","title":"setIPv6LocalHost","text":"<p>setIPv6LocalHost( <code>string</code> reference_name, <code>uint16</code> port )</p> <p>Set to the IPv6 localhost address ::1, and the specified port.</p> <p>Returns: void</p>"},{"location":"classes/networking_utils/","title":"Networking Utils","text":"<p>Miscellaneous networking utilities for checking the local networking environment and estimating pings. These are part of the newer networking classes; not to be confused with the older, now-deprecated Networking class.</p> <p>Only available in the main GodotSteam branches and GodotSteam Server branches</p>"},{"location":"classes/networking_utils/#functions","title":"Functions","text":""},{"location":"classes/networking_utils/#checkpingdatauptodate","title":"checkPingDataUpToDate","text":"<p>checkPingDataUpToDate( <code>float</code> max_age_in_seconds )</p> <p>Check if the ping data of sufficient recency is available, and if it's too old, start refreshing it.</p> <p>Please only call this function when you really do need to force an immediate refresh of the data. (For example, in response to a specific user input to refresh this information.) Don't call it \"just in case\", before every connection, etc. That will cause extra traffic to be sent for no benefit. The library will automatically refresh the information as needed.</p> <p>Returns: bool</p> <p>True if sufficiently recent data is already available. False if sufficiently recent data is not available. In this case, ping measurement is initiated, if it is not already active. (You cannot restart a measurement already in progress.)</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#convertpinglocationtostring","title":"convertPingLocationToString","text":"<p>convertPingLocationToString( <code>PoolByteArray</code> location )</p> <p>Convert a ping location into a text format suitable for sending over the wire. The format is a compact and human readable. However, it is subject to change so please do not parse it yourself.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#estimatepingtimebetweentwolocations","title":"estimatePingTimeBetweenTwoLocations","text":"<p>estimatePingTimeBetweenTwoLocations( <code>PoolByteArray</code> location1, <code>PoolByteArray</code> location2 )</p> <p>Estimate the round-trip latency between two arbitrary locations, in milliseconds. This is a conservative estimate, based on routing through the relay network. For most basic relayed connections, this ping time will be pretty accurate, since it will be based on the route likely to be actually used.</p> <p>If a direct IP route is used (perhaps via NAT traversal), then the route will be different, and the ping time might be better. Or it might actually be a bit worse! Standard IP routing is frequently suboptimal! But even in this case, the estimate obtained using this method is a reasonable upper bound on the ping time. (Also it has the advantage of returning immediately and not sending any packets.)</p> <p>In a few cases we might not able to estimate the route. In this case a negative value is returned. k_nSteamNetworkingPing_Failed means the reason was because of some networking difficulty. (Failure to ping, etc) k_nSteamNetworkingPing_Unknown is returned if we cannot currently answer the question for some other reason.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#estimatepingtimefromlocalhost","title":"estimatePingTimeFromLocalHost","text":"<p>estimatePingTimeFromLocalHost( <code>PoolByteArray</code> location )</p> <p>Same as estimatePingTimeBetweenTwoLocations, but assumes that one location is the local host. This is a bit faster, especially if you need to calculate a bunch of these in a loop to find the fastest one. In rare cases this might return a slightly different estimate than combining getLocalPingLocation with estimatePingTimeBetweenTwoLocations. That's because this function uses a slightly more complete set of information about what route would be taken.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getconfigvalue","title":"getConfigValue","text":"<p>  getConfigValue( <code>int</code> config_value, <code>int</code> scope_type, <code>uint32_t</code> connection_handle )</p> <p>Get a configuration value.</p> <p>For values to pass to config_value, check the SDK's listing.</p> <p>For values to pass to scope_type, check the SDK's listing.</p> <p>Returns: dictionary</p> <p>Contains the following keys: </p> <ul> <li>result (int), which may be:<ul> <li>-3: buffer too small</li> <li>-2: bad connection handle</li> <li>-1: bad value</li> <li>1: OK</li> <li>2: OK, inherited</li> </ul> </li> <li>type (int)</li> <li>value (PoolByteArray)</li> <li>buffer (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getconfigvalueinfo","title":"getConfigValueInfo","text":"<p>getConfigValueInfo( <code>int</code> config_value )</p> <p>Returns info about a configuration value. For values to pass to config_value, check the SDK's listing. next_value can be used to iterate through all of the known configuration values.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>type (int)</li> <li>scope (int)</li> <li>next_value (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getdirectpingtopop","title":"getDirectPingToPOP","text":"<p>getDirectPingToPOP( <code>uint32</code> pop_id )</p> <p>Get direct ping time to the relays at the point of presence.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getlocalpinglocation","title":"getLocalPingLocation","text":"<p>getLocalPingLocation()</p> <p>Return location info for the current host. Returns the approximate age of the data, in seconds, or -1 if no data is available. You can use this value in checkPingDataUpToDate.</p> <p>It takes a few seconds to initialize access to the relay network. If you call this very soon after calling initRelayNetworkAccess, the data may not be available yet.</p> <p>This always return the most up-to-date information we have available right now, even if we are in the middle of re-calculating ping times.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>location (PoolByteArray)</li> <li>age (float)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getlocaltimestamp","title":"getLocalTimestamp","text":"<p>getLocalTimestamp()</p> <p>A general purpose high resolution local timer with the following properties:</p> <ul> <li>Monotonicity is guaranteed.</li> <li>The initial value will be at least 24360030*1e6, i.e. about 30 days worth of microseconds. In this way, the timestamp value of 0 will always be at least \"30 days ago\". Also, negative numbers will never be returned.</li> <li>Wraparound / overflow is not a practical concern.</li> </ul> <p>If you are running under the debugger and stop the process, the clock might not advance the full wall clock time that has elapsed between calls. If the process is not blocked from normal operation, the timestamp values will track wall clock time, even if you don't call the function frequently.</p> <p>The value is only meaningful for this run of the process. Don't compare it to values obtained on another computer, or other runs of the same process.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getpingtodatacenter","title":"getPingToDataCenter","text":"<p>  getPingToDataCenter( <code>uint32</code> pop_id )</p> <p>Fetch ping time of best available relayed route from this host to the specified data center.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>pop_relay (uint32)</li> <li>ping (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getpopcount","title":"getPOPCount","text":"<p>getPOPCount()</p> <p>Get number of network points of presence in the config.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getpoplist","title":"getPOPList","text":"<p>getPOPList()</p> <p>Get list of all POP IDs. Returns the number of entries that were filled into your list.</p> <p>Returns: array of POP IDs.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#getrelaynetworkstatus","title":"getRelayNetworkStatus","text":"<p>getRelayNetworkStatus()</p> <p>Fetch current status of the relay network.</p> <p>relay_network_status is also a callback. It will be triggered on both the user and gameserver interfaces any time the status changes, or ping measurement starts or stops.</p> <p>Returns: int which can be:</p> <ul> <li>-102 - cannot try</li> <li>-101 - failed</li> <li>-100 - previously worked, now there is a problem</li> <li>-10 - retrying</li> <li>0 - unknown</li> <li>1 - never tried</li> <li>2 - waiting</li> <li>3 - attempting</li> <li>100 - current</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#initrelaynetworkaccess","title":"initRelayNetworkAccess","text":"<p>initRelayNetworkAccess()</p> <p>If you know that you are going to be using the relay network (for example, because you anticipate making P2P connections), call this to initialize the relay network. If you do not call this, the initialization will be delayed until the first time you use a feature that requires access to the relay network, which will delay that first access.</p> <p>You can also call this to force a retry if the previous attempt has failed. Performing any action that requires access to the relay network will also trigger a retry, and so calling this function is never strictly necessary, but it can be useful to call it a program launch time, if access to the relay network is anticipated. Use getRelayNetworkStatus or listen for relay_network_status callbacks to know when initialization has completed. Typically initialization completes in a few seconds.</p> <p>Returns: void</p> <p>Note: dedicated servers hosted in known data centers do not need to call this, since they do not make routing decisions. However, if the dedicated server will be using P2P functionality, it will act as a \"client\" and this should be called.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#parsepinglocationstring","title":"parsePingLocationString","text":"<p>parsePingLocationString( <code>string</code> location_string )</p> <p>Parse back location_string string. Returns false if we couldn't understand the string.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>success (bool)</li> <li>ping_location (PoolByeArray)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#setconnectionconfigvaluefloat","title":"setConnectionConfigValueFloat","text":"<p>  setConnectionConfigValueFloat( <code>uint32</code> connection, <code>int</code> config, <code>float</code> value )</p> <p>Set a configuration value.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#setconnectionconfigvalueint32","title":"setConnectionConfigValueInt32","text":"<p>setConnectionConfigValueInt32( <code>uint32</code> connection, <code>int</code> config, <code>int32</code> value )</p> <p>Set a configuration value.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#setconnectionconfigvaluestring","title":"setConnectionConfigValueString","text":"<p>setConnectionConfigValueString( <code>uint32</code> connection, <code>int</code> config, <code>string</code> value )</p> <p>Set a configuration value.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#setconfigvalue","title":"setConfigValue","text":"<p>setConfigValue( <code>int</code> setting, <code>int</code> scope_type, <code>int</code> data_type )</p> <p>Set a configuration value.</p> <p>Currently not enabled. Use setConnectionConfigValueFloat, setConnectionConfigValueInt32, setConnectionConfigValueString, setGlobalConfigValueFloat, setGlobalConfigValueInt32, or setGlobalConfigValueString functions.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#setglobalconfigvaluefloat","title":"setGlobalConfigValueFloat","text":"<p>setGlobalConfigValueFloat( <code>int</code> config, <code>float</code> value )</p> <p>Set a configuration value.</p> <p>Returns: bool</p> <pre><code>[:fontawesome-brands-steam: Read more in the official Steamworks SDK documentation](https://partner.steamgames.com/doc/api/ISteamNetworkingUtils#shortcuts){ .md-button .md-button--store target=\"_blank\" }\n</code></pre>"},{"location":"classes/networking_utils/#setglobalconfigvalueint32","title":"setGlobalConfigValueInt32","text":"<p>setGlobalConfigValueInt32( <code>int</code> config, <code>int32</code> value )</p> <p>Set a configuration value.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#setglobalconfigvaluestring","title":"setGlobalConfigValueString","text":"<p>setGlobalConfigValueString( <code>int</code> config, <code>string</code> value )</p> <p>Set a configuration value.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/networking_utils/#signals","title":"Signals","text":""},{"location":"classes/networking_utils/#relay_network_status","title":"relay_network_status","text":"<p>relay_network_status</p> <p>A struct used to describe our readiness to use the relay network.</p> <p>Returns:</p> <ul> <li>available (int)</li> <li>ping_measurement (int)</li> <li>available_config (int)</li> <li>available_relay (int)</li> <li>debug_message (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/networking_utils/#enums","title":"Enums","text":""},{"location":"classes/networking_utils/#networkingavailability","title":"NetworkingAvailability","text":"Enumerator Value NETWORKING_AVAILABILITY_CANNOT_TRY -102 NETWORKING_AVAILABILITY_FAILED -101 NETWORKING_AVAILABILITY_PREVIOUSLY -100 NETWORKING_AVAILABILITY_UNKNOWN 0 NETWORKING_AVAILABILITY_NEVER_TRIED 1 NETWORKING_AVAILABILITY_WAITING 2 NETWORKING_AVAILABILITY_ATTEMPTING 3 NETWORKING_AVAILABILITY_CURRENT 100 NETWORKING_AVAILABILITY_FORCE_32BIT 0x7fffffff"},{"location":"classes/networking_utils/#networkingconfigscope","title":"NetworkingConfigScope","text":"Enumerator Value NETWORKING_CONFIG_SCOPE_GLOBAL 1 NETWORKING_CONFIG_SCOPE_SOCKETS_INTERFACE 2 NETWORKING_CONFIG_SCOPE_LISTEN_SOCKET 3 NETWORKING_CONFIG_SCOPE_CONNECTION 4 NETWORKING_CONFIG_SCOPE_FORCE_32BIT 0x7fffffff"},{"location":"classes/networking_utils/#networkingconfigdatatype","title":"NetworkingConfigDataType","text":"Enumerator Value NETWORKING_CONFIG_TYPE_INT32 1 NETWORKING_CONFIG_TYPE_INT64 2 NETWORKING_CONFIG_TYPE_FLOAT 3 NETWORKING_CONFIG_TYPE_STRING 4 NETWORKING_CONFIG_TYPE_FUNCTION_PTR 5 NETWORKING_CONFIG_TYPE_FORCE_32BIT 0x7fffffff"},{"location":"classes/parental_settings/","title":"Parental Settings","text":"<p>Only available in the main GodotSteam branches</p>"},{"location":"classes/parental_settings/#functions","title":"Functions","text":""},{"location":"classes/parental_settings/#isappblocked","title":"isAppBlocked","text":"<p>isAppBlocked( <code>uint32</code> app_id )</p> <p>Check if the given app is blocked by parental settings.</p> <p>Returns: bool</p>"},{"location":"classes/parental_settings/#isappinblocklist","title":"isAppInBlockList","text":"<p>isAppInBlockList( <code>uint32</code> app_id )</p> <p>Check if this app is in the block list.</p> <p>Returns: bool</p>"},{"location":"classes/parental_settings/#isfeatureblocked","title":"isFeatureBlocked","text":"<p>isFeatureBlocked( <code>int</code> feature )</p> <p>Check if the given feature is blocked by parental settings.</p> <p>Returns: bool</p>"},{"location":"classes/parental_settings/#isfeatureinblocklist","title":"isFeatureInBlockList","text":"<p>isFeatureInBlockList( <code>int</code> feature )</p> <p>Check if the given feature is in the block list.</p> <p>Returns: bool</p>"},{"location":"classes/parental_settings/#isparentallockenabled","title":"isParentalLockEnabled","text":"<p>isParentalLockEnabled()</p> <p>Check if the parental lock is enabled.</p> <p>Returns: bool</p>"},{"location":"classes/parental_settings/#isparentallocklocked","title":"isParentalLockLocked","text":"<p>isParentalLockLocked()</p> <p>Check if the parental lock is actually locked.</p> <p>Returns: bool</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/parental_settings/#signals","title":"Signals","text":""},{"location":"classes/parental_settings/#parental_setting_changed","title":"parental_setting_changed","text":"<p>parental_setting_changed</p> <p>Callback for querying UGC.</p> <p>Returns: nothing</p>"},{"location":"classes/parental_settings/#enums","title":"Enums","text":""},{"location":"classes/parental_settings/#parentalfeature","title":"ParentalFeature","text":"Enumerator Value FEATURE_INVALID 0 FEATURE_STORE 1 FEATURE_COMMUNITY 2 FEATURE_PROFILE 3 FEATURE_FRIENDS 4 FEATURE_NEWS 5 FEATURE_TRADING 6 FEATURE_SETTINGS 7 FEATURE_CONSOLE 8 FEATURE_BROWSER 9 FEATURE_PARENTAL_SETUP 10 FEATURE_LIBRARY 11 FEATURE_TEST 12 FEATURE_SITE_LICENSE 13 FEATURE_KIOSK_MODE 14 FEATURE_MAX"},{"location":"classes/parties/","title":"Parties","text":"<p>Only available in the main GodotSteam branches</p>"},{"location":"classes/parties/#functions","title":"Functions","text":""},{"location":"classes/parties/#cancelreservation","title":"cancelReservation","text":"<p>cancelReservation( <code>uint64_t</code> beacon_id, <code>uint64_t</code> steam_id )</p> <p>To cancel a reservation (due to timeout or user input), call this. Steam will open a new reservation slot.</p> <p>Returns: void</p> <p>Note: The user may already be in-flight to your game, so it's possible they will still connect and try to join your party.</p>"},{"location":"classes/parties/#changenumopenslots","title":"changeNumOpenSlots","text":"<p>changeNumOpenSlots( <code>uint64_t</code> beacon_id, <code>uint32</code> open_slots )</p> <p>If a user joins your party through other matchmaking (perhaps a direct Steam friend, or your own matchmaking system), your game should reduce the number of open slots that Steam is managing through the party beacon. For example, if you created a beacon with five slots, and Steam sent you two reservation_notification callbacks, and then a third user joined directly, you would want to call changeNumOpenSlots with a value of 2 for open_slots. That value represents the total number of new users that you would like Steam to send to your party.</p> <p>Triggers a change_num_open_slots call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#createbeacon","title":"createBeacon","text":"<p>createBeacon( <code>uint32</code> open_slots, <code>uint64_t</code> location_id, <code>int</code> type, <code>string</code> connect_string, <code>string</code> metadata )</p> <p>Create a beacon. You can only create one beacon at a time. Steam will display the beacon in the specified location, and let up to open_slots users \"follow\" the beacon to your party.</p> <p>If users join your party through other matchmaking, adjust the number of remaining open slots using changeNumOpenSlots.</p> <p>Triggers a create_beacon call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#destroybeacon","title":"destroyBeacon","text":"<p>destroyBeacon( <code>uint6_t</code> beacon_id )</p> <p>Call this method to destroy the Steam party beacon. This will immediately cause Steam to stop showing the beacon in the target location. Note that any users currently in-flight may still arrive at your party expecting to join.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#getavailablebeaconlocations","title":"getAvailableBeaconLocations","text":"<p>getAvailableBeaconLocations( <code>uint32</code> max )</p> <p>Get the list of locations in which you can post a party beacon.</p> <p>Returns: array</p> <p>Contains a list of:</p> <ul> <li>beacon_data (dictionary)<ul> <li>type (int)</li> <li>location_id (uint64_t)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#getbeaconbyindex","title":"getBeaconByIndex","text":"<p>getBeaconByIndex( <code>uint32</code> index )</p> <p>Use with getNumActiveBeacons to iterate the active beacons visible to the current user. Argument [index is a zero-based index, so iterate over the range [0, getNumActiveBeacons() - 1]. The return is a beacon_id that can be used with getBeaconDetails to get information about the beacons suitable for display to the user.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#getbeacondetails","title":"getBeaconDetails","text":"<p>getBeaconDetails( <code>uint64_t</code> beacon_id )</p> <p>Get details about the specified beacon. You can use the Friends API to get further details about owner_id, and getBeaconLocationData to get further details about location_id. The metadata contents are specific to your game, and will be whatever was set (if anything) by the game process that created the beacon.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>beacon_id (uint64_t)</li> <li>owner_id (uint64_t)</li> <li>type (int)</li> <li>location_id (uint64_t)</li> <li>metadata (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#getbeaconlocationdata","title":"getBeaconLocationData","text":"<p>getBeaconLocationData( <code>int</code> location_id, <code>int</code> location_type, <code>int</code> location_data )</p> <p>Query general metadata for the given beacon location. For instance the Name, or the URL for an icon if the location type supports icons (for example, the icon for a Steam Chat Room Group).</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#getnumactivebeacons","title":"getNumActiveBeacons","text":"<p>getNumActiveBeacons()</p> <p>Get the number of active party beacons created by other users for your game, that are visible to the current user.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#joinparty","title":"joinParty","text":"<p>joinParty( <code>uint64_t</code> beacon_id )</p> <p>When the user indicates they wish to join the party advertised by a given beacon, call this method. On success, Steam will reserve a slot for this user in the party and return the necessary \"join game\" string to use to complete the connection.</p> <p>Triggers a join_party call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#onreservationcompleted","title":"onReservationCompleted","text":"<p>onReservationCompleted( <code>uint64_t</code> beacon_id, <code>uint64_t</code> steam_id )</p> <p>When a user follows your beacon, Steam will reserve one of the open party slots for them, and send your game a reservation_notification callback. When that user joins your party, call onReservationCompleted to notify Steam that the user has joined successfully.</p> <p>Triggers a reservation_notification callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/parties/#signals","title":"Signals","text":""},{"location":"classes/parties/#active_beacons_updated","title":"active_beacons_updated","text":"<p>active_beacons_updated</p> <p>Notification that the list of active beacons visible to the current user has changed.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#available_beacon_locations_updated","title":"available_beacon_locations_updated","text":"<p>available_beacon_locations_updated</p> <p>Notification that the list of available locations for posting a beacon has been updated. </p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#change_num_open_slots","title":"change_num_open_slots","text":"<p>change_num_open_slots</p> <p>Call result for changeNumOpenSlots.</p> <p>Returns:</p> <ul> <li>result (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#create_beacon","title":"create_beacon","text":"<p>create_beacon</p> <p>This callback is used as a call response for createBeacon. If successful, your beacon has been posted in the desired location and you may start receiving reservation_notification callbacks for users following the beacon.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>beacon_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#join_party","title":"join_party","text":"<p>join_party</p> <p>This callback is used as a call response for joinParty. On success, you will have reserved a slot in the beacon-owner's party, and should use connect_string to connect to their game and complete the process.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>beacon_id (uint64_t)</li> <li>steam_id (uint64_t)</li> <li>connect_string (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#reservation_notification","title":"reservation_notification","text":"<p>reservation_notification</p> <p>After creating a beacon, when a user \"follows\" that beacon Steam will send you this callback to know that you should be prepared for the user to join your game. When they do join, be sure to call onReservationCompleted to let Steam know.</p> <p>Returns:</p> <ul> <li>beacon_id (uint64_t)</li> <li>steam_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/parties/#enums","title":"Enums","text":""},{"location":"classes/parties/#steampartybeaconlocationtype","title":"SteamPartyBeaconLocationType","text":"Enumerator Value STEAM_PARTY_BEACON_LOCATIONTYPE_INVALID 0 STEAM_PARTY_BEACON_LOCATIONTYPE_CHAT_GROUP 1 STEAM_PARTY_BEACON_LOCATION_TYPE_MAX"},{"location":"classes/parties/#steampartybeaconlocationdata","title":"SteamPartyBeaconLocationData","text":"Enumerator Value STEAM_PARTY_BEACON_LOCATION_DATA 0 STEAM_PARTY_BEACON_LOCATION_DATA_NAME 1 STEAM_PARTY_BEACON_LOCATION_DATA_URL_SMALL STEAM_PARTY_BEACON_LOCATION_DATA_URL_MEDIUM STEAM_PARTY_BEACON_LOCATION_DATA_URL_LARGE"},{"location":"classes/remote_play/","title":"Remote Play","text":"<p>Functions that provide information about Steam Remote Play sessions, streaming your game content to another computer or to a Steam Link app or hardware. See\u00a0Steam Remote Play\u00a0for more information.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/remote_play/#functions","title":"Functions","text":""},{"location":"classes/remote_play/#getsessionclientformfactor","title":"getSessionClientFormFactor","text":"<p>getSessionClientFormFactor( <code>uint32</code> session_id )</p> <p>Get the form factor of the session client device.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_play/#getsessionclientname","title":"getSessionClientName","text":"<p>getSessionClientName( <code>uint64_t</code> session_id )</p> <p>Get the name of the session client device.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_play/#getsessionclientresolution","title":"getSessionClientResolution","text":"<p>getSessionClientResolution( <code>uint32</code> session_id )</p> <p>Get the resolution, in pixels, of the session client device. This is set to 0x0 if the resolution is not available.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>success (bool)</li> <li>x (int)</li> <li>y (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_play/#getsessioncount","title":"getSessionCount","text":"<p>getSessionCount()</p> <p>Get the number of currently connected Steam Remote Play sessions.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_play/#getsessionid","title":"getSessionID","text":"<p>getSessionID( <code>uint32</code> index )</p> <p>Get the currently connected Steam Remote Play session ID at the specified index.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_play/#getsessionsteamid","title":"getSessionSteamID","text":"<p>getSessionSteamID( <code>uint32</code> session_id )</p> <p>Get the Steam ID of the connected user.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_play/#sendremoteplaytogetherinvite","title":"sendRemotePlayTogetherInvite","text":"<p>sendRemotePlayTogetherInvite( <code>uint64_t</code> friend_id )</p> <p>Invite a friend to join the game using Remote Play Together.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_play/#startremoteplaytogether","title":"startRemotePlayTogether","text":"<p>startRemotePlayTogether( <code>bool</code> show_overlay )</p> <p>Start Remote Play Together and optionally show the UI in the overlay. This returns false if Remote Play Together can't be started or your game is not configured for Remote Play Together.</p> <p>Returns: bool</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/remote_play/#signals","title":"Signals","text":""},{"location":"classes/remote_play/#remote_play_session_connected","title":"remote_play_session_connected","text":"<p>remote_play_session_connected</p> <p>Called when a player connects to a remote play session.</p> <p>Returns:</p> <ul> <li>session_id (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_play/#remote_play_session_disconnected","title":"remote_play_session_disconnected","text":"<p>remote_play_session_disconnected</p> <p>Called when a player disconnects from a remote play session.</p> <p>Returns:</p> <ul> <li>session_id (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/","title":"Remote Storage","text":"<p>Provides functions for reading, writing, and accessing files which can be stored remotely in the Steam Cloud. See\u00a0Steam Cloud\u00a0for more information.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/remote_storage/#functions","title":"Functions","text":""},{"location":"classes/remote_storage/#beginfilewritebatch","title":"beginFileWriteBatch","text":"<p>beginFileWriteBatch()</p> <p>Use this along with endFileWriteBatch to wrap a set of local file writes/deletes that should be considered part of one single state change. For example, if saving game progress requires updating both savegame1.dat and maxprogress.dat, wrap those operations with calls to beginFileWriteBatch and endFileWriteBatch.</p> <p>These functions provide a hint to Steam which will help it manage the app's Cloud files. Using these functions is optional, however it will provide better reliability.</p> <p>Note that the functions may be used whether the writes are done using the Remote Storage API, or done directly to local disk (where AutoCloud is used).</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#endfilewritebatch","title":"endFileWriteBatch","text":"<p>endFileWriteBatch()</p> <p>Use this along with beginFileWriteBatch - see that documentation for more details.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filedelete","title":"fileDelete","text":"<p>fileDelete( <code>string</code> file )</p> <p>Deletes a file from the local disk, and propagates that delete to the cloud.</p> <p>This is meant to be used when a user actively deletes a file. Use fileForget if you want to remove a file from the Steam Cloud but retain it on the users local disk.</p> <p>When a file has been deleted it can be re-written with fileWrite to reupload it to the Steam Cloud.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#fileexists","title":"fileExists","text":"<p>fileExists( <code>string</code> file )</p> <p>Check if a remote file exists.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#fileforget","title":"fileForget","text":"<p>fileForget( <code>string</code> file )</p> <p>Deletes the file from remote storage, but leaves it on the local disk and remains accessible from the API.</p> <p>When you are out of Cloud space, this can be used to allow calls to fileWrite to keep working without needing to make the user delete files.</p> <p>How you decide which files to forget are up to you. It could be a simple Least Recently Used (LRU) queue or something more complicated.</p> <p>Requiring the user to manage their Cloud-ized files for a game, while it is possible to do, is never recommended. For instance, \"Which file would you like to delete so that you may store this new one?\" removes a significant advantage of using the Cloud in the first place: its transparency.</p> <p>Once a file has been deleted or forgotten, calling fileWrite will resynchronize it in the Cloud. Rewriting a forgotten file is the only way to make it persisted again.</p> <p>Returns: bool</p> <ul> <li>true\u00a0if the file exists and has been successfully forgotten; otherwise,\u00a0false.</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filepersisted","title":"filePersisted","text":"<p>filePersisted( <code>string</code> file )</p> <p>Checks if a specific file is persisted in the Steam Cloud.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#fileread","title":"fileRead","text":"<p>fileRead( <code>string</code> file, <code>uint32_t</code> data_to_read )</p> <p>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ret (bool)</li> <li>buf (PoolByteArray)</li> </ul> <p>Note:  This is a synchronous call and as such is a will block your calling thread on the disk IO, and will also block the SteamAPI, which can cause other threads in your application to block. To avoid \"hitching\" due to a busy disk on the client machine using fileReadAsync, the asynchronous version of this API is recommended.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filereadasync","title":"fileReadAsync","text":"<p>fileReadAsync( <code>string</code> file, <code>uint32</code> offset, <code>uint32_t</code> data_to_read )</p> <p>Starts an asynchronous read from a file. The offset and amount to read should be valid for the size of the file, as indicated by getFileSize or getFileTimestamp.</p> <p>Triggers a file_read_async_complete call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#fileshare","title":"fileShare","text":"<p>fileShare( <code>string</code> file )</p> <p>Share a file.</p> <p>Triggers a file_share_result call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filewrite","title":"fileWrite","text":"<p>fileWrite( <code>string</code> file, <code>PoolByteArray</code> data )</p> <p>Creates a new file, writes the bytes to the file, and then closes the file. If the target file already exists, it is overwritten.</p> <p>Returns: bool</p> <p>Note:  This is a synchronous call and as such is a will block your calling thread on the disk IO, and will also block the SteamAPI, which can cause other threads in your application to block. To avoid \"hitching\" due to a busy disk on the client machine using fileWriteAsync, the asynchronous version of this API is recommended.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filewriteasync","title":"fileWriteAsync","text":"<p>fileWriteAsync( <code>string</code> file, <code>PoolByteArray</code> data )</p> <p>Creates a new file and asynchronously writes the raw byte data to the Steam Cloud, and then closes the file. If the target file already exists, it is overwritten.</p> <p>Triggers a file_write_async_complete call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filewritestreamcancel","title":"fileWriteStreamCancel","text":"<p>fileWriteStreamCancel( <code>uint64_t</code> write_handle )</p> <p>Cancels a file write stream that was started by fileWriteStreamOpen.</p> <p>This trashes all of the data written and closes the write stream, but if there was an existing file with this name, it remains untouched.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filewritestreamclose","title":"fileWriteStreamClose","text":"<p>fileWriteStreamClose( <code>uint64_t</code> write_handle )</p> <p>Closes a file write stream that was started by fileWriteStreamOpen.</p> <p>This flushes the stream to the disk, overwriting the existing file if there was one.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filewritestreamopen","title":"fileWriteStreamOpen","text":"<p>fileWriteStreamOpen( <code>string</code> file )</p> <p>Creates a new file output stream allowing you to stream out data to the Steam Cloud file in chunks. If the target file already exists, it is not overwritten until fileWriteStreamClose has been called.</p> <p>To write data out to this stream you can use fileWriteStreamWriteChunk, and then to close or cancel you use fileWriteStreamClose and fileWriteStreamCancel respectively.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#filewritestreamwritechunk","title":"fileWriteStreamWriteChunk","text":"<p>fileWriteStreamWriteChunk( <code>uint64_t</code> write_handle, <code>PoolByteArray</code> data )</p> <p>Writes a blob of data to the file write stream.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getcachedugccount","title":"getCachedUGCCount","text":"<p>getCachedUGCCount()</p> <p>Gets the number of cached UGC.</p> <p>Returns: int32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getcachedugchandle","title":"getCachedUGCHandle","text":"<p>getCachedUGCHandle( <code>int32</code> content )</p> <p>Gets the cached UGC's handle.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getfilecount","title":"getFileCount","text":"<p>getFileCount()</p> <p>Gets the total number of local files synchronized by Steam Cloud.</p> <p>Used for enumeration with getFileNameAndSize.</p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getfilenameandsize","title":"getFileNameAndSize","text":"<p>getFileNameAndSize( <code>int</code> file )</p> <p>Gets the file name and size of a file from the index.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>name (string)</li> <li>size (int32_t)</li> </ul> <p>Note:  You must call getFileCount first to get the number of files.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getfilesize","title":"getFileSize","text":"<p>getFileSize( <code>string</code> file )</p> <p>Get the size of the current file.</p> <p>Returns: int32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getfiletimestamp","title":"getFileTimestamp","text":"<p>getFileTimestamp( <code>string</code> file )</p> <p>Get the timestamp of when the file was uploaded.</p> <p>Returns: int64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getlocalfilechange","title":"getLocalFileChange","text":"<p>getLocalFileChange( <code>int</code> file )</p> <p>After calling getLocalFileChangeCount, use this method to iterate over the changes. The changes described have already been made to local files. Your application should take appropriate action to reload state from disk, and possibly notify the user.</p> <p>For example: The local system had been suspended, during which time the user played elsewhere and uploaded changes to the Steam Cloud. On resume, Steam downloads those changes to the local system before resuming the application. The application receives an local_file_changed, and uses getLocalFileChangeCount and getLocalFileChange to iterate those changes. Depending on the application structure and the nature of the changes, the application could:</p> <ul> <li>Re-load game progress to resume at exactly the point where the user was when they exited the game on the other device</li> <li>Notify the user of any synchronized changes that don't require reloading</li> <li>Etc.</li> </ul> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>file (string)</li> <li>change_type (int)</li> <li>path_type (int)</li> </ul> <p>Note: only applies to applications flagged as supporting dynamic Steam Cloud sync.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getlocalfilechangecount","title":"getLocalFileChangeCount","text":"<p>getLocalFileChangeCount()</p> <p>When your application receives a local_file_changed, use this method to get the number of changes (file updates and file deletes) that have been made. You can then iterate the changes using getLocalFileChange.</p> <p>Returns: uint32_t</p> <p>Note: only applies to applications flagged as supporting dynamic Steam Cloud sync.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getquota","title":"getQuota","text":"<p>getQuota()</p> <p>Gets the number of bytes available, and used on the users Steam Cloud storage.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>total_bytes (uint64_t)</li> <li>available_bytes (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getsyncplatforms","title":"getSyncPlatforms","text":"<p>getSyncPlatforms( <code>string</code> file )</p> <p>Obtains the platforms that the specified file will synchronize to.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>bitwise (int)<ul> <li>0 - None</li> <li>1&lt;&lt;0 - Windows</li> <li>1&lt;&lt;1 - OSX</li> <li>1&lt;&lt;2 - PS3</li> <li>1&lt;&lt;3 - Linux</li> <li>1&lt;&lt;4 - Reserved</li> <li>0xffffffff - All</li> </ul> </li> <li>verbose (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getugcdetails","title":"getUGCDetails","text":"<p>getUGCDetails( <code>uint64_t</code> content )</p> <p>Gets metadata for a file after it has been downloaded. This is the same metadata given in the download_ugc_result call result.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>handle (uint64_t)</li> <li>app_id (uint32_t)</li> <li>size (int32)</li> <li>filename (string)</li> <li>owner_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#getugcdownloadprogress","title":"getUGCDownloadProgress","text":"<p>getUGCDownloadProgress( <code>uint64_t</code> content )</p> <p>Gets the amount of data downloaded so far for a piece of content. bytes_expected can be 0 if function returns false or if the transfer hasn't started yet, so be careful to check for that before dividing to get a percentage.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>bytes_downloaded (int32)</li> <li>bytes_expected (int32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#iscloudenabledforaccount","title":"isCloudEnabledForAccount","text":"<p>isCloudEnabledForAccount()</p> <p>Checks if the account wide Steam Cloud setting is enabled for this user; or if they disabled it in the Settings-&gt;Cloud dialog.</p> <p>Ensure that you are also checking isCloudEnabledForApp, as these two options are mutually exclusive.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#iscloudenabledforapp","title":"isCloudEnabledForApp","text":"<p>isCloudEnabledForApp()</p> <p>Checks if the per game Steam Cloud setting is enabled for this user; or if they disabled it in the Game Properties-&gt;Update dialog.</p> <p>Ensure that you are also checking isCloudEnabledForAccount, as these two options are mutually exclusive.</p> <p>It's generally recommended that you allow the user to toggle this setting within your in-game options, you can toggle it with setCloudEnabledForApp.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#setcloudenabledforapp","title":"setCloudEnabledForApp","text":"<p>setCloudEnabledForApp( <code>bool</code> enabled )</p> <p>Enable or disable Steam Cloud for this application. This must only ever be called as the direct result of the user explicitly requesting that it's enabled or not. This is typically accomplished with a checkbox within your in-game options.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#setsyncplatforms","title":"setSyncPlatforms","text":"<p>setSyncPlatforms( <code>string</code> file, <code>int</code> platform )</p> <p>Allows you to specify which operating systems a file will be synchronized to.</p> <p>Use this if you have a multiplatform game but have data which is incompatible between platforms.</p> <p>Files default to k_ERemoteStoragePlatformAll (0xffffffff) when they are first created. You can use the bitwise OR operator, \"|\" to specify multiple platforms.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#ugcdownload","title":"ugcDownload","text":"<p>ugcDownload( <code>uint64_t</code> content, <code>uint32</code> priority )</p> <p>Downloads a UGC file.</p> <p>A priority value of 0 will download the file immediately, otherwise it will wait to download the file until all downloads with a lower priority value are completed. Downloads with equal priority will occur simultaneously.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#ugcdownloadtolocation","title":"ugcDownloadToLocation","text":"<p>ugcDownloadToLocation( <code>uint64_t</code> content, <code>string</code> location, <code>uint32</code> priority )</p> <p>Downloads a UGC file to a specific location.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#ugcread","title":"ugcRead","text":"<p>ugcRead( <code>uint64_t</code> content, <code>int32</code> data_size, <code>uint32</code> offset, <code>int</code> action )</p> <p>After download, gets the content of the file.</p> <p>Returns: PoolByteArray</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/remote_storage/#signals","title":"Signals","text":""},{"location":"classes/remote_storage/#download_ugc_result","title":"download_ugc_result","text":"<p>download_ugc_result</p> <p>Response when downloading UGC.</p> <p>Returns:</p> <ul> <li> <p>result (int)</p> </li> <li> <p>download_data (dictionary)</p> <ul> <li>handle (uint64_t)</li> <li>app_id (uint32_t)</li> <li>size (int32)</li> <li>filename (string)</li> <li>owner_id (uint64_t)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#file_read_async_complete","title":"file_read_async_complete","text":"<p>file_read_async_complete</p> <p>Response when reading a file with fileReadAsync.</p> <p>Returns:</p> <ul> <li>handle (uint64_t)</li> <li>result (int)</li> <li>offset (iunt32)</li> <li>read (uint32)</li> <li>complete (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#file_share_result","title":"file_share_result","text":"<p>file_share_result</p> <p>Response to a file being shared.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>handle (uint64_t)</li> <li>name (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#file_write_async_complete","title":"file_write_async_complete","text":"<p>file_write_async_complete</p> <p>Response when writing a file asyncrounously with fileWriteAsync.</p> <p>Returns:</p> <ul> <li>result (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#local_file_changed","title":"local_file_changed","text":"<p>local_file_changed</p> <p>One or more files for this app have changed locally after syncing to remote session changes.</p> <p>Note: only posted if this happens during the local app session.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#subscribe_item","title":"subscribe_item","text":"<p>subscribe_item</p> <p>Called when a player attempts to subscribe to a Workshop item.</p> <p>Deprecated: only used with the deprecated Remote Storage based Workshop API.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#unsubscribe_item","title":"unsubscribe_item","text":"<p>unsubscribe_item</p> <p>Called when a player attempts to unsubscribe from a Workshop item.</p> <p>Deprecated: only used with the deprecated Remote Storage based Workshop API.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/remote_storage/#enums","title":"Enums","text":""},{"location":"classes/remote_storage/#remotestorageplatform","title":"RemoteStoragePlatform","text":"Enumerator Value REMOTE_STORAGE_PLATFORM_NONE 0 REMOTE_STORAGE_PLATFORM_WINDOWS (1&lt;&lt;0) REMOTE_STORAGE_PLATFORM_OSX (1&lt;&lt;1) REMOTE_STORAGE_PLATFORM_PS3 (1&lt;&lt;2) REMOTE_STORAGE_PLATFORM_LINUX (1&lt;&lt;3) REMOTE_STORAGE_PLATFORM_RESERVED2 (1&lt;&lt;4) REMOTE_STORAGE_PLATFORM_ALL 0XFFFFFFFF"},{"location":"classes/remote_storage/#remotestoragepublishedfilevisibility","title":"RemoteStoragePublishedFileVisibility","text":"Enumerator Value REMOTE_STORAGE_PUBLISHED_VISIBLITY_PUBLIC 0 REMOTE_STORAGE_PUBLISHED_VISIBLITY_FRIENDS_ONLY 1 REMOTE_STORAGE_PUBLISHED_VISIBLITY_PRIVATE 2"},{"location":"classes/remote_storage/#ugcreadaction","title":"UGCReadAction","text":"Enumerator Value UGC_READ_CONTINUE_READING_UNTIL_FINISHED 0 UGC_READ_CONTINUE_READING 1 UGC_READ_CLOSE 2"},{"location":"classes/remote_storage/#workshopenumerationtype","title":"WorkshopEnumerationType","text":"Enumerator Value WORKSHOP_ENUMERATION_TYPE_RANKED_BY_VOTE 0 WORKSHOP_ENUMERATION_TYPE_RECENT 1 WORKSHOP_ENUMERATION_TYPE_TRENDING 2 WORKSHOP_ENUMERATION_TYPE_FAVORITES_OF_FRIENDS 3 WORKSHOP_ENUMERATION_TYPE_VOTED_BY_FRIENDS 4 WORKSHOP_ENUMERATION_TYPE_CONTENT_BY_FRIENDS 5 WORKSHOP_ENUMERATION_TYPE_RECENT_FROM_FOLLOWED_USERS 6"},{"location":"classes/remote_storage/#workshopfileaction","title":"WorkshopFileAction","text":"Enumerator Value WORKSHOP_FILE_ACTION_PLAYED 0 WORKSHOP_FILE_ACTION_COMPLETED 1"},{"location":"classes/remote_storage/#workshopfiletype","title":"WorkshopFileType","text":"Enumerator Value WORKSHOP_FILE_TYPE_FIRST 0 WORKSHOP_FILE_TYPE_COMMUNITY 0 WORKSHOP_FILE_TYPE_MICROTRANSACTION 1 WORKSHOP_FILE_TYPE_COLLECTION 2 WORKSHOP_FILE_TYPE_ART 3 WORKSHOP_FILE_TYPE_VIDEO 4 WORKSHOP_FILE_TYPE_SCREENSHOT 5 WORKSHOP_FILE_TYPE_GAME 6 WORKSHOP_FILE_TYPE_SOFTWARE 7 WORKSHOP_FILE_TYPE_CONCEPT 8 WORKSHOP_FILE_TYPE_WEB_GUIDE 9 WORKSHOP_FILE_TYPE_INTEGRATED_GUIDE 10 WORKSHOP_FILE_TYPE_MERCH 11 WORKSHOP_FILE_TYPE_CONTROLLER_BINDING 12 WORKSHOP_FILE_TYPE_STEAMWORKS_ACCESS_INVITE 13 WORKSHOP_FILE_TYPE_STEAM_VIDEO 14 WORKSHOP_FILE_TYPE_GAME_MANAGED_ITEM 15 WORKSHOP_FILE_TYPE_MAX 16"},{"location":"classes/remote_storage/#workshopvideoprovider","title":"WorkshopVideoProvider","text":"Enumerator Value WORKSHOP_VIDEO_PROVIDER_NONE 0 WORKSHOP_VIDEO_PROVIDER_YOUTUBE 1"},{"location":"classes/remote_storage/#workshopvote","title":"WorkshopVote","text":"Enumerator Value WORKSHOP_VOTE_UNVOTED 0 WORKSHOP_VOTE_FOR 1 WORKSHOP_VOTE_AGAINST 2 WORKSHOP_VOTE_LATER 3"},{"location":"classes/remote_storage/#localfilechange","title":"LocalFileChange","text":"Enumerator Value LOCAL_FILE_CHANGE_INVALID 0 LOCAL_FILE_CHANGE_FILE_UPDATED 1 LOCAL_FILE_CHANGE_FILE_DELETED 2"},{"location":"classes/remote_storage/#filepathtype","title":"FilePathType","text":"Enumerator Value FILE_PATH_TYPE_INVALID 0 FILE_PATH_TYPE_ABSOLUTE 1 FILE_PATH_TYPE_API_FILENAME 2"},{"location":"classes/screenshots/","title":"Screenshots","text":"<p>Functions for adding screenshots to the user's screenshot library. See\u00a0Steam Screenshots\u00a0for more information.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/screenshots/#functions","title":"Functions","text":""},{"location":"classes/screenshots/#addscreenshottolibrary","title":"addScreenshotToLibrary","text":"<p>addScreenshotToLibrary( <code>string</code> filename, <code>string</code> thumbnail_filename, <code>int</code> width, <code>int</code> height )</p> <p>Adds a screenshot to the user's Steam screenshot library from disk.</p> <p>Triggers a screenshot_ready callback.</p> <p>Returns: uint32_t</p> <ul> <li>Returns <code>0</code> if the screenshot could not be saved.</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#addvrscreenshottolibrary","title":"addVRScreenshotToLibrary","text":"<p>addVRScreenshotToLibrary( <code>int</code> type, <code>string</code> filename, <code>string</code> vr_filename )</p> <p>Adds a VR screenshot to the user's Steam screenshot library from disk in the supported type. </p> <p>Triggers a screenshot_ready callback.</p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#hookscreenshots","title":"hookScreenshots","text":"<p>hookScreenshots( <code>bool</code> hook )</p> <p>Toggles whether the overlay handles screenshots when the user presses the screenshot hotkey, or if the game handles them. </p> <p>Hooking is disabled by default, and only ever enabled if you do so with this function. </p> <p>If the hooking is enabled, then the\u00a0screenshot_requested\u00a0callback will be sent if the user presses the hotkey or when\u00a0triggerScreenshot\u00a0is called. Then the game is expected to call\u00a0writeScreenshot\u00a0or\u00a0addScreenshotToLibrary\u00a0in response. </p> <p>You can check if hooking is enabled with\u00a0isScreenshotsHooked.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#isscreenshotshooked","title":"isScreenshotsHooked","text":"<p>isScreenshotsHooked()</p> <p>Checks if the app is hooking screenshots. </p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#setlocation","title":"setLocation","text":"<p>setLocation( <code>uint32_t</code> screenshot, <code>string</code> location )</p> <p>Sets optional metadata about a screenshot's location.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#tagpublishedfile","title":"tagPublishedFile","text":"<p>tagPublishedFile( <code>uint32_t</code> screenshot, <code>uint64_t</code> file_id )</p> <p>Tags a published file as being visible in the screenshot. </p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#taguser","title":"tagUser","text":"<p>tagUser( <code>uint32_t</code> screenshot, <code>uint64_t</code> steam_id )</p> <p>Tags a Steam user as being visible in the screenshot. You can tag up to the value declared by k_nScreenshotMaxTaggedUsers in a single screenshot. Tagging more users than that will just be discarded. This function has a built in delay before saving the tag which allows you to call it repeatedly for each item. You can get the handle to tag the screenshot once it has been successfully saved from the screenshot_ready callback or via the WriteScreenshot, AddScreenshotToLibrary, AddVRScreenshotToLibrary calls. </p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#triggerscreenshot","title":"triggerScreenshot","text":"<p>triggerScreenshot()</p> <p>Either causes the Steam Overlay to take a screenshot, or tells your screenshot manager that a screenshot needs to be taken. Depending on the value of\u00a0isScreenshotsHooked.</p> <p>Triggers a screenshot_requested callback if hooking has been enabled with hookScreenshots.</p> <p>Triggers a screenshot_ready callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#writescreenshot","title":"writeScreenshot","text":"<p>writeScreenshot( <code>PoolByteArray</code> rgb, <code>int</code> width, <code>int</code> height )</p> <p>Writes a screenshot to the user's Steam screenshot library.</p> <p>Triggers a screenshot_ready callback.</p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/screenshots/#signals","title":"Signals","text":""},{"location":"classes/screenshots/#screenshot_ready","title":"screenshot_ready","text":"<p>screenshot_ready</p> <p>A screenshot successfully written or otherwise added to the library and can now be tagged.</p> <p>Returns:</p> <ul> <li>handle (uint32_t)</li> <li>result (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#screenshot_requested","title":"screenshot_requested","text":"<p>screenshot_requested</p> <p>A screenshot has been requested by the user from the Steam screenshot hotkey. This will only be called if hookScreenshots has been enabled, in which case Steam will not take the screenshot itself.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/screenshots/#enums","title":"Enums","text":""},{"location":"classes/screenshots/#vrscreenshottype","title":"VRScreenshotType","text":"Enumerator Value VR_SCREENSHOT_TYPE_NONE 0 VR_SCREENSHOT_TYPE_MONO 1 VR_SCREENSHOT_TYPE_STEREO 2 VR_SCREENSHOT_TYPE_MONO_CUBE_MAP 3 VR_SCREENSHOT_TYPE_MONO_PANORAMA 4 VR_SCREENSHOT_TYPE_STEREO_PANORAMA 5"},{"location":"classes/timeline/","title":"Timeline","text":"<p>Only available in the main GodotSteam branches</p>"},{"location":"classes/timeline/#functions","title":"Functions","text":""},{"location":"classes/timeline/#addtimelineevent","title":"addTimelineEvent","text":"<p>addTimelineEvent( <code>string</code> icon, <code>string</code> title, <code>string</code> description, <code>int32_t</code> priority, <code>float</code> start_offset, <code>float</code> duration, <code>int</code> possible_clip )</p> <p>Use this to mark an event on the Timeline. The event can be instantaneous or take some amount of time to complete, depending on the value passed in duration.</p> <p>Returns: void</p>"},{"location":"classes/timeline/#cleartimelinestatedescription","title":"clearTimelineStateDescription","text":"<p>clearTimelineStateDescription( <code>float</code> time_delta )</p> <p>Removes the description set for the specific clip.</p> <p>Returns: void</p>"},{"location":"classes/timeline/#settimelinegamemode","title":"setTimelineGameMode","text":"<p>setTimelineGameMode( <code>int</code> mode )</p> <p>Changes the color of the timeline bar. See TimelineGameMode comments for how to use each value.</p> <p>Returns: void</p>"},{"location":"classes/timeline/#settimelinestatedescription","title":"setTimelineStateDescription","text":"<p>setTimelineStateDescription( <code>string</code> description, <code>float</code> time_delta )</p> <p>Sets a description for the current game state in the timeline. These help the user to find specific moments in the timeline when saving clips. Setting a new state description replaces any previous description.</p> <p>Returns: void</p>"},{"location":"classes/timeline/#enums","title":"Enums","text":""},{"location":"classes/timeline/#timelinegamemode","title":"TimelineGameMode","text":"Enumerator Value TIMELINE_GAME_MODE_INVALID 0 TIMELINE_GAME_MODE_PLAYING 1 TIMELINE_GAME_MODE_STAGING 2 TIMELINE_GAME_MODE_MENUS 3 TIMELINE_GAME_MODE_LOADING_SCREEN 4 TIMELINE_GAME_MODE_MAX"},{"location":"classes/timeline/#timelineeventclippriority","title":"TimelineEventClipPriority","text":"Enumerator Value TIMELINE_EVENT_CLIP_PRIORITY_INVALID 0 TIMELINE_EVENT_CLIP_PRIORITY_NONE 1 TIMELINE_EVENT_CLIP_PRIORITY_STANDARD 2 TIMELINE_EVENT_CLIP_PRIORITY_FEATURED 3"},{"location":"classes/ugc/","title":"UGC","text":"<p>Functions to create, consume, and interact with the\u00a0Steam Workshop.</p> <p>Available in both the main GodotSteam branches and GodotSteam Server branches</p>"},{"location":"classes/ugc/#functions","title":"Functions","text":""},{"location":"classes/ugc/#addappdependency","title":"addAppDependency","text":"<p>addAppDependency( <code>uint64_t</code> published_file_id, <code>uint32_t</code> app_id )</p> <p>Adds a dependency between the given item and the appid. This list of dependencies can be retrieved by calling getAppDependencies. This is a soft-dependency that is displayed on the web. It is up to the application to determine whether the item can actually be used or not.</p> <p>Triggers a add_app_dependency_result callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#addcontentdescriptor","title":"addContentDescriptor","text":"<p>addContentDescriptor( <code>uint64_t</code> update_handle, <code>int</code> descriptor_id )</p> <p>Add a content descriptor to a piece of UGC.</p> <p>Returns: bool</p> <p>Note: Valve has no documentation on this function currently.</p>"},{"location":"classes/ugc/#adddependency","title":"addDependency","text":"<p>addDependency( <code>int</code> published_file_id, <code>int</code> child_published_file_id )</p> <p>Adds a workshop item as a dependency to the specified item. If the published_file_id item is of type k_EWorkshopFileTypeCollection (2), than the child_published_file_id is simply added to that collection. Otherwise, the dependency is a soft one that is displayed on the web and can be retrieved via the ISteamUGC API using a combination of the numChildren key returned from getQueryUGCResult and getQueryUGCChildren.</p> <p>Triggers a add_ugc_dependency_result callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#addexcludedtag","title":"addExcludedTag","text":"<p>addExcludedTag( <code>uint64_t</code> query_handle, <code>string</code> tag_name )</p> <p>Adds a excluded tag to a pending UGC Query. This will only return UGC without the specified tag.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#additemkeyvaluetag","title":"addItemKeyValueTag","text":"<p>addItemKeyValueTag( <code>uint64_t</code> update_handle, <code>string</code> key, <code>string</code> value )</p> <p>Adds a key-value tag pair to an item. Keys can map to multiple different values (1-to-many relationship).</p> <p>Key names are restricted to alpha-numeric characters and the '_' character.</p> <p>Both keys and values cannot exceed 255 characters in length.</p> <p>Key-value tags are searchable by exact match only.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#additempreviewfile","title":"addItemPreviewFile","text":"<p>addItemPreviewFile( <code>uint64_t</code> query_handle, <code>string</code> preview_file, <code>int</code> type )</p> <p>Adds an additional preview file for the item.</p> <p>Then the format of the image should be one that both the web and the application (if necessary) can render, and must be under 1MB. Suggested formats include JPG, PNG and GIF.</p> <p>Returns: bool</p> <p>Note: Using 1 or 2 in type are not currently supported with this API. For YouTube videos you should use addItemPreviewVideo.</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#additempreviewvideo","title":"addItemPreviewVideo","text":"<p>addItemPreviewVideo( <code>uint64_t</code> query_handle, <code>string</code> video_id )</p> <p>Adds an additional video preview from YouTube for the item.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#additemtofavorites","title":"addItemToFavorites","text":"<p>addItemToFavorites( <code>uint32_t</code> app_id, <code>uint64_t</code> published_file_id )</p> <p>Adds a workshop item to the users favorites list.</p> <p>Triggers a user_favorite_items_list_changed callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#addrequiredkeyvaluetag","title":"addRequiredKeyValueTag","text":"<p>addRequiredKeyValueTag( <code>uint64_t</code> query_handle, <code>string</code> key, <code>string</code> value )</p> <p>Adds a required key-value tag to a pending UGC Query. This will only return workshop items that have a key  and a value.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#addrequiredtag","title":"addRequiredTag","text":"<p>addRequiredTag( <code>uint64_t</code> query_handle, <code>string</code> tag_name )</p> <p>Adds a required tag to a pending UGC Query. This will only return UGC with the specified tag.</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#addrequiredtaggroup","title":"addRequiredTagGroup","text":"<p>addRequiredTagGroup( <code>uint64_t</code> query_handle, <code>array</code> tag_array )</p> <p>Adds the requirement that the returned items from the pending UGC Query have at least one of the tags in the given set (logical \"or\"). For each tag group that is added, at least one tag from each group is required to be on the matching items.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#initworkshopforgameserver","title":"initWorkshopForGameServer","text":"<p>initWorkshopForGameServer( <code>uint32_t</code> workshop_depot_id )</p> <p>Lets game servers set a specific workshop folder before issuing any UGC commands.</p> <p>This is helpful if you want to support multiple game servers running out of the same install folder.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#createitem","title":"createItem","text":"<p>createItem( <code>uint32</code> app_id, <code>int</code> file_type )</p> <p>Creates a new workshop item with no content attached yet.</p> <p>Triggers a item_created callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#createqueryallugcrequest","title":"createQueryAllUGCRequest","text":"<p>createQueryAllUGCRequest( <code>int</code> query_type, <code>int</code> matching_type, <code>uint32_t</code> creator_id, <code>uint32_t</code> consumer_id, <code>int</code> page )</p> <p>Query for all matching UGC. You can use this to list all of the available UGC for your app.</p> <p>This will return up to 50 results. You can make subsequent calls to this function, increasing the page each time to get the next set of results.</p> <p>To query for the UGC associated with a single user you can use createQueryUserUGCRequest instead.</p> <p>Returns: uint64_t</p> <p>Note: Either consumer_id or creator_id must have a valid app ID.</p> <p>Note: You must release the handle returned by this function by calling releaseQueryUGCRequest when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#createqueryugcdetailsrequest","title":"createQueryUGCDetailsRequest","text":"<p>createQueryUGCDetailsRequest( <code>array</code> published_file_ids )</p> <p>Query for the details of specific workshop items.</p> <p>This will return up to 50 results.</p> <p>To query all the UGC for your app you can use createQueryAllUGCRequest instead.</p> <p>Returns: uint64_t</p> <p>Note: You must release the handle returned by this function by calling releaseQueryUGCRequest when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#createqueryuserugcrequest","title":"createQueryUserUGCRequest","text":"<p>createQueryUserUGCRequest( <code>uint64_t</code> steam_id, <code>int</code> list_type, <code>int</code> matching_ugc_type, <code>int</code> sort_order, <code>uint32_t</code> creator_id, <code>uint32_t</code> consumer_id, <code>int</code> page )</p> <p>Query UGC associated with a user. You can use this to list the UGC the user is subscribed to amongst other things.</p> <p>This will return up to 50 results.</p> <p>To query all the UGC for your app you can use createQueryAllUGCRequest instead.</p> <p>Returns: uint64_t</p> <p>Note: Either consumer_id or creator_id must have a valid app ID.</p> <p>Note: You must release the handle returned by this function by calling releaseQueryUGCRequest when you are done with it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#deleteitem","title":"deleteItem","text":"<p>deleteItem( <code>uint64_t</code> published_file_id )</p> <p>Deletes the item without prompting the user.</p> <p>Triggers a item_deleted callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#downloaditem","title":"downloadItem","text":"<p>downloadItem( <code>uint64_t</code> published_file_id, <code>bool</code> high_priority )</p> <p>Download new or update already installed item.</p> <p>If the return value is true then register and wait for the callback item_downloaded before calling getItemInstallInfo or accessing the workshop item on disk.</p> <p>If the user is not subscribed to the item (e.g. a Game Server using anonymous login), the workshop item will be downloaded and cached temporarily.</p> <p>If the workshop item has an item state of 8, then this function can be called to initiate the update. Do not access the workshop item on disk until the callback item_downloaded is called.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getappdependencies","title":"getAppDependencies","text":"<p>getAppDependencies( <code>uint64_t</code> published_file_id )</p> <p>Get the app dependencies associated with the given published_file_id. These are \"soft\" dependencies that are shown on the web. It is up to the application to determine whether an item can be used or not.</p> <p>Triggers a get_app_dependencies_result callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getitemdownloadinfo","title":"getItemDownloadInfo","text":"<p>getItemDownloadInfo( <code>uint64_t</code> file_id )</p> <p>Get info about a pending download of a workshop item that has 8 set.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ret (bool)</li> <li>downloaded (uint64_t)</li> <li>total (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getiteminstallinfo","title":"getItemInstallInfo","text":"<p>getItemInstallInfo( <code>uint64_t</code> file_id )</p> <p>Gets info about currently installed content on the disc for workshop items that have k_EItemStateInstalled (4) set.</p> <p>Calling this sets the \"used\" flag on the workshop item for the current player and adds it to their k_EUserUGCList_UsedOrPlayed (7) list.</p> <p>If k_EItemStateLegacyItem (2) is set then folder contains the path to the legacy file itself, not a folder.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ret (bool)</li> <li>size (int)</li> <li>folder (string)</li> <li>folder_size (uint32)</li> <li>timestamp (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getitemstate","title":"getItemState","text":"<p>getItemState( <code>uint64_t</code> published_file_id )</p> <p>Gets the current state of a workshop item on this client.</p> <p>Returns: uint32</p> <p>It should be one of the following:</p> <ul> <li>0 - None</li> <li>1 - Subscribed</li> <li>2 - Legacy</li> <li>4 - Installed</li> <li>8 - Update</li> <li>16 - Downloading</li> <li>32 - Pending</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getitemupdateprogress","title":"getItemUpdateProgress","text":"<p>getItemUpdateProgress( <code>uint64_t</code> update_handle )</p> <p>Gets the progress of an item update.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>status (int)</li> <li>processed (uint64)</li> <li>total (uint64)</li> </ul> <p>You may notice that data comes back in processed and total in status 2; unsure if this is a bug or intended.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getnumsubscribeditems","title":"getNumSubscribedItems","text":"<p>getNumSubscribedItems()</p> <p>Gets the total number of items the current user is subscribed to for the game or application.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugcadditionalpreview","title":"getQueryUGCAdditionalPreview","text":"<p>getQueryUGCAdditionalPreview( <code>uint64_t</code> query_handle, <code>uint32</code> index, <code>uint32</code> preview_index )</p> <p>Retrieve the details of an additional preview associated with an individual workshop item after receiving a querying UGC call result.</p> <p>You should call this in a loop to get the details of all the workshop items returned.</p> <p>Before calling this you should call getQueryUGCNumAdditionalPreviews to get number of additional previews.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>success (bool)</li> <li>handle (uint64_t)</li> <li>index (uint32)</li> <li>preview (uint32)</li> <li>url_or_video (string)</li> <li>filename (string)</li> <li>type (int)</li> </ul> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugcchildren","title":"getQueryUGCChildren","text":"<p>getQueryUGCChildren( <code>uint64_t</code> query_handle, <code>uint32</code> index, <code>int32_t</code> child_count )</p> <p>Retrieve the IDs of any child items of an individual workshop item after receiving a querying UGC call result. These items can either be a part of a collection or some other dependency (see addDependency).</p> <p>You should create published_file_id with num_children provided in returned dictionary after getting the UGC details with getQueryUGCResult.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>success (bool)</li> <li>handle (uint64_t)</li> <li>index (uint32)</li> <li>children (uint64_t)</li> </ul> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugccontentdescriptors","title":"getQueryUGCContentDescriptors","text":"<p>getQueryUGCContentDescriptors( <code>uint64_t</code> query_handle, <code>uint32</code> index, <code>uint32_t</code> max_entries )</p> <p>Get an UGC item's content descriptors for mature content.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (uint32_t)</li> <li>handle (uint64_t)</li> <li>index (uint32)</li> <li>descriptors (array)</li> </ul> <p>Descriptors array will contain a list of integers that correspond to the following UGC enums for descriptors:</p> <ul> <li>Nudity or sexual content - 1</li> <li>Frequent violence or gore - 2</li> <li>Adult only sexual content - 3</li> <li>Gratuitous sexual content - 4</li> <li>Any mature content - 5</li> </ul> <p>Note: Valve does not have any documentation covering this function at this time.</p>"},{"location":"classes/ugc/#getqueryugckeyvaluetag","title":"getQueryUGCKeyValueTag","text":"<p>getQueryUGCKeyValueTag( <code>uint64_t</code> query_handle, <code>uint32</code> index, <code>uint32</code> key_value_tag_index )</p> <p>Retrieve the details of a key-value tag associated with an individual workshop item after receiving a querying UGC call result.</p> <p>You should call this in a loop to get the details of all the workshop items returned.</p> <p>Before calling this you should call getQueryUGCNumKeyValueTags to get number of tags.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>success (bool)</li> <li>handle (uint64_t)</li> <li>index (uint32)</li> <li>tag (uint32)</li> <li>key (string)</li> <li>value (string)</li> </ul> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugcmetadata","title":"getQueryUGCMetadata","text":"<p>getQueryUGCMetadata( <code>uint64_t</code> query_handle, <code>uint32</code> index )</p> <p>Retrieve the developer set metadata of an individual workshop item after receiving a querying UGC call result. You should call this in a loop to get the details of all the workshop items returned.</p> <p>Returns: string</p> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugcnumadditionalpreviews","title":"getQueryUGCNumAdditionalPreviews","text":"<p>getQueryUGCNumAdditionalPreviews( <code>uint64_t</code> query_handle, <code>uint32</code> index )</p> <p>Retrieve the number of additional previews of an individual workshop item after receiving a querying UGC call result.</p> <p>You can then call getQueryUGCAdditionalPreview to get the details of each additional preview.</p> <p>Returns: uint32</p> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/ugc/#getqueryugcnumkeyvaluetags","title":"getQueryUGCNumKeyValueTags","text":"<p>getQueryUGCNumKeyValueTags( <code>uint64_t</code> query_handle, <code>uint32</code> index )</p> <p>Retrieve the number of key-value tags of an individual workshop item after receiving a querying UGC call result.</p> <p>You can then call getQueryUGCKeyValueTag to get the details of each tag.</p> <p>Returns: uint32</p> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/ugc/#getqueryugcnumtags","title":"getQueryUGCNumTags","text":"<p>getQueryUGCNumTags( <code>uint64_t</code> query_handle, <code>uint32</code> index )</p> <p>Available in SDK v1.51.</p> <p>Retrieve the number of tags for an individual workshop item after receiving a querying UGC call result.</p> <p>You can then call getQueryUGCTag to get the tag name or getQueryUGCTagDisplayName to get the localized tag string (if any).</p> <p>Returns: uint32</p> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugcpreviewurl","title":"getQueryUGCPreviewURL","text":"<p>getQueryUGCPreviewURL( <code>uint64_t</code> query_handle, <code>uint32</code> index )</p> <p>Retrieve the URL to the preview image of an individual workshop item after receiving a querying UGC call result.</p> <p>You can use this URL to download and display the preview image instead of having to download it using the [handle_preview_file key in the return dictionary from getQueryUGCResult.</p> <p>Returns: string</p> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugcresult","title":"getQueryUGCResult","text":"<p>getQueryUGCResult( <code>uint64_t</code> query_handle, <code>uint32</code> index )</p> <p>Retrieve the details of an individual workshop item after receiving a querying UGC call result.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (uint64_t)</li> <li>file_id (uint64_t)</li> <li>file_type (uint64_t)</li> <li>creator_app_id (uint32_t)</li> <li>consumer_app_id (uint32_t)</li> <li>title (string)</li> <li>description (string)</li> <li>steam_id_owner (uint64_t)</li> <li>time_created (uint32)</li> <li>time_updated (uint32)</li> <li>time_added_to_user_list (uint32)</li> <li>visibility (int)</li> <li>banned (bool)</li> <li>accepted_for_use (bool)</li> <li>tags_truncated (bool)</li> <li>tags (string)</li> <li>handle_file (uint64_t)</li> <li>handle_preview-file (uint64_t)</li> <li>file_name (string)</li> <li>file_size (int32)</li> <li>preview_file_size (int32)</li> <li>url (string)</li> <li>votes_up (uint32)</li> <li>votes_down (uint32)</li> <li>score (float)</li> <li>num_children (uint32)</li> </ul> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugcstatistic","title":"getQueryUGCStatistic","text":"<p>getQueryUGCStatistic( <code>uint64_t</code> query_handle, <code>uint32</code> index, <code>int</code> stat_type )</p> <p>Retrieve various statistics of an individual workshop item after receiving a querying UGC call result.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>success (bool)</li> <li>handle (uint64_t)</li> <li>index (uint32)</li> <li>type (int)</li> <li>value (uint64_t)</li> </ul> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugctag","title":"getQueryUGCTag","text":"<p>getQueryUGCTag( <code>uint64_t</code> query_handle, <code>uint32</code> index, <code>uint32</code> tag_index )</p> <p>Available in SDK v1.51.</p> <p>Retrieve the \"nth\" tag associated with an individual workshop item after receiving a querying UGC call result.</p> <p>Before calling this you should call getQueryUGCNumTags to get number of tags.</p> <p>Returns: string</p> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getqueryugctagdisplayname","title":"getQueryUGCTagDisplayName","text":"<p>getQueryUGCTagDisplayName( <code>uint64_t</code> query_handle, <code>uint32</code> index, <code>uint32</code> tag_index )</p> <p>Available in SDK v1.51.</p> <p>Retrieve the \"nth\" display string (usually localized) for a tag, which is associated with an individual workshop item after receiving a querying UGC call result.</p> <p>Before calling this you should call getQueryUGCNumTags to get number of tags.</p> <p>Returns: string</p> <p>Note: This must only be called with the handle obtained from a successful ugc_query_completed call result.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getsubscribeditems","title":"getSubscribedItems","text":"<p>getSubscribedItems()</p> <p>Gets a list of all of the items the current user is subscribed to for the current game.</p> <p>Returns: array of published_file_ids</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getworkshopeulastatus","title":"getWorkshopEULAStatus","text":"<p>getWorkshopEULAStatus()</p> <p>Asynchronously retrieves data about whether the user accepted the Workshop EULA for the current app.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#getusercontentdescriptorpreferences","title":"getUserContentDescriptorPreferences","text":"<p>getUserContentDescriptorPreferences( <code>uint32</code> max_entries )</p> <p>Return the user's community content descriptor preferences.</p> <p>Returns: Array</p>"},{"location":"classes/ugc/#getuseritemvote","title":"getUserItemVote","text":"<p>getUserItemVote( <code>uint64_t</code> published_file_id )</p> <p>Gets the users vote status on a workshop item.</p> <p>Triggers a get_item_vote_result callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#releasequeryugcrequest","title":"releaseQueryUGCRequest","text":"<p>releaseQueryUGCRequest( <code>uint64_t</code> query_handle )</p> <p>Releases a UGC query handle when you are done with it to free up memory.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#removeappdependency","title":"removeAppDependency","text":"<p>removeAppDependency( <code>uint64_t</code> published_file_id, <code>uint32_t</code> app_id )</p> <p>Removes the dependency between the given item and the appid. This list of dependencies can be retrieved by calling getAppDependencies.</p> <p>Triggers a remove_app_dependency_result callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#removecontentdescriptor","title":"removeContentDescriptor","text":"<p>removeContentDescriptor( <code>uint64_t</code> update_handle, <code>int</code> descriptor_id )</p> <p>Removes a mature content descriptor from a piece of UGC.</p> <p>Returns: bool</p> <p>Notes: Valve has no documentation on this function currently.</p>"},{"location":"classes/ugc/#removedependency","title":"removeDependency","text":"<p>removeDependency( <code>uint64_t</code> published_file_id, <code>uint64_t</code> child_published_file_id )</p> <p>Removes a workshop item as a dependency from the specified item.</p> <p>Triggers a remove_ugc_dependency_result callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#removeitemfromfavorites","title":"removeItemFromFavorites","text":"<p>removeItemFromFavorites( <code>uint32_t</code> app_id, <code>uint64_t</code> published_file_id )</p> <p>Removes a workshop item from the users favorites list.</p> <p>Triggers a user_favorite_items_list_changed callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#removeitemkeyvaluetags","title":"removeItemKeyValueTags","text":"<p>removeItemKeyValueTags( <code>uint64_t</code> update_handle, <code>string</code> key )</p> <p>Removes an existing key value tag from an item.</p> <p>You can only call this up to 100 times per item update. If you need remove more tags than that you'll need to make subsequent item updates.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#removeitempreview","title":"removeItemPreview","text":"<p>removeItemPreview( <code>uint64_t</code> update_handle, <code>uint32</code> index )</p> <p>Removes an existing preview from an item.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#sendqueryugcrequest","title":"sendQueryUGCRequest","text":"<p>sendQueryUGCRequest( <code>uint64_t</code> update_handle )</p> <p>Send a UGC query to Steam.</p> <p>This must be called with a handle obtained from createQueryUserUGCRequest, createQueryAllUGCRequest, or createQueryUGCDetailsRequest to actually send the request to Steam.</p> <p>Before calling this you should use one or more of the following APIs to customize your query: addRequiredTag, addExcludedTag, setReturnOnlyIDs, setReturnKeyValueTags, setReturnLongDescription, setReturnMetadata, setReturnChildren, setReturnAdditionalPreviews, setReturnTotalOnly, setLanguage, setAllowCachedResponse, setCloudFileNameFilter, setMatchAnyTag, setSearchText, setRankedByTrendDays, or addRequiredKeyValueTag.</p> <p>Triggers a ugc_query_completed callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setallowcachedresponse","title":"setAllowCachedResponse","text":"<p>setAllowCachedResponse( <code>uint64_t</code> update_handle, <code>uint32</code> max_age_seconds )</p> <p>Sets whether results will be returned from the cache for the specific period of time on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setcloudfilenamefilter","title":"setCloudFileNameFilter","text":"<p>setCloudFileNameFilter( <code>uint64_t</code> update_handle, <code>string</code> match_cloud_filename )</p> <p>Sets to only return items that have a specific filename on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This can only be used with createQueryUserUGCRequest.</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setitemcontent","title":"setItemContent","text":"<p>setItemContent( <code>uint64_t</code> update_handle, <code>string</code> content_folder )</p> <p>Sets the folder that will be stored as the content for an item.</p> <p>For efficient upload and download, files should not be merged or compressed into single files (e.g. zip files).</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setitemdescription","title":"setItemDescription","text":"<p>setItemDescription( <code>uint64_t</code> update_handle, <code>string</code> description )</p> <p>Sets a new description for an item.</p> <p>The description must be limited to the length defined by k_cchPublishedDocumentDescriptionMax (8000).</p> <p>You can set what language this is for by using setItemUpdateLanguage, if no language is set then \"english\" is assumed.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setitemmetadata","title":"setItemMetadata","text":"<p>setItemMetadata( <code>uint64_t</code> update_handle, <code>string</code> metadata )</p> <p>Sets arbitrary metadata for an item. This metadata can be returned from queries without having to download and install the actual content.</p> <p>The metadata must be limited to the size defined by k_cchDeveloperMetadataMax (5000).</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setitempreview","title":"setItemPreview","text":"<p>setItemPreview( <code>uint64_t</code> update_handle, <code>string</code> preview_file )</p> <p>Sets the primary preview image for the item.</p> <p>The format should be one that both the web and the application (if necessary) can render. Suggested formats include JPG, PNG and GIF.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setitemtags","title":"setItemTags","text":"<p>setItemTags( <code>uint64_t</code> update_handle, <code>array</code> tag_array, <code>bool</code> allow_admin_tags)</p> <p>Sets arbitrary developer specified tags on an item.</p> <p>Each tag must be limited to 255 characters. Tag names can only include printable characters, excluding ','. For reference on what characters are allowed, refer to http://en.cppreference.com/w/c/string/byte/isprint</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setitemtitle","title":"setItemTitle","text":"<p>setItemTitle( <code>uint64_t</code> update_handle, <code>string</code> title )</p> <p>Sets a new title for an item.</p> <p>The title must be limited to the size defined by k_cchPublishedDocumentTitleMax (128).</p> <p>You can set what language this is for by using setItemUpdateLanguage, if no language is set then \"english\" is assumed.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setitemupdatelanguage","title":"setItemUpdateLanguage","text":"<p>setItemUpdateLanguage( <code>uint64_t</code> update_handle, <code>string</code> language )</p> <p>Sets the language of the title and description that will be set in this item update.</p> <p>This must be in the format of the API language code.</p> <p>If this is not set then \"english\" is assumed.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setitemvisibility","title":"setItemVisibility","text":"<p>setItemVisibility( <code>uint64_t</code> update_handle, <code>int</code> visibility )</p> <p>Sets the visibility of an item.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setlanguage","title":"setLanguage","text":"<p>setLanguage( <code>uint64_t</code> query_handle, <code>string</code> language )</p> <p>Sets the language to return the title and description in for the items on a pending UGC Query.</p> <p>This must be in the format of the API language code.</p> <p>If this is not set then \"english\" is assumed.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setmatchanytag","title":"setMatchAnyTag","text":"<p>setMatchAnyTag( <code>uint64_t</code> query_handle, <code>bool</code> match_any_tag )</p> <p>Sets whether workshop items will be returned if they have one or more matching tag, or if all tags need to match on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This can only be used with createQueryAllUGCRequest.</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setrankedbytrenddays","title":"setRankedByTrendDays","text":"<p>setRankedByTrendDays( <code>uint64_t</code> query_handle, <code>uint32</code> days )</p> <p>Sets whether the order of the results will be updated based on the rank of items over a number of days on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This can only be used with createQueryAllUGCRequest.</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setreturnadditionalpreviews","title":"setReturnAdditionalPreviews","text":"<p>setReturnAdditionalPreviews( <code>uint64_t</code> query_handle, <code>bool</code> return_additional_previews )</p> <p>Sets whether to return any additional images/videos attached to the items on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setreturnchildren","title":"setReturnChildren","text":"<p>setReturnChildren( <code>uint64_t</code> query_handle, <code>bool</code> return_children )</p> <p>Sets whether to return the IDs of the child items of the items on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setreturnkeyvaluetags","title":"setReturnKeyValueTags","text":"<p>setReturnKeyValueTags( <code>uint64_t</code> query_handle, <code>bool</code> return_key_value_tags )</p> <p>Sets whether to return any key-value tags for the items on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setreturnlongdescription","title":"setReturnLongDescription","text":"<p>setReturnLongDescription( <code>uint64_t</code> query_handle, <code>bool</code> return_long_description )</p> <p>Sets whether to return the full description for the items on a pending UGC Query.</p> <p>If you don't set this then you only receive the summary which is the description truncated at 255 bytes.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setreturnmetadata","title":"setReturnMetadata","text":"<p>setReturnMetadata( <code>uint64_t</code> query_handle, <code>bool</code> return_metadata )</p> <p>Sets whether to return the developer specified metadata for the items on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setreturnonlyids","title":"setReturnOnlyIDs","text":"<p>setReturnOnlyIDs( <code>uint64_t</code> query_handle, <code>bool</code> return_only_ids )</p> <p>Sets whether to only return IDs instead of all the details on a pending UGC Query.</p> <p>This is useful for when you don't need all the information (e.g. you just want to get the IDs of the items a user has in their favorites list.)</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setreturnplaytimestats","title":"setReturnPlaytimeStats","text":"<p>setReturnPlaytimeStats( <code>uint64_t</code> query_handle, <code>uint32</code> days )</p> <p>Sets whether to return the the playtime stats on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setreturntotalonly","title":"setReturnTotalOnly","text":"<p>setReturnTotalOnly( <code>uint64_t</code> query_handle, <code>bool</code> return_total_only )</p> <p>Sets whether to only return the the total number of matching items on a pending UGC Query.</p> <p>The actual items will not be returned when ugc_query_completed is called.</p> <p>Returns: bool</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setsearchtext","title":"setSearchText","text":"<p>setSearchText( <code>uint64_t</code> query_handle, <code>string</code> search_text )</p> <p>Sets a string to that items need to match in either the title or the description on a pending UGC Query.</p> <p>Returns: bool</p> <p>Note: This can only be used with createQueryAllUGCRequest.</p> <p>Note: This must be set before you send a UGC Query handle using sendQueryUGCRequest.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#setuseritemvote","title":"setUserItemVote","text":"<p>setUserItemVote( <code>uint64_t</code> published_file_id, <code>bool</code> vote_up )</p> <p>Allows the user to rate a workshop item up or down.</p> <p>Triggers a set_user_item_vote callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#showworkshopeula","title":"showWorkshopEULA","text":"<p>showWorkshopEULA()</p> <p>Show the app's latest Workshop EULA to the user in an overlay window, where they can accept it or not.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#startitemupdate","title":"startItemUpdate","text":"<p>startItemUpdate( <code>uint32_t</code> app_id, <code>uint64_t</code> published_file_id )</p> <p>Starts the item update process.</p> <p>This gets you a handle that you can use to modify the item before finally sending off the update to the server with submitItemUpdate.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#startplaytimetracking","title":"startPlaytimeTracking","text":"<p>startPlaytimeTracking( <code>array</code> published_file_ids )</p> <p>Start tracking playtime on a set of workshop items.</p> <p>When your app shuts down, playtime tracking will automatically stop.</p> <p>Triggers a start_playtime_tracking callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#stopplaytimetracking","title":"stopPlaytimeTracking","text":"<p>stopPlaytimeTracking( <code>array</code> published_file_ids )</p> <p>Stop tracking playtime on a set of workshop items.</p> <p>When your app shuts down, playtime tracking will automatically stop.</p> <p>Triggers a stop_playtime_tracking callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#stopplaytimetrackingforallitems","title":"stopPlaytimeTrackingForAllItems","text":"<p>stopPlaytimeTrackingForAllItems()</p> <p>Stop tracking playtime of all workshop items.</p> <p>When your app shuts down, playtime tracking will automatically stop.</p> <p>Triggers a stop_playtime_tracking callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#submititemupdate","title":"submitItemUpdate","text":"<p>submitItemUpdate( <code>uint64_t</code> update_handle, <code>string</code> change_note )</p> <p>Uploads the changes made to an item to the Steam Workshop.</p> <p>You can track the progress of an item update with getItemUpdateProgress.</p> <p>Triggers a item_updated callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#subscribeitem","title":"subscribeItem","text":"<p>subscribeItem( <code>uint64_t</code> published_file_id )</p> <p>Subscribe to a workshop item. It will be downloaded and installed as soon as possible.</p> <p>Triggers a subscribe_item callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#suspenddownloads","title":"suspendDownloads","text":"<p>suspendDownloads( <code>bool</code> suspend )</p> <p>Suspends and resumes all workshop downloads.</p> <p>If you call this with suspend set to true then downloads will be suspended until you resume them by setting suspend to false or when the game ends.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#unsubscribeitem","title":"unsubscribeItem","text":"<p>unsubscribeItem( <code>uint64_t</code> published_file_id )</p> <p>Unsubscribe from a workshop item. This will result in the item being removed after the game quits.</p> <p>Triggers a unsubscribe_item callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#updateitempreviewfile","title":"updateItemPreviewFile","text":"<p>updateItemPreviewFile( <code>uint64_t</code> update_handle, <code>uint32</code> index, <code>string</code> preview_file )</p> <p>Updates an additional video preview from YouTube for the item.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#updateitempreviewvideo","title":"updateItemPreviewVideo","text":"<p>updateItemPreviewVideo( <code>uint64_t</code> update_handle, <code>uint32</code> index, <code>string</code> video_id )</p> <p>Updates an additional video preview from YouTube for the item.</p> <p>Returns: bool</p> <p>Note: This must be set before you submit the UGC update handle using submitItemUpdate.</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/ugc/#signals","title":"Signals","text":""},{"location":"classes/ugc/#add_app_dependency_result","title":"add_app_dependency_result","text":"<p>add_app_dependency_result</p> <p>The result of a call to addAppDependency.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>app_id (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/ugc/#add_ugc_dependency_result","title":"add_ugc_dependency_result","text":"<p>add_ugc_dependency_result</p> <p>The result of a call to addDependency.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>child_id (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#get_app_dependencies_result","title":"get_app_dependencies_result","text":"<p>get_app_dependencies_result</p> <p>Called when getting the app dependencies for an item.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>app_dependencies (uint32)</li> <li>total_app_dependencies (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#get_item_vote_result","title":"get_item_vote_result","text":"<p>get_item_vote_result</p> <p>Called when getting the users vote status on an item.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>vote_up (bool)</li> <li>vote_down (bool)</li> <li>vote_skipped (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#item_created","title":"item_created","text":"<p>item_created</p> <p>Called when a new workshop item has been created.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>accept_tos (bool)</li> </ul> <p><code>accept_tos</code> should return false if the user has accepted the Workshop TOS. If it is true, direct the user to the TOS so they can accept it.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#item_deleted","title":"item_deleted","text":"<p>item_deleted</p> <p>Called when an attempt at deleting an item completes.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#item_downloaded","title":"item_downloaded","text":"<p>item_downloaded</p> <p>Called when a workshop item has been downloaded.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>app_id (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#item_installed","title":"item_installed","text":"<p>item_installed</p> <p>Called when a workshop item has been installed or updated.</p> <p>Returns:</p> <ul> <li>app_id (uint32_t)</li> <li>file_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#item_updated","title":"item_updated","text":"<p>item_updated</p> <p>Called when an item update has completed. Emits signal in response to function submitItemUpdate.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>need_to_accept_tos (bool)</li> </ul> <p>If need_to_accept_tos comes back true, you should direct the user to accept the legal agreement.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#remove_app_dependency_result","title":"remove_app_dependency_result","text":"<p>remove_app_dependency_result</p> <p>Purpose: The result of a call to removeAppDependency.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>app_id (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#remove_ugc_dependency_result","title":"remove_ugc_dependency_result","text":"<p>remove_ugc_dependency_result</p> <p>Purpose: The result of a call to removeDependency.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>child_id (uint64_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#set_user_item_vote","title":"set_user_item_vote","text":"<p>set_user_item_vote</p> <p>Called when the user has voted on an item.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>vote_up (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#start_playtime_tracking","title":"start_playtime_tracking","text":"<p>start_playtime_tracking</p> <p>Called when workshop item playtime tracking has started.</p> <p>Returns:</p> <ul> <li>result (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#stop_playtime_tracking","title":"stop_playtime_tracking","text":"<p>stop_playtime_tracking</p> <p>Called when workshop item playtime tracking has stopped.</p> <p>Returns:</p> <ul> <li>result (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#ugc_query_completed","title":"ugc_query_completed","text":"<p>ugc_query_completed</p> <p>Called when a UGC query request completes.</p> <p>Returns:</p> <ul> <li>handle (uint64_t)</li> <li>result (int)</li> <li>results_returned (uint32)</li> <li>total_matching (uint32)</li> <li>cached (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#user_favorite_items_list_changed","title":"user_favorite_items_list_changed","text":"<p>user_favorite_items_list_changed</p> <p>Called when the user has added or removed an item to/from their favorites.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>file_id (uint64_t)</li> <li>was_add_request (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#user_subscribed_items_list_changed","title":"user_subscribed_items_list_changed","text":"<p>user_subscribed_items_list_changed</p> <p>Signal that the list of subscribed items changed.</p> <p>Returns:</p> <ul> <li>app_id (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#workshop_eula_status","title":"workshop_eula_status","text":"<p>workshop_eula_status</p> <p>Status of the user's acceptable/rejection of the app's specific Workshop EULA.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>app_id (uint32)</li> <li>eula_data (dictionary)<ul> <li>version (uint32)</li> <li>action (uint32)</li> <li>accepted (bool)</li> <li>needs_action (bool)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/ugc/#enums","title":"Enums","text":""},{"location":"classes/ugc/#itempreviewtype","title":"ItemPreviewType","text":"Enumerator Value ITEM_PREVIEW_TYPE_IMAGE 0 ITEM_PREVIEW_TYPE_YOUTUBE_VIDEO 1 ITEM_PREVIEW_TYPE_SKETCHFAB 2 ITEM_PREVIEW_TYPE_ENVIRONMENTMAP_HORIZONTAL_CROSS 3 ITEM_PREVIEW_TYPE_ENVIRONMENTMAP_LAT_LONG 4 ITEM_PREVIEW_TYPE_RESERVED_MAX 255"},{"location":"classes/ugc/#itemstate","title":"ItemState","text":"Enumerator Value ITEM_STATE_NONE 0 ITEM_STATE_SUBSCRIBED 1 ITEM_STATE_LEGACY_ITEM 2 ITEM_STATE_INSTALLED 4 ITEM_STATE_NEEDS_UPDATE 8 ITEM_STATE_DOWNLOADING 16 ITEM_STATE_DOWNLOAD_PENDING 32"},{"location":"classes/ugc/#itemstatistic","title":"ItemStatistic","text":"Enumerator Value ITEM_STATISTIC_NUM_SUBSCRIPTIONS 0 ITEM_STATISTIC_NUM_FAVORITES 1 ITEM_STATISTIC_NUM_FOLLOWERS 2 ITEM_STATISTIC_NUM_UNIQUE_SUBSCRIPTIONS 3 ITEM_STATISTIC_NUM_UNIQUE_FAVORITES 4 ITEM_STATISTIC_NUM_UNIQUE_FOLLOWERS 5 ITEM_STATISTIC_NUM_UNIQUE_WEBSITE_VIEWS 6 ITEM_STATISTIC_REPORT_SCORE 7 ITEM_STATISTIC_NUM_SECONDS_PLAYED 8 ITEM_STATISTIC_NUM_PLAYTIME_SESSIONS 9 ITEM_STATISTIC_NUM_COMMENTS 10 ITEM_STATISTIC_NUM_SECONDS_PLAYED_DURING_TIME_PERIOD 11 ITEM_STATISTIC_NUM_PLAYTIME_SESSIONS_DURING_TIME_PERIOD 12"},{"location":"classes/ugc/#itemupdatestatus","title":"ItemUpdateStatus","text":"Enumerator Value ITEM_UPDATE_STATUS_INVALID 0 ITEM_UPDATE_STATUS_PREPARING_CONFIG 1 ITEM_UPDATE_STATUS_PREPARING_CONTENT 2 ITEM_UPDATE_STATUS_UPLOADING_CONTENT 3 ITEM_UPDATE_STATUS_UPLOADING_PREVIEW_FILE 4 ITEM_UPDATE_STATUS_COMMITTING_CHANGES 5"},{"location":"classes/ugc/#ugcmatchingugctype","title":"UGCMatchingUGCType","text":"Enumerator Value UGC_MATCHING_UGC_TYPE_ITEMS 0 UGC_MATCHING_UGC_TYPE_ITEMS_MTX 1 UGC_MATCHING_UGC_TYPE_ITEMS_READY_TO_USE 2 UGC_MATCHING_UGC_TYPE_COLLECTIONS 3 UGC_MATCHING_UGC_TYPE_ARTWORK 4 UGC_MATCHING_UGC_TYPE_VIDEOS 5 UGC_MATCHING_UGC_TYPE_SCREENSHOTS 6 UGC_MATCHING_UGC_TYPE_ALL_GUIDES 7 UGC_MATCHING_UGC_TYPE_WEB_GUIDES 8 UGC_MATCHING_UGC_TYPE_INTEGRATED_GUIDES 9 UGC_MATCHING_UGC_TYPE_USABLE_IN_GAME 10 UGC_MATCHING_UGC_TYPE_CONTROLLER_BINDINGS 11 UGC_MATCHING_UGC_TYPE_GAME_MANAGED_ITEMS 12 UGC_MATCHING_UGC_TYPE_ALL ~0"},{"location":"classes/ugc/#ugcquery","title":"UGCQuery","text":"Enumerator Value UGC_QUERY_RANKED_BY_VOTE 0 UGC_QUERY_RANKED_BY_PUBLICATION_DATE 1 UGC_QUERY_ACCEPTED_FOR_GAME_RANKED_BY_ACCEPTANCE_DATE 2 UGC_QUERY_RANKED_BY_TREND 3 UGC_QUERY_FAVORITED_BY_FRIENDS_RANKED_BY_PUBLICATION_DATE 4 UGC_QUERY_CREATED_BY_FRIENDS_RANKED_BY_PUBLICATION_DATE 5 UGC_QUERY_RANKED_BY_NUM_TIMES_REPORTED 6 UGC_QUERY_CREATED_BY_FOLLOWED_USERS_RANKED_BY_PUBLICATION_DATE 7 UGC_QUERY_NOT_YET_RATED 8 UGC_QUERY_RANKED_BY_TOTAL_VOTES_ASC 9 UGC_QUERY_RANKED_BY_VOTES_UP 10 UGC_QUERY_RANKED_BY_TEXT_SEARCH 11 UGC_QUERY_RANKED_BY_TOTAL_UNIQUE_SUBSCRIPTIONS 12 UGC_QUERY_RANKED_BY_PLAYTIME_TREND 13 UGC_QUERY_RANKED_BY_TOTAL_PLAYTIME 14 UGC_QUERY_RANKED_BY_AVERAGE_PLAYTIME_TREND 15 UGC_QUERY_RANKED_BY_LIFETIME_AVERAGE_PLAYTIME 16 UGC_QUERY_RANKED_BY_PLAYTIME_SESSIONS_TREND 17 UGC_QUERY_RANKED_BY_LIFETIME_PLAYTIME_SESSIONS 18 UGC_QUERY_RANKED_BY_LAST_UPDATED_DATE 19"},{"location":"classes/ugc/#userugclist","title":"UserUGCList","text":"Enumerator Value USER_UGC_LIST_PUBLISHED 0 USER_UGC_LIST_VOTED_ON 1 USER_UGC_LIST_VOTED_UP 2 USER_UGC_LIST_VOTED_DOWN 3 USER_UGC_LIST_FAVORITED 5 USER_UGC_LIST_SUBSCRIBED 6 USER_UGC_LIST_USED_OR_PLAYED 7 USER_UGC_LIST_FOLLOWED 8"},{"location":"classes/ugc/#userugclistsortorder","title":"UserUGCListSortOrder","text":"Enumerator Value USER_UGC_LIST_SORT_ORDER_CREATION_ORDER_DESC 0 USER_UGC_LIST_SORT_ORDER_CREATION_ORDER_ASC 1 USER_UGC_LIST_SORT_ORDER_TITLE_ASC 2 USER_UGC_LIST_SORT_ORDER_LAST_UPDATED_DESC 3 USER_UGC_LIST_SORT_ORDER_SUBSCRIPTION_DATE_DESC 4 USER_UGC_LIST_SORT_ORDER_VOTE_SCORE_DESC 5 USER_UGC_LIST_SORT_ORDER_FOR_MODERATION 6"},{"location":"classes/ugc/#ugccontentdescriptorid","title":"UGCContentDescriptorID","text":"Enumerator Value UGC_CONTENT_DESCRIPTOR_NUDITY_OR_SEXUAL_CONTENT 1 UGC_CONTENT_DESCRIPTOR_FREQUENT_VIOLENCE_OR_GORE 2 UGC_CONTENT_DESCRIPTOR_ADULT_ONLY_SEXUAL_CONTENT 3 UGC_CONTENT_DESCRIPTOR_GRATUITOUS_SEXUAL_CONTENT 4 UGC_CONTENT_DESCRIPTOR_ANY_MATURE_CONTENT 5"},{"location":"classes/user/","title":"User","text":"<p>Functions for accessing and manipulating Steam user information. This is also where the APIs for\u00a0Steam Voice\u00a0are exposed.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/user/#functions","title":"Functions","text":""},{"location":"classes/user/#advertisegame","title":"advertiseGame","text":"<p>advertiseGame( <code>string</code> server_ip, <code>uint16</code> port )</p> <p>Set the rich presence data for an unsecured game server that the user is playing on. This allows friends to be able to view the game info and join your game.</p> <p>When you are using Steam authentication system this call is never required, the auth system automatically sets the appropriate rich presence.</p> <p>Returns: void</p> <p>Note: This is a legacy function.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#beginauthsession","title":"beginAuthSession","text":"<p>beginAuthSession( <code>PoolByteArray / PackedByteArray</code> auth_ticket, <code>int</code> ticket_size, <code>uint64_t</code> steam_id )</p> <p>Authenticate the ticket from the entity's Steam ID to be sure it is valid and isn't reused. The ticket is first created by the entity with getAuthSessionTicket and then needs to be provided over the network for the other end to validate.</p> <p>When the multiplayer session terminates you must call endAuthSession.</p> <p>Triggers a validate_auth_ticket_response callback. Beginning an auth session also registers for these callbacks if the entity goes offline or cancels the ticket.</p> <p>Returns: int (BeginAuthSessionResult enum)</p> <p>See EBeginAuthSessionResult for more details.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#cancelauthticket","title":"cancelAuthTicket","text":"<p>cancelAuthTicket( <code>uint32_t</code> auth_ticket )</p> <p>Cancels an auth ticket received from getAuthSessionTicket. This should be called when no longer playing with the specified entity.</p> <p>Returns: void</p> <p>Note: This will trigger a validate_auth_ticket_response callback for any other server or client who called beginAuthSession using this ticket to let them know it is no longer valid.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#decompressvoice","title":"decompressVoice","text":"<p>decompressVoice( <code>PoolByteArray / PackedByteArray</code> voice, <code>uint32</code> voice_size, <code>uint32</code> sample_rate )</p> <p>Decodes the compressed voice data returned by getVoice.</p> <p>The output data is raw single-channel 16-bit PCM audio. The decoder supports any sample rate from 11025 to 48000. See getVoiceOptimalSampleRate for more information.</p> <p>It is recommended that you start with a 20KiB buffer and then reallocate as necessary.</p> <p>See Steam Voice for more information.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>uncompressed (PoolByteArray / PackedByteArray)</li> <li>size (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#endauthsession","title":"endAuthSession","text":"<p>endAuthSession( <code>uint64_t</code> steam_id )</p> <p>Ends an auth session that was started with beginAuthSession. This should be called when no longer playing with the specified entity.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getauthsessionticket","title":"getAuthSessionTicket","text":"<p>getAuthSessionTicket( <code>uint64_t</code> remote_steam_id = 0 )</p> <p>Retrieve an authentication ticket to be sent to the entity who wishes to authenticate you.</p> <p>After calling this you can send the ticket to the entity where they can then call beginAuthSession to verify this entity's integrity.</p> <p>NOTE: This API can not be used to create a ticket for use by the AuthenticateUserTicket Web API. Use getAuthTicketForWebApi for that instead.</p> <p>Triggers a get_auth_session_ticket_response callback.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>id (uint32_t)</li> <li>buffer (PoolByteArray / PackedByteArray)</li> <li>size (uint32_t)</li> </ul> <p>Note: As of Steamworks SDK 1.57, you may pass a Steam ID class. However, this is optional and defaults to NULL.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getauthticketforwebapi","title":"getAuthTicketForWebApi","text":"<p>getAuthTicketForWebApi( <code>string</code> service_identity )</p> <p>Request a ticket which will be used for the AuthenticateUserTicket Web API.</p> <p>Triggers a get_ticket_for_web_api callback which will include the actual ticket.</p> <p>Returns: auth_ticket_handle (uint32)</p> <p>Note: The <code>service_identity</code> is not a network identity used by or created with GodotSteam's Networking Types class. It is an optional input parameter to identify the service the ticket will be sent to.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getavailablevoice","title":"getAvailableVoice","text":"<p>getAvailableVoice()</p> <p>Checks to see if there is captured audio data available from getVoice, and gets the size of the data.</p> <p>Most applications will only use compressed data and should ignore the other parameters, which exist primarily for backwards compatibility. See getVoice for further explanation of \"uncompressed\" data.</p> <p>See Steam Voice for more information.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (int)</li> <li>buffer (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getdurationcontrol","title":"getDurationControl","text":"<p>getDurationControl()</p> <p>Retrieves anti indulgence / duration control for current user / game combination.</p> <p>Triggers a duration_control call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getencryptedappticket","title":"getEncryptedAppTicket","text":"<p>getEncryptedAppTicket()</p> <p>Retrieve an encrypted ticket.</p> <p>This should be called after requesting an encrypted app ticket with requestEncryptedAppTicket and receiving the encrypted_app_ticket_response call result.</p> <p>You should then pass this encrypted ticket to your secure servers to be decrypted using your secret key.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>buffer (PoolByteArray / PackedByteArray)</li> <li>size (uint32_t)</li> </ul> <p>Note:  If you call this without calling requestEncryptedAppTicket, the call may succeed but you will likely get a stale ticket.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getgamebadgelevel","title":"getGameBadgeLevel","text":"<p>getGameBadgeLevel( <code>int</code> series, <code>bool</code> foil )</p> <p>Gets the level of the users Steam badge for your game.</p> <p>The user can have two different badges for a series; the regular badge (max level 5) and the foil badge (max level 1).</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getplayersteamlevel","title":"getPlayerSteamLevel","text":"<p>getPlayerSteamLevel()</p> <p>Gets the Steam level of the user, as shown on their Steam community profile.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getsteamid","title":"getSteamID","text":"<p>getSteamID()</p> <p>Gets the Steam ID (ID64) of the account currently logged into the Steam client. This is commonly called the 'current user', or 'local user'.</p> <p>A Steam ID is a unique identifier for a Steam accounts, Steam groups, Lobbies and Chat rooms, and used to differentiate users in all parts of the Steamworks API.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#getvoice","title":"getVoice","text":"<p>getVoice()</p> <p>Read captured audio data from the microphone buffer.</p> <p>The compressed data can be transmitted by your application and decoded back into raw audio data using decompressVoice on the other side. The compressed data provided is in an arbitrary format and is not meant to be played directly.</p> <p>This should be called once per frame, and at worst no more than four times a second to keep the microphone input delay as low as possible. Calling this any less may result in gaps in the returned stream.</p> <p>It is recommended that you pass in an 8 kilobytes or larger destination buffer for compressed audio. Static buffers are recommended for performance reasons. However, if you would like to allocate precisely the right amount of space for a buffer before each call you may use getAvailableVoice to find out how much data is available to be read.</p> <p>See Steam Voice for more information.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (int)</li> <li>written (uint32)</li> <li>buffer (uint8)</li> </ul> <p>Note:  \"Uncompressed\" audio is a deprecated feature and should not be used by most applications. It is raw single-channel 16-bit PCM wave data which may have been run through preprocessing filters and/or had silence removed, so the uncompressed audio could have a shorter duration than you expect. There may be no data at all during long periods of silence. Also, fetching uncompressed audio will cause getVoice to discard any leftover compressed audio, so you must fetch both types at once. Finally, getAvailableVoice is not precisely accurate when the uncompressed size is requested. So if you really need to use uncompressed audio, you should call getVoice frequently with two very large (20KiB+) output buffers instead of trying to allocate perfectly-sized buffers. But most applications should ignore all of these details and simply leave the \"uncompressed\" parameters as NULL/0.</p> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/user/#getvoiceoptimalsamplerate","title":"getVoiceOptimalSampleRate","text":"<p>getVoiceOptimalSampleRate()</p> <p>Gets the native sample rate of the Steam voice decoder.</p> <p>Using this sample rate for decompressVoice will perform the least CPU processing. However, the final audio quality will depend on how well the audio device (and/or your application's audio output SDK) deals with lower sample rates. You may find that you get the best audio output quality when you ignore this function and use the native sample rate of your audio output device, which is usually 48000 or 44100.</p> <p>See Steam Voice for more information.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#initiategameconnection","title":"initiateGameConnection","text":"<p>initiateGameConnection( <code>uint64_t</code> server_id, <code>uint32</code> server_ip, <code>uint16</code> server_port, <code>bool</code> secure )</p> <p>This starts the state machine for authenticating the game client with the game server.</p> <p>It is the client portion of a three-way handshake between the client, the game server, and the steam servers.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>auth_blob (PoolByteArray / PackedByteArray)</li> <li>server_id (uint64_t)</li> <li>server_ip (uint32)</li> <li>server_port (uint16)</li> </ul> <p>Note:  When you're done with the connection you must call terminateGameConnection</p> <p>Note:  This is part of the old user authentication API and should not be mixed with the new API.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#isbehindnat","title":"isBehindNAT","text":"<p>isBehindNAT()</p> <p>Checks if the current user looks like they are behind a NAT device.</p> <p>This is only valid if the user is connected to the Steam servers and may not catch all forms of NAT.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#isphoneidentifying","title":"isPhoneIdentifying","text":"<p>isPhoneIdentifying()</p> <p>Checks whether the user's phone number is used to uniquely identify them.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#isphonerequiringverification","title":"isPhoneRequiringVerification","text":"<p>isPhoneRequiringVerification()</p> <p>Checks whether the current user's phone number is awaiting (re)verification.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#isphoneverified","title":"isPhoneVerified","text":"<p>isPhoneVerified()</p> <p>Checks whether the current user has verified their phone number.</p> <p>See the Steam Guard Mobile Authenticator page on the customer facing Steam Support site for more information.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#istwofactorenabled","title":"isTwoFactorEnabled","text":"<p>isTwoFactorEnabled()</p> <p>Checks whether the current user has Steam Guard two factor authentication enabled on their account.</p> <p>See the Steam Guard Mobile Authenticator page on the customer facing Steam Support site for more information.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#loggedon","title":"loggedOn","text":"<p>loggedOn()</p> <p>Checks if the current user's Steam client is connected to the Steam servers.</p> <p>If it's not then no real-time services provided by the Steamworks API will be enabled. The Steam client will automatically be trying to recreate the connection as often as possible. When the connection is restored a steam_server_connected callback will be posted.</p> <p>You usually don't need to check for this yourself. All of the API calls that rely on this will check internally. Forcefully disabling stuff when the player loses access is usually not a very good experience for the player and you could be preventing them from accessing APIs that do not need a live connection to Steam.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#requestencryptedappticket","title":"requestEncryptedAppTicket","text":"<p>requestEncryptedAppTicket( <code>string</code> secret )</p> <p>Requests an application ticket encrypted with the secret \"encrypted app ticket key\".</p> <p>The encryption key can be obtained from the Encrypted App Ticket Key page on the App Admin for your app.</p> <p>There can only be one encrypted_app_ticket_response pending, and this call is subject to a 60 second rate limit.</p> <p>After receiving the response you should call getEncryptedAppTicket to get the ticket data, and then you need to send it to a secure server to be decrypted with the SteamEncryptedAppTicket functions.</p> <p>Triggers a encrypted_app_ticket_response call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#requeststoreauthurl","title":"requestStoreAuthURL","text":"<p>requestStoreAuthURL( <code>string</code> redirect )</p> <p>Requests a URL which authenticates an in-game browser for store check-out, and then redirects to the specified URL.</p> <p>As long as the in-game browser accepts and handles session cookies, Steam microtransaction checkout pages will automatically recognize the user instead of presenting a login page.</p> <p>Triggers a store_auth_url_response call result.</p> <p>Returns: void</p> <p>Note: The URL has a very short lifetime to prevent history-snooping attacks, so you should only call this API when you are about to launch the browser, or else immediately navigate to the result URL using a hidden browser window.</p> <p>Note: The resulting authorization cookie has an expiration time of one day, so it would be a good idea to request and visit a new auth URL every 12 hours.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#setdurationcontrolonlinestate","title":"setDurationControlOnlineState","text":"<p>setDurationControlOnlineState( <code>int</code> new_state )</p> <p>Allows the game to specify the offline/online gameplay state for Steam China duration control.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#startvoicerecording","title":"startVoiceRecording","text":"<p>startVoiceRecording()</p> <p>Starts voice recording.</p> <p>Once started, use getAvailableVoice and getVoice to get the data, and then call stopVoiceRecording when the user has released their push-to-talk hotkey or the game session has completed.</p> <p>See Steam Voice for more information.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#stopvoicerecording","title":"stopVoiceRecording","text":"<p>stopVoiceRecording()</p> <p>Stops voice recording.</p> <p>Because people often release push-to-talk keys early, the system will keep recording for a little bit after this function is called. As such, getVoice should continue to be called until it returns 2, only then will voice recording be stopped.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#terminategameconnection","title":"terminateGameConnection","text":"<p>terminateGameConnection( <code>uint32</code> server_ip, <code>uint32</code> server_port )</p> <p>Notify the game server that we are disconnecting.</p> <p>This needs to occur when the game client leaves the specified game server, needs to match with the initiateGameConnection call.</p> <p>Returns: void</p> <p>Note:  This is part of the old user authentication API and should not be mixed with the new API.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#userhaslicenseforapp","title":"userHasLicenseForApp","text":"<p>userHasLicenseForApp( <code>uint64_t</code> steam_id, <code>uint32_t</code> app_id )</p> <p>Checks if the user owns a specific piece of Downloadable Content (DLC).</p> <p>This can only be called after sending the users auth ticket to beginAuthSession.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/user/#signals","title":"Signals","text":""},{"location":"classes/user/#client_game_server_deny","title":"client_game_server_deny","text":"<p>client_game_server_deny</p> <p>Sent by the Steam server to the client telling it to disconnect from the specified game server, which it may be in the process of or already connected to. The game client should immediately disconnect upon receiving this message. This can usually occur if the user doesn't have rights to play on the game server.</p> <p>Returns:</p> <ul> <li>app_id (uint32)</li> <li>ip (string)</li> <li>server_port (uint16)</li> <li>secure (uint16)</li> <li>reason (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#duration_control","title":"duration_control","text":"<p>duration_control</p> <p>Sent for games with enabled anti indulgence / duration control, for enabled users. Lets the game know whether persistent rewards or XP should be granted at normal rate, half rate, or zero rate.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>duration (dictionary)<ul> <li>app_id (uint32)</li> <li>applicable (bool)</li> <li>seconds_last_5hrs (int32)</li> <li>progress (int)</li> <li>notification (int)</li> <li>notification_verbal (string)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#encrypted_app_ticket_response","title":"encrypted_app_ticket_response","text":"<p>encrypted_app_ticket_response</p> <p>Called when an encrypted application ticket has been received.</p> <p>Returns:</p> <ul> <li>result (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#game_web_callback","title":"game_web_callback","text":"<p>game_web_callback</p> <p>Sent to your game in response to a <code>steam://gamewebcallback/</code> command from a user clicking a link in the Steam overlay browser. You can use this to add support for external site signups where you want to pop back into the browser after some web page signup sequence, and optionally get back some detail about that.</p> <p>Returns:</p> <ul> <li>url (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#get_auth_session_ticket_response","title":"get_auth_session_ticket_response","text":"<p>get_auth_session_ticket_response</p> <p>Result when creating an auth session ticket with getAuthSessionTicket.</p> <p>Returns:</p> <ul> <li>auth_ticket (uint32)</li> <li>result (int) (Result enum)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#get_ticket_for_web_api","title":"get_ticket_for_web_api","text":"<p>get_ticket_for_web_api</p> <p>Result when creating a Web API ticket with getAuthTicketForWebApi.</p> <p>Returns:</p> <ul> <li>auth_ticket (uint32)</li> <li>result (int) (Result enum)</li> <li>ticket_size (int)</li> <li>ticket_buffer (uint8)</li> </ul> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/user/#ipc_failure","title":"ipc_failure","text":"<p>ipc_failure</p> <p>Called when the callback system for this client is in an error state (and has flushed pending callbacks). When getting this message the client should disconnect from Steam, reset any stored Steam state and reconnect. This usually occurs in the rare event the Steam client has some kind of fatal error.</p> <p>Returns:</p> <ul> <li>type (uint8)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#licenses_updated","title":"licenses_updated","text":"<p>licenses_updated</p> <p>Called whenever the users licenses (owned packages) changes.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#microtransaction_auth_response","title":"microtransaction_auth_response","text":"<p>microtransaction_auth_response</p> <p>Called when a user has responded to a microtransaction authorization request.</p> <p>Returns:</p> <ul> <li>app_id (uint32)</li> <li>order_id (uint64_t)</li> <li>authorized (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#steam_server_connect_failed","title":"steam_server_connect_failed","text":"<p>steam_server_connect_failed</p> <p>Called when a connection attempt has failed. This will occur periodically if the Steam client is not connected, and has failed when retrying to establish a connection.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>retrying (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#steam_server_connected","title":"steam_server_connected","text":"<p>steam_server_connected</p> <p>Called when a connections to the Steam back-end has been established. This means the Steam client now has a working connection to the Steam servers. Usually this will have occurred before the game has launched, and should only be seen if the user has dropped connection due to a networking issue or a Steam server update.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#steam_server_disconnected","title":"steam_server_disconnected","text":"<p>steam_server_disconnected</p> <p>Called if the client has lost connection to the Steam servers. Real-time services will be disabled until a matching steam_server_connected has been posted.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#store_auth_url_response","title":"store_auth_url_response","text":"<p>store_auth_url_response</p> <p>Response when we have recieved the authentication URL after a call to requestStoreAuthURL.</p> <p>Returns:</p> <ul> <li>url (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#validate_auth_ticket_response","title":"validate_auth_ticket_response","text":"<p>validate_auth_ticket_response</p> <p>Called when an auth ticket has been validated.</p> <p>Emits signal in response to function beginAuthSession. Also received when a user you have an active auth session with cancels their auth ticket so that you can respond appropriately by calling endAuthSession, etc.</p> <p>Returns:</p> <ul> <li>auth_id (uint64_t)</li> <li>response (uint32_t) (AuthSessionResponse enum)</li> <li>owner_id (uint64_t)</li> </ul> <p>See EAuthSessionResponse for more details about possible responses.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user/#enums","title":"Enums","text":""},{"location":"classes/user/#failuretype","title":"FailureType","text":"Enumerator Value FAILURE_FLUSHED_CALLBACK_QUEUE 0 FAILURE_PIPE_FAIL 1"},{"location":"classes/user/#durationcontrolprogress","title":"DurationControlProgress","text":"Enumerator Value DURATION_CONTROL_PROGRESS_FULL 0 DURATION_CONTROL_PROGRESS_HALF 1 DURATION_CONTROL_PROGRESS_NONE 2"},{"location":"classes/user/#durationcontrolnotification","title":"DurationControlNotification","text":"Enumerator Value DURATION_CONTROL_NOTIFICATION_NONE 0 DURATION_CONTROL_NOTIFICATION_1_HOUR 1 DURATION_CONTROL_NOTIFICATION_3_HOURS 3 DURATION_CONTROL_NOTIFICATION_HALF_PROGRESS 3 DURATION_CONTROL_NOTIFICATION_NO_PROGRESS 4"},{"location":"classes/user_stats/","title":"User Stats","text":"<p>Provides functions for accessing and submitting stats, achievements, and leaderboards.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/user_stats/#functions","title":"Functions","text":""},{"location":"classes/user_stats/#attachleaderboardugc","title":"attachLeaderboardUGC","text":"<p>attachLeaderboardUGC( <code>uint64_t</code> ugc_handle, <code>uint64_t</code> this_leaderboard )</p> <p>If no this_leaderboard is passed, then the function will use the last internally-stored handle.</p> <p>Attaches a piece of user generated content the current user's entry on a leaderboard.</p> <p>This content could be a replay of the user achieving the score or a ghost to race against. The attached handle will be available when the entry is retrieved and can be accessed by other users using the leaderboard_scores_downloaded callback. To create and download user generated content see the documentation for the Steam Workshop.</p> <p>Once attached, the content will be available even if the underlying Cloud file is changed or deleted by the user.</p> <p>You must call findLeaderboard or findOrCreateLeaderboard to get a leaderboard handle prior to calling this function.</p> <p>Triggers a leaderboard_ugc_set callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#clearachievement","title":"clearAchievement","text":"<p>clearAchievement( <code>string</code> name )</p> <p>Resets the unlock status of an achievement.</p> <p>This is primarily only ever used for testing.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this.</p> <p>This call only modifies Steam's in-memory state so it is quite cheap. To send the unlock status to the server and to trigger the Steam overlay notification you must call storeStats.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#downloadleaderboardentries","title":"downloadLeaderboardEntries","text":"<p>downloadLeaderboardEntries( <code>int</code> start, <code>int</code> end, <code>int</code> type, <code>uint64_t</code> this_leaderboard )</p> <p>If no leaderboard_handle is passed, then the function will use the last internally-stored handle.</p> <p>Fetches a series of leaderboard entries for a specified leaderboard.</p> <p>You can ask for more entries than exist, then this will return as many as do exist.</p> <p>If you want to download entries for an arbitrary set of users, such as all of the users on a server then you can use downloadLeaderboardEntriesForUsers which takes an array of Steam IDs.</p> <p>You must call findLeaderboard or findOrCreateLeaderboard to get a leaderboard handle prior to calling this function.</p> <p>Triggers a leaderboard_scores_downloaded call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#downloadleaderboardentriesforusers","title":"downloadLeaderboardEntriesForUsers","text":"<p>downloadLeaderboardEntriesForUsers( <code>array</code> users_id, <code>uint64_t</code> this_leaderboard )</p> <p>If no leaderboard_handle is passed, then the function will use the last internally-stored handle.</p> <p>Fetches leaderboard entries for an arbitrary set of users on a specified leaderboard.</p> <p>A maximum of 100 users can be downloaded at a time, with only one outstanding call at a time. If a user doesn't have an entry on the specified leaderboard, they won't be included in the result.</p> <p>If you want to download entries based on their ranking or friends of the current user then you should use downloadLeaderboardEntries.</p> <p>You must call findLeaderboard or findOrCreateLeaderboard to get a leaderboard handle prior to calling this function.</p> <p>Triggers a leaderboard_scores_downloaded callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#findleaderboard","title":"findLeaderboard","text":"<p>findLeaderboard( <code>string</code> name )</p> <p>Gets a leaderboard by name.</p> <p>You must call either this or findOrCreateLeaderboard to obtain the leaderboard handle which is valid for the game session for each leaderboard you wish to access prior to calling any other Leaderboard functions.</p> <p>Triggers a leaderboard_find_result call result.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#findorcreateleaderboard","title":"findOrCreateLeaderboard","text":"<p>findOrCreateLeaderboard( <code>string</code> name, <code>int</code> sort_method, <code>int</code> display_type )</p> <p>Gets a leaderboard by name, it will create it if it's not yet created.</p> <p>You must call either this or findLeaderboard to obtain the leaderboard handle which is valid for the game session for each leaderboard you wish to access prior to calling any other Leaderboard functions.</p> <p>Leaderboards created with this function will not automatically show up in the Steam Community. You must manually set the Community Name field in the App Admin panel of the Steamworks website. As such it's generally recommended to prefer creating the leaderboards in the App Admin panel on the Steamworks website and using findLeaderboard unless you're expected to have a large amount of dynamically created leaderboards.</p> <p>You should never pass 0 for sort_method or 0 for display_type as this is undefined behavior.</p> <p>Triggers a leaderboard_find_result callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getachievement","title":"getAchievement","text":"<p>getAchievement( <code>string</code> name )</p> <p>Gets the unlock status of the Achievement.</p> <p>The equivalent function for other users is getUserAchievement.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ret (bool)</li> <li>achieved (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getachievementachievedpercent","title":"getAchievementAchievedPercent","text":"<p>getAchievementAchievedPercent( <code>string</code> name )</p> <p>Returns the percentage of users who have unlocked the specified achievement.</p> <p>You must have called requestGlobalAchievementPercentages and it needs to return successfully via its callback prior to calling this.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>ret (bool)</li> <li>percent (float)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getachievementandunlocktime","title":"getAchievementAndUnlockTime","text":"<p>getAchievementAndUnlockTime( <code>string</code> name )</p> <p>Gets the achievement status, and the time it was unlocked if unlocked.</p> <p>If the return value is true, but the unlock time is zero, that means it was unlocked before Steam began tracking achievement unlock times (December 2009). The time is provided in Unix epoch format, seconds since January 1, 1970 UTC.</p> <p>The equivalent function for other users is getUserAchievementAndUnlockTime.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>retrieve (bool)</li> <li>achieved (bool)</li> <li>unlocked (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getachievementdisplayattribute","title":"getAchievementDisplayAttribute","text":"<p>getAchievementDisplayAttribute( <code>string</code> name, <code>string</code> key )</p> <p>Get general attributes for an achievement. Currently provides: Name, Description, and Hidden status.</p> <p>This receives the value from a dictionary/map keyvalue store, so you must provide one of the following keys:</p> <ul> <li>name - to retrive the localized achievement name in UTF8</li> <li>desc - to retrive the localized achievement description in UTF8</li> <li>hidden - for retrieving if an achievement is hidden. Returns \"0\" when not hidden, \"1\" when hidden</li> </ul> <p>This localization is provided based on the games language if it's set, otherwise it checks if a localization is avilable for the users Steam UI Language. If that fails too, then it falls back to english.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getachievementicon","title":"getAchievementIcon","text":"<p>getAchievementIcon( <code>string</code> name )</p> <p>Gets the icon for an achievement.</p> <p>The image is returned as a handle to be used with getImageRGBA to get the actual image data.</p> <p>Returns: int</p> <p>See the Achievement Icons tutorial for an example.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getachievementname","title":"getAchievementName","text":"<p>getAchievementName( <code>uint32_t</code> achievement )</p> <p>Gets the 'API name' for an achievement index between 0 and getNumAchievements.</p> <p>This function must be used in conjunction with getNumAchievements to loop over the list of achievements.</p> <p>In general games should not need these functions as they should have the list of achievements compiled into them.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getachievementprogresslimitsfloat","title":"getAchievementProgressLimitsFloat","text":"<p>getAchievementProgressLimitsFloat( <code>string</code> name )</p> <p>For achievements that have related progress stats, use this to query what the bounds of that progress are. You may want this info to selectively call indicateAchievementProgress when appropriate milestones of progress have been made, to show a progress notification to the user.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>name (string)</li> <li>min (float)</li> <li>max (float)</li> </ul>"},{"location":"classes/user_stats/#getachievementprogresslimitsint","title":"getAchievementProgressLimitsInt","text":"<p>getAchievementProgressLimitsInt( <code>string</code> name )</p> <p>For achievements that have related progress stats, use this to query what the bounds of that progress are. You may want this info to selectively call indicateAchievementProgress when appropriate milestones of progress have been made, to show a progress notification to the user.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>name (string)</li> <li>min (int32)</li> <li>max (int32)</li> </ul>"},{"location":"classes/user_stats/#getglobalstatfloat","title":"getGlobalStatFloat","text":"<p>getGlobalStatFloat( <code>string</code> name )</p> <p>Gets the lifetime totals for an aggregated stat.</p> <p>You must have called requestGlobalStats and it needs to return successfully via its callback prior to calling this.</p> <p>Returns: float</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getglobalstatint","title":"getGlobalStatInt","text":"<p>getGlobalStatInt( <code>string</code> name )</p> <p>Gets the lifetime totals for an aggregated stat.</p> <p>You must have called requestGlobalStats and it needs to return successfully via its callback prior to calling this.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getglobalstatfloathistory","title":"getGlobalStatFloatHistory","text":"<p>getGlobalStatFloatHistory( <code>string</code> name )</p> <p>Gets the daily history for an aggregated stat.</p> <p>Returns: float</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getglobalstatinthistory","title":"getGlobalStatIntHistory","text":"<p>getGlobalStatIntHistory( <code>string</code> name )</p> <p>Gets the daily history for an aggregated stat.</p> <p>Returns: uint64_t</p> <p> Read more in the official Steamworks SDK documentation </p>"},{"location":"classes/user_stats/#getleaderboarddisplaytype","title":"getLeaderboardDisplayType","text":"<p>getLeaderboardDisplayType( <code>uint64_t</code> leaderboard_handle )</p> <p>If no leaderboard_handle is passed, then the function will use the last internally-stored handle.</p> <p>Get the display type of a leaderboard handle.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (int)</li> <li>verbal (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getleaderboardentries","title":"getLeaderboardEntries","text":"<p>getLeaderboardEntries()</p> <p>Get the currently used leaderboard entries.</p> <p>Returns: array</p> <p>Note: This is a GodotSteam specific function.</p>"},{"location":"classes/user_stats/#getleaderboardentrycount","title":"getLeaderboardEntryCount","text":"<p>getLeaderboardEntryCount( <code>uint64_t</code> this_leaderboard )</p> <p>If no leaderboard_handle is passed, then the function will use the last internally-stored handle.</p> <p>Returns the total number of entries in a leaderboard.</p> <p>This is cached on a per leaderboard basis upon the first call to findLeaderboard or findOrCreateLeaderboard and is refreshed on each successful call to downloadLeaderboardEntries, downloadLeaderboardEntriesForUsers, and uploadLeaderboardScore.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getleaderboardname","title":"getLeaderboardName","text":"<p>getLeaderboardName( <code>uint64_t</code> this_leaderboard )</p> <p>If no leaderboard_handle is passed, then the function will use the last internally-stored handle.</p> <p>Returns the name of a leaderboard handle.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getleaderboardsortmethod","title":"getLeaderboardSortMethod","text":"<p>getLeaderboardSortMethod( <code>uint64_t</code> this_leaderboard )</p> <p>If no leaderboard_handle is passed, then the function will use the last internally-stored handle.</p> <p>Get the sort order of a leaderboard handle. If no thisLeaderboard handle is passed, then the function will use the last stored internal handle.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>result (int)</li> <li>verbal (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getmostachievedachievementinfo","title":"getMostAchievedAchievementInfo","text":"<p>getMostAchievedAchievementInfo()</p> <p>Gets the info on the most achieved achievement for the game.</p> <p>You must have called requestGlobalAchievementPercentages and it needs to return successfully via its callback prior to calling this.</p> <p>Returns: dictionary</p> <p>Contains the following keys: * rank (int) * name (string) * percent (float) * achieved (bool)</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getnextmostachievedachievementinfo","title":"getNextMostAchievedAchievementInfo","text":"<p>getNextMostAchievedAchievementInfo( <code>int</code> iterator )</p> <p>Gets the info on the next most achieved achievement for the game.</p> <p>You must have called requestGlobalAchievementPercentages and it needs to return successfully via its callback prior to calling this.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>rank (int)</li> <li>name (string)</li> <li>percent (float)</li> <li>achieved (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getnumachievements","title":"getNumAchievements","text":"<p>getNumAchievements()</p> <p>Get the number of achievements defined in the App Admin panel of the Steamworks website.</p> <p>This is used for iterating through all of the achievements with getAchievementName.</p> <p>In general games should not need these functions because they should have a list of existing achievements compiled into them.</p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getnumberofcurrentplayers","title":"getNumberOfCurrentPlayers","text":"<p>getNumberOfCurrentPlayers()</p> <p>Asynchronously retrieves the total number of players currently playing the current game. Both online and in offline mode.</p> <p>Triggers a number_of_current_players callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getstatfloat","title":"getStatFloat","text":"<p>getStatFloat( <code>string</code> name )</p> <p>Gets the current value of the a stat for the current user.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this.</p> <p>To receive stats for other users use getUserStatFloat.</p> <p>Returns: float</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getstatint","title":"getStatInt","text":"<p>getStatInt( <code>string</code> name )</p> <p>Gets the current value of the a stat for the current user.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this.</p> <p>To receive stats for other users use getUserStatInt.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getuserachievement","title":"getUserAchievement","text":"<p>getUserAchievement( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Gets the unlock status of the Achievement.</p> <p>The equivalent function for the local user is getAchievement.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>steam_id (uint64_t)</li> <li>retrieved (bool)</li> <li>name (string)</li> <li>achieved (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getuserachievementandunlocktime","title":"getUserAchievementAndUnlockTime","text":"<p>getUserAchievementAndUnlockTime( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Gets the achievement status, and the time it was unlocked if unlocked.</p> <p>If the return value is true, but the unlock time is zero, that means it was unlocked before Steam began tracking achievement unlock times (December 2009). The time is provided in Unix epoch format, seconds since January 1, 1970 UTC.</p> <p>The equivalent function for the local user is getAchievementAndUnlockTime.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>retrieved (bool)</li> <li>name (string)</li> <li>achieved (bool)</li> <li>unlocked (uint32) </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getuserstatfloat","title":"getUserStatFloat","text":"<p>getUserStatFloat( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Gets the current value of the a stat for the specified user.</p> <p>You must have called requestUserStats and it needs to return successfully via its callback prior to calling this.</p> <p>The equivalent function for the local user is getStatFloat.</p> <p>Returns: float.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#getuserstatint","title":"getUserStatInt","text":"<p>getUserStatInt( <code>uint64_t</code> steam_id, <code>string</code> name )</p> <p>Gets the current value of the a stat for the specified user.</p> <p>You must have called requestUserStats and it needs to return successfully via its callback prior to calling this.</p> <p>The equivalent function for the local user is getStatInt.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#indicateachievementprogress","title":"indicateAchievementProgress","text":"<p>indicateAchievementProgress( <code>string</code> name, <code>int</code> currentProgress, <code>int</code> maxProgress )</p> <p>Shows the user a pop-up notification with the current progress of an achievement.</p> <p>Calling this function will not set the progress or unlock the achievement, the game must do that manually by calling setStatInt or setStatFloat.</p> <p>Triggers a user_stats_stored callback.</p> <p>Triggers a user_achievement_stored callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#requestcurrentstats","title":"requestCurrentStats","text":"<p>requestCurrentStats()</p> <p>Asynchronously request the user's current stats and achievements from the server.</p> <p>You must always call this first to get the initial status of stats and achievements. Only after the resulting callback comes back can you start calling the rest of the stats and achievement functions for the current user.</p> <p>The equivalent function for other users is requestUserStats.</p> <p>Triggers a current_stats_received callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#requestglobalachievementpercentages","title":"requestGlobalAchievementPercentages","text":"<p>requestGlobalAchievementPercentages()</p> <p>Asynchronously fetches global stats data, which is available for stats marked as \"aggregated\" in the App Admin panel of the Steamworks website.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this.</p> <p>Triggers a global_achievement_percentages_ready callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#requestglobalstats","title":"requestGlobalStats","text":"<p>requestGlobalStats( <code>int</code> history_days )</p> <p>Asynchronously fetches global stats data, which is available for stats marked as \"aggregated\" in the App Admin panel of the Steamworks website.</p> <p>The limit is 60.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this.</p> <p>Triggers a global_stats_received callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#requestuserstats","title":"requestUserStats","text":"<p>requestUserStats( <code>uint64_t</code> steam_id )</p> <p>Asynchronously downloads stats and achievements for the specified user from the server.</p> <p>These stats are not automatically updated; you'll need to call this function again to refresh any data that may have change. To keep from using too much memory, an least recently used cache (LRU) is maintained and other user's stats will occasionally be unloaded. When this happens a user_stats_unloaded callback is sent. After receiving this callback the user's stats will be unavailable until this function is called again.</p> <p>The equivalent function for the local user is requestCurrentStats.</p> <p>Triggers a user_stats_received callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#resetallstats","title":"resetAllStats","text":"<p>resetAllStats( <code>bool</code> achievements_too )</p> <p>Resets the current users stats and, optionally achievements.</p> <p>This automatically calls storeStats to persist the changes to the server. This should typically only be used for testing purposes during development. Ensure that you sync up your stats with the new default values provided by Steam after calling this by calling requestCurrentStats.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#setachievement","title":"setAchievement","text":"<p>setAchievement( <code>string</code> name )</p> <p>Unlocks an achievement.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this!</p> <p>You can unlock an achievement multiple times so you don't need to worry about only setting achievements that aren't already set. This call only modifies Steam's in-memory state so it is quite cheap. To send the unlock status to the server and to trigger the Steam overlay notification you must call storeStats.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#setleaderboarddetailsmax","title":"setLeaderboardDetailsMax","text":"<p>setLeaderboardDetailsMax( <code>int</code> max )</p> <p>Set the maximum number of details to return for leaderboard entries.</p> <p>Returns: int</p> <p>The current leaderboard details max value.  This can only go as high as k_cLeaderboardDetailsMax / 256.</p> <p>Note: This is a GodotSteam specific function.  It has been deprecated in GodotSteam 4.6.1.</p>"},{"location":"classes/user_stats/#setstatfloat","title":"setStatFloat","text":"<p>setStatFloat( <code>string</code> name, <code>float</code> value )</p> <p>Sets / updates the float value of a given stat for the current user.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this!</p> <p>This call only modifies Steam's in-memory state and is very cheap. Doing so allows Steam to persist the changes even in the event of a game crash or unexpected shutdown. To submit the stats to the server you must call storeStats.</p> <p>If this is returning false and everything appears correct, then check to ensure that your changes in the App Admin panel of the Steamworks website are published.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#setstatint","title":"setStatInt","text":"<p>setStatInt( <code>string</code> name, <code>int32</code> value )</p> <p>Sets / updates the integer value of a given stat for the current user.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this!</p> <p>This call only modifies Steam's in-memory state and is very cheap. Doing so allows Steam to persist the changes even in the event of a game crash or unexpected shutdown. To submit the stats to the server you must call storeStats.</p> <p>If this is returning false and everything appears correct, then check to ensure that your changes in the App Admin panel of the Steamworks website are published.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#storestats","title":"storeStats","text":"<p>storeStats()</p> <p>Send the changed stats and achievements data to the server for permanent storage.</p> <p>If this fails then nothing is sent to the server. It's advisable to keep trying until the call is successful.</p> <p>This call can be rate limited. Call frequency should be on the order of minutes, rather than seconds. You should only be calling this during major state changes such as the end of a round, the map changing, or the user leaving a server. This call is required to display the achievement unlock notification dialog though, so if you have called setAchievement then it's advisable to call this soon after that.</p> <p>If you have stats or achievements that you have saved locally but haven't uploaded with this function when your application process ends then this function will automatically be called.</p> <p>You can find additional debug information written to the <code>%steam_install%\\logs\\stats_log.txt</code> file.</p> <p>Triggers a user_stats_stored callback.</p> <p>Triggers a user_achievement_stored callback.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#updateavgratestat","title":"updateAvgRateStat","text":"<p>updateAvgRateStat( <code>string</code> name, <code>float</code> this_session, <code>double</code> session_length )</p> <p>Updates an AVGRATE stat with new values.</p> <p>You must have called requestCurrentStats and it needs to return successfully via its callback prior to calling this!</p> <p>This call only modifies Steam's in-memory state and is very cheap. Doing so allows Steam to persist the changes even in the event of a game crash or unexpected shutdown. To submit the stats to the server you must call storeStats.</p> <p>If this is returning false and everything appears correct, then check to ensure that your changes in the App Admin panel of the Steamworks website are published.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#uploadleaderboardscore","title":"uploadLeaderboardScore","text":"<p>uploadLeaderboardScore( <code>int32</code> score, <code>bool</code> keep_best, <code>array</code> details, <code>uint64_t</code> this_leaderboard )</p> <p>If this_leaderboard is not passed, then the function will use the last internally-stored handle.</p> <p>Uploads a user score to a specified leaderboard.</p> <p>Details are optional game-defined information which outlines how the user got that score. For example if it's a racing style time based leaderboard you could store the timestamps when the player hits each checkpoint. If you have collectibles along the way you could use bit fields as booleans to store the items the player picked up in the playthrough.</p> <p>Uploading scores to Steam is rate limited to 10 uploads per 10 minutes and you may only have one outstanding call to this function at a time.</p> <p>Triggers a leaderboard_score_uploaded callback.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/user_stats/#signals","title":"Signals","text":""},{"location":"classes/user_stats/#current_stats_received","title":"current_stats_received","text":"<p>current_stats_received</p> <p>Called when the latest stats and achievements for the local user have been received from the server; in response to function requestCurrentStats.</p> <p>Returns:</p> <ul> <li>game (uint64_t)</li> <li>result (uint32_t)</li> <li>user (uint64_t) as Steam ID</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#global_achievement_percentages_ready","title":"global_achievement_percentages_ready","text":"<p>global_achievement_percentages_ready</p> <p>Called when the global achievement percentages have been received from the server.</p> <p>Returns:</p> <ul> <li>game (uint64_t)</li> <li>result (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#global_stats_received","title":"global_stats_received","text":"<p>global_stats_received</p> <p>Called when the global stats have been received from the server.</p> <p>Returns:</p> <ul> <li>game_id (uint64_t)</li> <li>result (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#leaderboard_find_result","title":"leaderboard_find_result","text":"<p>leaderboard_find_result</p> <p>Result when finding a leaderboard.</p> <p>Returns:</p> <ul> <li>leaderboard_handle (uint64_t)</li> <li>found (uint8_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#leaderboard_scores_downloaded","title":"leaderboard_scores_downloaded","text":"<p>leaderboard_scores_downloaded</p> <p>Called when scores for a leaderboard have been downloaded and are ready to be retrieved.</p> <p>Returns:</p> <ul> <li>message (string)</li> <li>this_handle (uint64_t)</li> <li>leaderboard_entries_array (array)<ul> <li>entry_dict (dictionary)<ul> <li>score (int)</li> <li>steam_id (uint64_t)</li> <li>global_rank (int)</li> <li>ugc_handle (uint64_t)</li> <li>details (array)</li> </ul> </li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#leaderboard_score_uploaded","title":"leaderboard_score_uploaded","text":"<p>leaderboard_score_uploaded</p> <p>Result indicating that a leaderboard score has been uploaded.</p> <p>Returns:</p> <ul> <li>success (uint8)</li> <li>this_handle (uint64_t)</li> <li>this_score (dictionary)<ul> <li>score (int32)</li> <li>score_changed (uint8)</li> <li>global_rank_new (int)</li> <li>global_rank_prev (int)</li> </ul> </li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#leaderboard_ugc_set","title":"leaderboard_ugc_set","text":"<p>leaderboard_ugc_set</p> <p>Result indicating that user generated content has been attached to one of the current user's leaderboard entries.</p> <p>Returns:</p> <ul> <li>leaderboard_handle (uint64_t)</li> <li>result (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#number_of_current_players","title":"number_of_current_players","text":"<p>number_of_current_players</p> <p>Gets the current number of players for the current app ID.</p> <p>Returns:</p> <ul> <li>success (uint8)</li> <li>players (int32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#user_achievement_icon_fetched","title":"user_achievement_icon_fetched","text":"<p>user_achievement_icon_fetched</p> <p>Result of an achievement icon that has been fetched.</p> <p>Returns:</p> <ul> <li>game_id (int)</li> <li>achievement_name (string)</li> <li>achieved (bool)</li> <li>icon_handle (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#user_achievement_stored","title":"user_achievement_stored","text":"<p>user_achievement_stored</p> <p>Result of a request to store the achievements on the server, or an \"indicate progress\" call. If both current progress and max progress are zero, that means the achievement has been fully unlocked.</p> <p>Returns:</p> <ul> <li>game_id (uint64_t)</li> <li>group_achieve (bool)</li> <li>name (string)</li> <li>current_progress (uint32_t)</li> <li>max_progress (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#user_stats_received","title":"user_stats_received","text":"<p>user_stats_received</p> <p>Called when the latest stats and achievements for a specific user (including the local user) have been received from the server.</p> <p>Returns:</p> <ul> <li>game_id (uint64_t)</li> <li>result (uint32_t)</li> <li>user (uint64_t) as Steam ID</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#user_stats_stored","title":"user_stats_stored","text":"<p>user_stats_stored</p> <p>Result of a request to store the user stats.</p> <p>Returns:</p> <ul> <li>game_id (uint64_t)</li> <li>result (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#user_stats_unloaded","title":"user_stats_unloaded","text":"<p>user_stats_unloaded</p> <p>Callback indicating that a user's stats have been unloaded. Call requestUserStats again before accessing stats for this user.</p> <p>Returns:</p> <ul> <li>user (uint64_t) as Steam ID</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/user_stats/#enums","title":"Enums","text":""},{"location":"classes/user_stats/#leaderboarddatarequest","title":"LeaderboardDataRequest","text":"Enumerator Value LEADERBOARD_DATA_REQUEST_GLOBAL 0 LEADERBOARD_DATA_REQUEST_GLOBAL_AROUND_USER 1 LEADERBOARD_DATA_REQUEST_FRIENDS 2 LEADERBOARD_DATA_REQUEST_USERS 3"},{"location":"classes/user_stats/#leaderboarddisplaytype","title":"LeaderboardDisplayType","text":"Enumerator Value LEADERBOARD_DISPLAY_TYPE_NONE 0 LEADERBOARD_DISPLAY_TYPE_NUMERIC 1 LEADERBOARD_DISPLAY_TYPE_TIME_SECONDS 2 LEADERBOARD_DISPLAY_TYPE_TIME_MILLISECONDS 3"},{"location":"classes/user_stats/#leaderboardsortmethod","title":"LeaderboardSortMethod","text":"Enumerator Value LEADERBOARD_SORT_METHOD_NONE 0 LEADERBOARD_SORT_METHOD_ASCENDING 1 LEADERBOARD_SORT_METHOD_DESCENDING 2"},{"location":"classes/user_stats/#leaderboarduploadscoremethod","title":"LeaderboardUploadScoreMethod","text":"Enumerator Value LEADERBOARD_UPLOAD_SCORE_METHOD 0 LEADERBOARD_UPLOAD_SCORE_METHOD_KEEP_BEST 1 LEADERBOARD_UPLOAD_SCORE_METHOD_FORCE_UPDATE 2"},{"location":"classes/user_stats/#steamuserstattype","title":"SteamUserStatType","text":"Enumerator Value STEAM_USER_STAT_TYPE_INVALID 0 STEAM_USER_STAT_TYPE_INT 1 STEAM_USER_STAT_TYPE_FLOAT 2 STEAM_USER_STAT_TYPE_AVGRATE 3 STEAM_USER_STAT_TYPE_ACHIEVEMENTS 4 STEAM_USER_STAT_TYPE_GROUPACHIEVEMENTS 5 STEAM_USER_STAT_TYPE_MAX 6"},{"location":"classes/utils/","title":"Utils","text":"<p>Only available in the main GodotSteam branches</p>"},{"location":"classes/utils/#functions","title":"Functions","text":""},{"location":"classes/utils/#dismissfloatinggamepadtextinput","title":"dismissFloatingGamepadTextInput","text":"<p>dismissFloatingGamepadTextInput( )</p> <p>Dismisses the floating keyboard.</p> <p>Returns: bool</p>"},{"location":"classes/utils/#dismissgamepadtextinput","title":"dismissGamepadTextInput","text":"<p>dismissGamepadTextInput( )</p> <p>Dismisses the full-screen text input dialog.</p> <p>Returns: bool</p>"},{"location":"classes/utils/#filtertext","title":"filterText","text":"<p>filterText( <code>int</code> context, <code>uint64_t</code> steam_id, <code>string</code> message )</p> <p>Filters the provided input message and returns the filtered result. Legally required filtering is always applied. Additional filtering may occur, based on the context and user settings.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getapicallfailurereason","title":"getAPICallFailureReason","text":"<p>getAPICallFailureReason()</p> <p>Used to get the failure reason of a call result.</p> <p>The primary usage for this function is debugging. The failure reasons are typically out of your control and tend to not be very important. Just keep retrying your API Call until it works.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getappid","title":"getAppID","text":"<p>getAppID()</p> <p>Gets the App ID of the current process.</p> <p>Returns: uint32_t</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getcurrentbatterypower","title":"getCurrentBatteryPower","text":"<p>getCurrentBatteryPower()</p> <p>Gets the current amount of battery power on the computer.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getimagergba","title":"getImageRGBA","text":"<p>getImageRGBA( <code>int</code> image )</p> <p>Gets the image bytes from an image handle.</p> <p>Prior to calling this you must get the size of the image by calling getImageSize so that you can create your buffer with an appropriate size. You can then allocate your buffer with the width and height as: width * height * 4. The image is provided in RGBA format. This call can be somewhat expensive as it converts from the compressed type (JPG, PNG, TGA) and provides no internal caching of returned buffer, thus it is highly recommended to only call this once per image handle and cache the result. This function is only used for Steam Avatars and Achievement images and those are not expected to change mid game.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>buffer (PoolByteArray / PackedByteArray)</li> <li>success (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getimagesize","title":"getImageSize","text":"<p>getImageSize( <code>int</code> image )</p> <p>Gets the size of a Steam image handle.</p> <p>This must be called before calling getImageRGBA to create an appropriately sized buffer that will be filled with the raw image data.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>width (uint32)</li> <li>height (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getipccallcount","title":"getIPCCallCount","text":"<p>getIPCCallCount()</p> <p>Returns the number of IPC calls made since the last time this function was called.</p> <p>Used for perf debugging so you can determine how many IPC (Inter-Process Communication) calls your game makes per frame.</p> <p>Every IPC call is at minimum a thread context switch if not a process one so you want to rate control how often you do them.</p> <p>Returns: uint32</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getipcountry","title":"getIPCountry","text":"<p>getIPCountry()</p> <p>Returns the 2 digit ISO 3166-1-alpha-2 format country code which client is running in. e.g \"US\" or \"UK\".</p> <p>This is looked up via an IP-to-location database.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getsecondssinceappactive","title":"getSecondsSinceAppActive","text":"<p>getSecondsSinceAppActive()</p> <p>Returns the number of seconds since the application was active.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getsecondssincecomputeractive","title":"getSecondsSinceComputerActive","text":"<p>getSecondsSinceComputerActive()</p> <p>Returns the number of seconds since the user last moved the mouse.</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getserverrealtime","title":"getServerRealTime","text":"<p>getServerRealTime()</p> <p>Returns the Steam server time in Unix epoch format. (Number of seconds since Jan 1, 1970 UTC).</p> <p>Returns: int</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#getsteamuilanguage","title":"getSteamUILanguage","text":"<p>getSteamUILanguage()</p> <p>Returns the language the steam client is running in.</p> <p>You probably want getCurrentGameLanguage instead, this should only be used in very special cases.</p> <p>For a full list of languages see Supported Languages.</p> <p>Returns: string</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#initfiltertext","title":"initFilterText","text":"<p>initFilterText()</p> <p>Initializes text filtering, loading dictionaries for the language the game is running in.</p> <p>Users can customize the text filter behavior in their Steam Account preferences.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#isapicallcompleted","title":"isAPICallCompleted","text":"<p>isAPICallCompleted()</p> <p>Checks if an API Call is completed. Provides the backend of the CallResult wrapper.</p> <p>It's generally not recommended that you use this yourself.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>completed (bool)</li> <li>failed (bool)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#isoverlayenabled","title":"isOverlayEnabled","text":"<p>isOverlayEnabled()</p> <p>Checks if the Steam Overlay is running &amp; the user can access it.</p> <p>The overlay process could take a few seconds to start &amp; hook the game process, so this function will initially return false while the overlay is loading.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#issteamchinalauncher","title":"isSteamChinaLauncher","text":"<p>isSteamChinaLauncher()</p> <p>Returns whether the current launcher is a Steam China launcher. You can cause the client to behave as the Steam China launcher by adding <code>-dev -steamchina</code> to the command line when running Steam.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#issteaminbigpicturemode","title":"isSteamInBigPictureMode","text":"<p>isSteamInBigPictureMode()</p> <p>Checks if Steam &amp; the Steam Overlay are running in Big Picture mode.</p> <p>Games must be launched through the Steam client to enable the Big Picture overlay. During development, a game can be added as a non-steam game to the developers library to test this feature.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#issteamrunninginvr","title":"isSteamRunningInVR","text":"<p>isSteamRunningInVR()</p> <p>Checks if Steam is running in VR mode.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#issteamrunningonsteamdeck","title":"isSteamRunningOnSteamDeck","text":"<p>isSteamRunningOnSteamDeck()</p> <p>Checks if Steam is running on a Steam Deck device.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#isvrheadsetstreamingenabled","title":"isVRHeadsetStreamingEnabled","text":"<p>isVRHeadsetStreamingEnabled()</p> <p>Checks if the HMD view will be streamed via Steam In-Home Streaming.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#overlayneedspresent","title":"overlayNeedsPresent","text":"<p>overlayNeedsPresent()</p> <p>Checks if the Overlay needs a present. Only required if using event driven render updates.</p> <p>Typically this call is unneeded if your game has a constantly running frame loop that calls the D3D Present API, or OGL SwapBuffers API every frame as is the case in most games. However, if you have a game that only refreshes the screen on an event driven basis then that can break the overlay, as it uses your Present/SwapBuffers calls to drive it's internal frame loop and it may also need to Present() to the screen any time a notification happens or when the overlay is brought up over the game by a user. You can use this API to ask the overlay if it currently need a present in that case, and then you can check for this periodically (roughly 33hz is desirable) and make sure you refresh the screen with Present or SwapBuffers to allow the overlay to do it's work.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#setgamelaunchermode","title":"setGameLauncherMode","text":"<p>setGameLauncherMode( <code>bool</code> mode)</p> <p>In game launchers that don't have controller support you can call this to have Steam Input translate the controller input into mouse/kb to navigate the launcher.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#setoverlaynotificationinset","title":"setOverlayNotificationInset","text":"<p>setOverlayNotificationInset( <code>int</code> horizontal, <code>int</code> vertical )</p> <p>Sets the inset of the overlay notification from the corner specified by setOverlayNotificationPosition. Integer should be number of pixels.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#setoverlaynotificationposition","title":"setOverlayNotificationPosition","text":"<p>setOverlayNotificationPosition( <code>int</code> pos )</p> <p>Set the position where overlay shows notifications. Accepts the following integer inputs:</p> <ul> <li>0 - Top Left</li> <li>1 - Top Right</li> <li>2 - Bottom Left</li> <li>3 - Bottom Right</li> </ul> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#setvrheadsetstreamingenabled","title":"setVRHeadsetStreamingEnabled","text":"<p>setVRHeadsetStreamingEnabled()</p> <p>Set whether the HMD content will be streamed via Steam In-Home Streaming.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#showgamepadtextinput","title":"showGamepadTextInput","text":"<p>showGamepadTextInput( <code>int</code> input_mode, <code>int</code> line_input_mode, <code>string</code> description, <code>uint32</code> max_text, <code>string</code> preset_text )</p> <p>Activates the Big Picture text input dialog which only supports gamepad input.</p> <p>Returns: bool</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#showfloatinggamepadtextinput","title":"showFloatingGamepadTextInput","text":"<p>showFloatingGamepadTextInput( <code>int</code> input_mode, <code>int</code> text_field_x_position, <code>int</code> text_field_y_position, <code>int</code> text_field_width, <code>int</code> text_field_height )</p> <p>Opens a floating keyboard over the game content and sends OS keyboard keys directly to the game.</p> <p>The text field position is specified in pixels relative the origin of the game window and is used to position the floating keyboard in a way that doesn't cover the text field.</p> <p>Returns: <code>bool</code></p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#startvrdashboard","title":"startVRDashboard","text":"<p>startVRDashboard()</p> <p>Ask SteamUI to create and render its OpenVR dashboard.</p> <p>Returns: void</p> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/utils/#signals","title":"Signals","text":""},{"location":"classes/utils/#app_resuming_from_suspend","title":"app_resuming_from_suspend","text":"<p>app_resuming_from_suspend</p> <p>Sent after the device returns from sleep/suspend mode.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#check_file_signature","title":"check_file_signature","text":"<p>check_file_signature</p> <p>Call result for checkFileSignature.</p> <p>Returns:</p> <ul> <li>signature (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#filter_text_dictionary_changed","title":"filter_text_dictionary_changed","text":"<p>filter_text_dictionary_changed</p> <p>Sent when the text filtering dictionary has changed languages.</p> <p>Returns:</p> <ul> <li>language (int)    </li> </ul>"},{"location":"classes/utils/#floating_gamepad_text_input_dismissed","title":"floating_gamepad_text_input_dismissed","text":"<p>floating_gamepad_text_input_dismissed</p> <p>Called when the floating keyboard invoked from showFloatingGamepadTextInput has been closed.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#gamepad_text_input_dismissed","title":"gamepad_text_input_dismissed","text":"<p>gamepad_text_input_dismissed</p> <p>Called when the Big Picture gamepad text input has been closed.</p> <p>Returns:</p> <ul> <li>submitted (bool)</li> <li>text (string)</li> <li>app_id (uint32_t)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#ip_country","title":"ip_country","text":"<p>ip_country</p> <p>Called when the country of the user changed. The country should be updated with getIPCountry.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#low_power","title":"low_power","text":"<p>low_power</p> <p>Called when running on a laptop and less than 10 minutes of battery is left, and then fires then every minute afterwards.</p> <p>Returns: * power (uint8)</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#steam_api_call_completed","title":"steam_api_call_completed","text":"<p>steam_api_call_completed</p> <p>Called when a SteamAPICall_t has completed or failed.</p> <p>Returns:</p> <ul> <li>async_call (uint64_t)</li> <li>callback (int)</li> <li>parameter (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#steam_shutdown","title":"steam_shutdown","text":"<p>steam_shutdown</p> <p>Called when Steam wants to shut down.</p> <p>Returns: nothing</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/utils/#enums","title":"Enums","text":""},{"location":"classes/utils/#checkfilesignature","title":"CheckFileSignature","text":"Enumerator Value CHECK_FILE_SIGNATURE_INVALID_SIGNATURE 0 CHECK_FILE_SIGNATURE_VALID_SIGNATURE 1 CHECK_FILE_SIGNATURE_FILE_NOT_FOUND 2 CHECK_FILE_SIGNATURE_NO_SIGNATURES_FOUND_FOR_THIS_APP 3 CHECK_FILE_SIGNATURE_NO_SIGNATURES_FOUND_FOR_THIS_FILE 4"},{"location":"classes/utils/#gamepadtextinputlinemode","title":"GamepadTextInputLineMode","text":"Enumerator Value GAMEPAD_TEXT_INPUT_LINE_MODE_SINGLE_LINE 0 GAMEPAD_TEXT_INPUT_LINE_MODE_MULTIPLE_LINES 1"},{"location":"classes/utils/#gamepadtextinputmode","title":"GamepadTextInputMode","text":"Enumerator Value GAMEPAD_TEXT_INPUT_MODE_NORMAL 0 GAMEPAD_TEXT_INPUT_MODE_PASSWORD 1"},{"location":"classes/utils/#floatinggamepadtextinputmode","title":"FloatingGamepadTextInputMode","text":"Enumerator Value FLOATING_GAMEPAD_TEXT_INPUT_MODE_SINGLE_LINE 0 FLOATING_GAMEPAD_TEXT_INPUT_MODE_MULTIPLE_LINES 1 FLOATING_GAMEPAD_TEXT_INPUT_MODE_EMAIL 2 FLOATING_GAMEPAD_TEXT_INPUT_MODE_NUMERIC 3"},{"location":"classes/utils/#steamapicallfailure","title":"SteamAPICallFailure","text":"Enumerator Value STEAM_API_CALL_FAILURE_NONE -1 STEAM_API_CALL_FAILURE_STEAM_GONE 0 STEAM_API_CALL_FAILURE_NETWORK_FAILURE 1 STEAM_API_CALL_FAILURE_INVALID_HANDLE 2 STEAM_API_CALL_FAILURE_MISMATCHED_CALLBACK 3"},{"location":"classes/utils/#textfilteringcontext","title":"TextFilteringContext","text":"Enumerator Value TEXT_FILTERING_CONTEXT_UNKNOWN 0 TEXT_FILTERING_CONTEXT_GAME_CONTENT 1 TEXT_FILTERING_CONTEXT_CHAT 2 TEXT_FILTERING_CONTEXT_NAME 3"},{"location":"classes/video/","title":"Video","text":"<p>Provides functions to interface with the Steam video and broadcasting platforms. See\u00a0Steam Video\u00a0for more information.</p> <p>Only available in the main GodotSteam branches</p>"},{"location":"classes/video/#functions","title":"Functions","text":""},{"location":"classes/video/#getopfsettings","title":"getOPFSettings","text":"<p>getOPFSettings( <code>uint32_t</code> app_id )</p> <p>Get the OPF details for 360 video playback. </p> <p>To retrieve the 360 OPF (open projection format) data to playback a 360 video, start by making a call to this, then the callback will indicate whether the request was successful. If it was successful, the actual OPF JSON data can be retrieved with a call to getOPFStringForApp.</p> <p>Returns: void</p> <p>Notes: Triggers a get_opf_settings_result callback.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/video/#getopfstringforapp","title":"getOPFStringForApp","text":"<p>getOPFStringForApp( <code>uint32_t</code> app_id )</p> <p>Gets the OPF string for the specified video app ID.</p> <p>Once the callback for get_opf_settings_result has been raised and the EResult indicates success, then calling this will return back the actual OPF data in a JSON format. The size of the OPF string varies, but at this time 48,000 bytes should be sufficient to contain the full string.</p> <p>Returns: string</p> <p>Note: The data returned in a successful call to getOPFStringForApp can only be retrieved once. If you need to retrieve it multiple times, a call to getOPFSettings will need to be made each time.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/video/#getvideourl","title":"getVideoURL","text":"<p>getVideoURL( <code>uint32_t</code> app_id )</p> <p>Asynchronously gets the URL suitable for streaming the video associated with the specified video app ID. </p> <p>Returns: void</p> <p>Notes: Triggers a get_video_result callback.</p> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/video/#isbroadcasting","title":"isBroadcasting","text":"<p>isBroadcasting()</p> <p>Checks if the user is currently live broadcasting and gets the number of users.</p> <p>Returns: dictionary</p> <p>Contains the following keys:</p> <ul> <li>broadcasting (bool)</li> <li>viewers (int)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p> <p>These callbacks require you to run <code>Steam.run_callbacks()</code> in your <code>_process()</code> function to receive them.</p>"},{"location":"classes/video/#signals","title":"Signals","text":""},{"location":"classes/video/#get_opf_settings_result","title":"get_opf_settings_result","text":"<p>get_opf_settings_result</p> <p>Triggered when the OPF Details for 360 video playback are retrieved. After receiving this you can use getOPFStringForApp to access the OPF details.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>app_id (uint32)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"classes/video/#get_video_result","title":"get_video_result","text":"<p>get_video_result</p> <p>Provides the result of a call to getVideoURL.</p> <p>Returns:</p> <ul> <li>result (int)</li> <li>app_id (uint32)</li> <li>url (string)</li> </ul> <p> Read more in the official Steamworks SDK documentation</p>"},{"location":"contribute/contributors/","title":"Code Contributors and Donors","text":"<p>Here is a list of all the great contributors, both those who have provided code for GodotSteam through pull requests or those who have donated to the project. A big thanks to all of you!</p> <p> </p> <p>Code Contributors</p> <ul> <li>AlexHoratio</li> <li>Antokolos</li> <li>ArchiRocksTech</li> <li>Avencherus</li> <li>blaze-the-star</li> <li>brogan89</li> <li>cbinners</li> <li>ClockRate</li> <li>ConnorBP</li> <li>craftablescience</li> <li>Deozaan</li> <li>dsnopek</li> <li>EIREXE</li> <li>endaye</li> <li>Fischer96</li> <li>Foxushka</li> <li>freehuntx</li> <li>Frostings</li> <li>greenfox1505</li> <li>guimarca</li> <li>Handagotes</li> <li>Hangman</li> <li>hhyyrylainen</li> <li>Hung-Fan Liu</li> <li>IlyaStuurFedorov</li> <li>ismailgamedev</li> <li>JDare</li> <li>jeremybeier</li> <li>Jupither</li> <li>Kliiyu</li> <li>kongo555</li> <li>Kryx-Ikyr</li> <li>hungFI</li> <li>Lunatix89</li> <li>marcelofg55</li> <li>MartinAppDev</li> <li>mashumafi</li> <li>MichaelBelousov</li> <li>mikix</li> <li>Oleksii Zaremskyi</li> <li>pixelriot</li> <li>polyrain</li> <li>profour</li> <li>qarmin</li> <li>Ralian</li> <li>raulsntos</li> <li>rebane2001</li> <li>rsomers1998</li> <li>SapphireMH</li> <li>sepTN</li> <li>shuriken1812</li> <li>SlejmUr</li> <li>StephenCathcart</li> <li>Tamper2</li> <li>troykinsella</li> <li>xsellier</li> <li>vaartis</li> <li>VictorienXP</li> <li>yeonghoey</li> <li>Zee Weasel</li> </ul> <p>Donors</p> <ul> <li>AndreaJens</li> <li>Andrew Yates</li> <li>ArchWitch Games</li> <li>Avencherus</li> <li>Charles Maddock</li> <li>columbiacolles</li> <li>d4rkd0s</li> <li>David Wery</li> <li>David-AW</li> <li>DeadlyEssence01</li> <li>Dillon Joel Steyl</li> <li>Don Piano</li> <li>eflake</li> <li>Elgenzay</li> <li>Garrett Steffen</li> <li>Hannes Breuer</li> <li>Hung-Fan Liu</li> <li>InkRobert</li> <li>isikdos</li> <li>Jakub Nowak</li> <li>Jayden Sipe</li> <li>Jeroen Heijmans</li> <li>Jez</li> <li>John Flickinger</li> <li>John H Wright</li> <li>Josef Attenberger</li> <li>Justo Delgado</li> <li>Kat Hirsch</li> <li>Kent Jofur</li> <li>Kodera Software</li> <li>Mauricio Castillo</li> <li>Martin Eigel</li> <li>Michael Macha</li> <li>Mike King</li> <li>Mikk Maasik</li> <li>MudbuG</li> <li>Nicholas Orlowski</li> <li>pixelriot</li> <li>Ranoller</li> <li>Ren\u00e9 Habermann</li> <li>Ricardo Sernaglia</li> <li>Ronan Docherty</li> <li>RosenX</li> <li>Shine Right Studio</li> <li>Siddhant Chereddy</li> <li>Simone M\u00e4ndl</li> <li>Thorsten Schleinzer</li> <li>Wonderful Days Studio</li> <li>Zee Weasel</li> <li>Zeo L\u00f6wenhielm</li> </ul> <p>The best way you can help out with this module is by making some pull requests with fixes or additions. There is a healthy list of additions and fixes needed in the To-Do section currently. You can also provide tutorials for different aspects of the module.</p>"},{"location":"contribute/donations/","title":"Donating To GodotSteam","text":"<p>If code isn't your strong-suit or you are feeling generous, you can always donate to the GodotSteam project through Github Sponsors. Doing so will get you a variety of little perks based on your donation amount.</p> <p>Everyone gets added to our documentation's contributor list and one link is permitted per donor. You may have to e-mail us at donors@godotsteam.com as your contact information isn't shared with us through GitHub Sponsors.</p> <p>Donors get access to our private Sponsors repository which contains in-the-works versions of GodotSteam, Components, and other projects. A beta key to Skillet is also provided to all active donors prior to the game's release.</p> <p> GitHub Sponsors</p> <p>We also have to manually add you in the Discord server, if you are a member. Just reach out to one of the moderators to get your role! And, most importantly, thank you!</p>"},{"location":"contribute/rules/","title":"Contributing Code Or Docs To GodotSteam","text":"<p> Main Project  Server  Documentation  Examples</p> <p>There is a convention we try to keep, which seems like a hodge-podge of styles:</p> <ul> <li> Use camel-case for all function names. We mostly follow Valve's lead with this instead of Godot's, but we have discussed changing it.</li> <li> Use snake-case for all signal names, variables, and arguments.</li> <li> <p> Make sure your code compiles before submitting a pull-request. Run a quick:</p> Godot 2.x, 3.xGodot 4.x <pre><code>scons platform=[your platform] production=yes tools=yes target=release_debug\n</code></pre> <pre><code>scons platform=[your platform] tools=yes target=editor\n</code></pre> </li> </ul> <p>We'll figure the rest out later. So far that's it!</p> <p>Add new examples or edit the existing ones. </p> <p>Please try to keep most of the standard Godot conventions, use snake_case, double linebreak between functions, etc.</p> <p>Don't shy away from explaining things in the comments. Since these are meant for people to learn adn figure out how Steamworks functions, definitely pack in any information you think necessary.</p> <p>Feel free to make any edits you think are needed, really. CSS changes, new tutorials, extra links, fixes for functions or signals, or even adding your own game to the \"Games Using GodotSteam\" list.</p> <p>Try to make any new or edited content fit the same styles as the other pages.  But if you have an eye for design and think of something better, please share that too.</p> <p>Thank you for helping make the project more useful for the community!</p>"},{"location":"contribute/rules/#modifying-code","title":"Modifying Code","text":""},{"location":"contribute/rules/#modifying-examples","title":"Modifying Examples","text":""},{"location":"contribute/rules/#modifying-docs","title":"Modifying Docs","text":""},{"location":"games/games-0-9/","title":"Games Using GodotSteam | Starts With 0 - 9","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-0-9/#100-steps","title":"100 Steps","text":""},{"location":"games/games-0-9/#1000-days-to-escape","title":"1,000 Days To Escape","text":""},{"location":"games/games-a/","title":"Games Using GodotSteam | Starts With A","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-a/#a-frail-qubit","title":"A Frail Qubit","text":""},{"location":"games/games-a/#abstract-hell","title":"Abstract Hell","text":""},{"location":"games/games-a/#achieve-its","title":"Achieve-Its","text":""},{"location":"games/games-a/#the-adventure-of-nayu","title":"The Adventure of NAYU","text":""},{"location":"games/games-a/#aetheris","title":"AETHERIS","text":""},{"location":"games/games-a/#ailin-traps-and-treasures","title":"Ailin: Traps and Treasures","text":""},{"location":"games/games-a/#alphaman","title":"Alphaman","text":""},{"location":"games/games-a/#am-madness","title":"Am Madness","text":""},{"location":"games/games-a/#astrominer","title":"AstroMiner","text":""},{"location":"games/games-a/#avalog","title":"Avalog","text":""},{"location":"games/games-a/#axe-ghost","title":"Axe Ghost","text":""},{"location":"games/games-b/","title":"Games Using GodotSteam | Starts With B","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-b/#backpack-battles","title":"Backpack Battles","text":""},{"location":"games/games-b/#barkelona","title":"Barkelona","text":""},{"location":"games/games-b/#bearnard","title":"Bearnard","text":""},{"location":"games/games-b/#beaver-clicker","title":"Beaver Clicker","text":""},{"location":"games/games-b/#berserker-a-viking-board-game","title":"Berserker: A Viking Board Game","text":""},{"location":"games/games-b/#bitbattle","title":"BitBattle","text":""},{"location":"games/games-b/#bitgun","title":"BITGUN","text":""},{"location":"games/games-b/#blastronaut","title":"Blastronaut","text":""},{"location":"games/games-b/#brickfest","title":"Brickfest","text":""},{"location":"games/games-b/#brotato","title":"Brotato","text":""},{"location":"games/games-b/#buckshot-roulette","title":"Buckshot Roulette","text":""},{"location":"games/games-b/#bunny-hungry","title":"Bunny Hungry","text":""},{"location":"games/games-b/#burrito-bear","title":"Burrito Bear","text":""},{"location":"games/games-c/","title":"Games Using GodotSteam | Starts With C","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-c/#captain-collision","title":"Captain Collision","text":""},{"location":"games/games-c/#capital-island","title":"Capital Island","text":""},{"location":"games/games-c/#canvas-of-kings","title":"Canvas of Kings","text":""},{"location":"games/games-c/#card-fuse","title":"Card Fuse","text":""},{"location":"games/games-c/#cat-box-paradox","title":"Cat Box Paradox","text":""},{"location":"games/games-c/#cat-cafe-manager","title":"Cat Cafe Manager","text":""},{"location":"games/games-c/#chess-opening-repertoire-builder","title":"Chess Opening Repertoire Builder","text":""},{"location":"games/games-c/#chesslike","title":"Chesslike","text":""},{"location":"games/games-c/#chicken-fight","title":"Chicken Fight","text":""},{"location":"games/games-c/#chillquarium","title":"Chillquarium","text":""},{"location":"games/games-c/#clive-vs-hives-2","title":"Clive vs Hives 2","text":""},{"location":"games/games-c/#collection-quest","title":"Collection Quest","text":""},{"location":"games/games-c/#comic-company-manager","title":"Comic Company Manager","text":""},{"location":"games/games-c/#commuter","title":"Commuter","text":""},{"location":"games/games-c/#constelleum","title":"Constelleum","text":""},{"location":"games/games-c/#corvian-curse","title":"Corvian Curse","text":""},{"location":"games/games-c/#crop-and-claw","title":"Crop and Claw","text":""},{"location":"games/games-d/","title":"Games Using GodotSteam | Starts With D","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-d/#data-garden","title":"Data Garden","text":""},{"location":"games/games-d/#dave-dave-dave","title":"Dave Dave Dave","text":""},{"location":"games/games-d/#deal-of-the-dead-final-cut","title":"Deal of the Dead: Final Cut","text":""},{"location":"games/games-d/#death-by-deduction","title":"Death by Deduction","text":""},{"location":"games/games-d/#depths-of-deception","title":"Depths Of Deception","text":""},{"location":"games/games-d/#devastating-fog","title":"Devastating Fog","text":""},{"location":"games/games-d/#dipod-the-foot-legacy","title":"Dipod: The Foot Legacy","text":""},{"location":"games/games-d/#disinfection","title":"Disinfection","text":""},{"location":"games/games-d/#district-panic","title":"District Panic","text":""},{"location":"games/games-d/#dome-keeper","title":"Dome Keeper","text":""},{"location":"games/games-d/#dominoes-3d-simulator","title":"Dominoes 3D Simulator","text":""},{"location":"games/games-d/#the-dope-game","title":"The Dope Game","text":""},{"location":"games/games-d/#dot-hop","title":"Dot Hop","text":""},{"location":"games/games-d/#dream-catcher","title":"Dream Catcher","text":""},{"location":"games/games-d/#drift","title":"Drift","text":""},{"location":"games/games-e/","title":"Games Using GodotSteam | Starts With E","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-e/#elementyle","title":"Elementyle","text":""},{"location":"games/games-e/#ends","title":"Ends","text":""},{"location":"games/games-e/#escape-from-zeta-aurigae","title":"Escape From Zeta Aurigae","text":""},{"location":"games/games-e/#exostation","title":"Exostation","text":""},{"location":"games/games-f/","title":"Games Using GodotSteam | Starts With F","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-f/#feed-the-cups","title":"Feed The Cups","text":""},{"location":"games/games-f/#final-hope-the-plot","title":"Final Hope: The Plot","text":""},{"location":"games/games-f/#fishards","title":"Fishards","text":""},{"location":"games/games-f/#flowers-of-satsunai","title":"Flowers of Satsunai","text":""},{"location":"games/games-f/#for-your-information","title":"For Your Information","text":""},{"location":"games/games-f/#forgotten-secrets-escape-room","title":"Forgotten Secrets: Escape Room","text":""},{"location":"games/games-f/#fruit-salad","title":"Fruit Salad","text":""},{"location":"games/games-f/#full-court-heroes","title":"Full Court Heroes","text":""},{"location":"games/games-g/","title":"Games Using GodotSteam | Starts With G","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-g/#galactic-bulwark-strike","title":"Galactic Bulwark Strike","text":""},{"location":"games/games-g/#galaxy-drift","title":"Galaxy Drift","text":""},{"location":"games/games-g/#gamebox","title":"Gamebox","text":""},{"location":"games/games-g/#games-for-stream","title":"Games For Stream","text":""},{"location":"games/games-g/#gedaria","title":"Gedaria","text":""},{"location":"games/games-g/#gelatine","title":"Gelatine","text":""},{"location":"games/games-g/#gleeb-glob","title":"Gleeb Glob","text":""},{"location":"games/games-g/#glorys-witness","title":"Glory's Witness","text":""},{"location":"games/games-g/#the-great-plague-exodus","title":"The Great Plague Exodus","text":""},{"location":"games/games-g/#grim-horde","title":"Grim Horde","text":""},{"location":"games/games-g/#gunmetal-gothic","title":"Gunmetal Gothic","text":""},{"location":"games/games-h/","title":"Games Using GodotSteam | Starts With H","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-h/#hangtogether","title":"HangTogether","text":""},{"location":"games/games-h/#haulin-oats","title":"Haulin' Oats","text":""},{"location":"games/games-h/#hellfire-tactics","title":"Hellfire Tactics","text":""},{"location":"games/games-h/#hexes","title":"Hexes","text":""},{"location":"games/games-h/#hibernation-day","title":"Hibernation Day","text":""},{"location":"games/games-h/#honk-of-heroes","title":"Honk of Heroes","text":""},{"location":"games/games-h/#hot-dog-reporter","title":"Hot Dog Reporter","text":""},{"location":"games/games-h/#hot-tiles","title":"Hot Tiles","text":""},{"location":"games/games-h/#human-souvenir","title":"Human Souvenir","text":""},{"location":"games/games-i/","title":"Games Using GodotSteam | Starts With I","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-i/#icemaze-cave-skate-escape","title":"Icemaze Cave: Skate Escape","text":""},{"location":"games/games-i/#i-know-everything","title":"I Know Everything","text":""},{"location":"games/games-i/#ive-seen-everything","title":"I've Seen Everything","text":""},{"location":"games/games-i/#icewords","title":"Icewords","text":""},{"location":"games/games-i/#in-the-house-of-silence","title":"In The House of Silence","text":""},{"location":"games/games-i/#indirection","title":"Indirection","text":""},{"location":"games/games-i/#infinite-pixel-battles","title":"Infinite Pixel Battles","text":""},{"location":"games/games-i/#into-oblivion","title":"Into Oblivion","text":""},{"location":"games/games-j/","title":"Games Using GodotSteam | Starts With J","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-j/#joe-n-jo","title":"Joe 'n Jo","text":""},{"location":"games/games-j/#jump-n-brawl","title":"Jump 'n' Brawl","text":""},{"location":"games/games-j/#jumpmap","title":"JumpMap","text":""},{"location":"games/games-j/#jurl","title":"Jurl","text":""},{"location":"games/games-k/","title":"Games Using GodotSteam | Starts With K","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-k/#kargo","title":"Kargo","text":""},{"location":"games/games-k/#keep-it-running","title":"Keep It Running","text":""},{"location":"games/games-k/#keep-the-heroes-out","title":"Keep The Heroes Out","text":""},{"location":"games/games-k/#kinitopet","title":"KinitoPET","text":""},{"location":"games/games-k/#kipidon","title":"KIPIDON","text":""},{"location":"games/games-k/#kiro-ii-the-wizards-guild","title":"KIRO II - The Wizards Guild","text":""},{"location":"games/games-k/#knights-rubbish","title":"Knights Rubbish","text":""},{"location":"games/games-k/#kotel-ne-gori-a-friend-of-lena-boots","title":"Kotel Ne Gori: A Friend of Lena Boots","text":""},{"location":"games/games-l/","title":"Games Using GodotSteam | Starts With L","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-l/#lala-hentai","title":"LALA Hentai","text":""},{"location":"games/games-l/#landnama","title":"Landnama","text":""},{"location":"games/games-l/#lefties-righteous-arcade-empourium","title":"Lefties' Righteous Arcade Empourium","text":""},{"location":"games/games-l/#lilas-sky-ark","title":"Lila's Sky Ark","text":""},{"location":"games/games-l/#lingo","title":"Lingo","text":""},{"location":"games/games-l/#little-ninja","title":"Little Ninja","text":""},{"location":"games/games-l/#looking-up-i-see-only-a-ceiling","title":"Looking Up I See Only A Ceiling","text":""},{"location":"games/games-l/#love-exalt-8372","title":"Love Exalt 8372","text":""},{"location":"games/games-l/#luck-be-a-landlord","title":"Luck Be A Landlord","text":""},{"location":"games/games-l/#lul-inc","title":"LUL Inc.","text":""},{"location":"games/games-m/","title":"Games Using GodotSteam | Starts With M","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-m/#maces-and-dices","title":"Maces and Dices","text":""},{"location":"games/games-m/#martial-law","title":"Martial Law","text":""},{"location":"games/games-m/#master-theft-tvs","title":"Master Theft TVs","text":""},{"location":"games/games-m/#meowing-point","title":"Meowing Point","text":""},{"location":"games/games-m/#metal-toy-excavator","title":"Metal Toy Excavator","text":""},{"location":"games/games-m/#mini-sports","title":"Mini Sports","text":""},{"location":"games/games-m/#miss-peacock","title":"Miss Peacock","text":""},{"location":"games/games-m/#mma-simulator","title":"MMA Simulator","text":""},{"location":"games/games-m/#moonatics","title":"Moonatics","text":""},{"location":"games/games-m/#mutagenic","title":"Mutagenic","text":""},{"location":"games/games-m/#my-brother-lives-in-a-canyon","title":"My Brother Lives In A Canyon","text":""},{"location":"games/games-n/","title":"Games Using GodotSteam | Starts With N","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-n/#nightfall-hacker","title":"Nightfall Hacker","text":""},{"location":"games/games-n/#ninja-frog","title":"Ninja Frog","text":""},{"location":"games/games-n/#ninja-monkey","title":"Ninja Monkey","text":""},{"location":"games/games-n/#non-euclidean-chess","title":"Non-Euclidean Chess","text":""},{"location":"games/games-o/","title":"Games Using GodotSteam | Starts With O","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-o/#omega-warp","title":"Omega Warp","text":""},{"location":"games/games-o/#our-dear-kingdom","title":"Our Dear Kingdom","text":""},{"location":"games/games-p/","title":"Games Using GodotSteam | Starts With P","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-p/#palladium-adventure-in-greece","title":"Palladium: Adventure in Greece","text":""},{"location":"games/games-p/#pandora-galaxy","title":"Pandora Galaxy","text":""},{"location":"games/games-p/#paralyzed","title":"Paralyzed","text":""},{"location":"games/games-p/#paranoia-party","title":"Paranoia Party","text":""},{"location":"games/games-p/#parking-garage-rally-circuit","title":"Parking Garage Rally Circuit","text":""},{"location":"games/games-p/#pest-apocalypse","title":"Pest Apocalypse","text":""},{"location":"games/games-p/#pincrediball","title":"Pincrediball","text":""},{"location":"games/games-p/#pine-lily-village","title":"Pine Lily Village","text":""},{"location":"games/games-p/#pistola","title":"PISTOLA","text":""},{"location":"games/games-p/#pokaban","title":"Pokaban","text":""},{"location":"games/games-p/#primal-light","title":"Primal Light","text":""},{"location":"games/games-p/#power-of-the-ancients","title":"Power of the Ancients","text":""},{"location":"games/games-p/#prop-game","title":"Prop Game","text":""},{"location":"games/games-p/#the-pulse-of-evil","title":"The Pulse of Evil","text":""},{"location":"games/games-p/#pumpum","title":"PumPum","text":""},{"location":"games/games-p/#pusher-drug-tycoon","title":"Pusher: Drug Tycoon","text":""},{"location":"games/games-p/#psychworld","title":"PsychWorld","text":""},{"location":"games/games-q/","title":"Games Using GodotSteam | Starts With Q","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-q/#uh-oh","title":"Uh-oh!","text":"<p>Seems there are no games starting with Q yet. If you have one, please feel free to submit it!</p>"},{"location":"games/games-r/","title":"Games Using GodotSteam | Starts With R","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-r/#ram-random-access-mayhem","title":"RAM: Random Access Mayhem","text":""},{"location":"games/games-r/#redds-runaway","title":"Redd's Runaway","text":""},{"location":"games/games-r/#retro-tank-party","title":"Retro Tank Party","text":""},{"location":"games/games-r/#resolutiion","title":"Resolutiion","text":""},{"location":"games/games-r/#ride-with-the-reaper","title":"Ride With The Reaper","text":""},{"location":"games/games-r/#riff-raff","title":"Riff Raff","text":""},{"location":"games/games-r/#robo-legend","title":"Robo Legend","text":""},{"location":"games/games-r/#rocket-bot-royale","title":"Rocket Bot Royale","text":""},{"location":"games/games-r/#rodolfo-mascarpone-y-ramon-cazanuecos-amenaza-en-el-molinillo","title":"Rodolfo Mascarpone y Ram\u00f3n Cazanuecos: Amenaza en el Molinillo","text":""},{"location":"games/games-r/#room-box","title":"Room Box","text":""},{"location":"games/games-r/#rpg-in-a-box","title":"RPG In A Box","text":""},{"location":"games/games-r/#run-the-world-in-between","title":"RUN: The world in-between","text":""},{"location":"games/games-s/","title":"Games Using GodotSteam | Starts With S","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-s/#sakura-sunshine","title":"Sakura Sunshine","text":""},{"location":"games/games-s/#samozbor-idheaven","title":"Samozbor ID:Heaven","text":""},{"location":"games/games-s/#saturday-of-piercing-screams","title":"Saturday of Piercing Screams","text":""},{"location":"games/games-s/#satryn-deluxe","title":"satryn deluxe","text":""},{"location":"games/games-s/#seedlings","title":"Seedlings","text":""},{"location":"games/games-s/#sentou-gakuen-revival","title":"Sentou Gakuen: Revival","text":""},{"location":"games/games-s/#shadow-of-asha","title":"Shadow of Asha","text":""},{"location":"games/games-s/#skydribble","title":"SkyDribble","text":""},{"location":"games/games-s/#siege-n-sow","title":"Siege 'n Sow","text":""},{"location":"games/games-s/#silk-roads-caravan-kings","title":"Silk Roads: Caravan Kings","text":""},{"location":"games/games-s/#silver-lines","title":"Silver Lines","text":""},{"location":"games/games-s/#sisypush","title":"Sisypush","text":""},{"location":"games/games-s/#skip","title":"SKIP","text":""},{"location":"games/games-s/#slide","title":"Slide","text":""},{"location":"games/games-s/#snowyland","title":"Snowyland","text":""},{"location":"games/games-s/#somnipathy","title":"Somnipathy","text":""},{"location":"games/games-s/#space-miner-idle-adventures","title":"Space Miner - Idle Adventures","text":""},{"location":"games/games-s/#spaceship-hunters","title":"Spaceship Hunters","text":""},{"location":"games/games-s/#specfreq","title":"SpecFreq","text":""},{"location":"games/games-s/#the-spectral-web-hitodama","title":"The Spectral Web: Hitodama","text":""},{"location":"games/games-s/#speglar","title":"Speglar","text":""},{"location":"games/games-s/#spirit-of-shotgun","title":"Spirit of Shotgun","text":""},{"location":"games/games-s/#spotless","title":"Spotless","text":""},{"location":"games/games-s/#square-n-balls","title":"Square 'n' Balls","text":""},{"location":"games/games-s/#squeebing-up-the-tower-of-friendship","title":"Squeebing Up the Tower of Friendship","text":""},{"location":"games/games-s/#starveil","title":"Starveil","text":""},{"location":"games/games-s/#storms-harvest","title":"Storm's Harvest","text":""},{"location":"games/games-s/#subcube","title":"Subcube","text":""},{"location":"games/games-s/#subzero-tides","title":"Subzero Tides","text":""},{"location":"games/games-s/#super-cave-boy","title":"Super Cave Boy","text":""},{"location":"games/games-s/#super-mando","title":"Super Mando","text":""},{"location":"games/games-s/#super-rps","title":"Super RPS","text":""},{"location":"games/games-s/#survivalscape","title":"SurvivalScape","text":""},{"location":"games/games-s/#swing-lord","title":"Swing Lord","text":""},{"location":"games/games-s/#swinging-man","title":"Swinging Man","text":""},{"location":"games/games-s/#swords-and-sandals-immortals","title":"Swords and Sandals: Immortals","text":""},{"location":"games/games-t/","title":"Games Using GodotSteam | Starts With T","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-t/#tailquest-defense","title":"TailQuest: Defense","text":""},{"location":"games/games-t/#tamagoneko","title":"Tamagoneko","text":""},{"location":"games/games-t/#td-worlds","title":"TD Worlds","text":""},{"location":"games/games-t/#teamkill","title":"Teamkill","text":""},{"location":"games/games-t/#techbeat-heart","title":"TechBeat Heart","text":""},{"location":"games/games-t/#tempus-bound","title":"Tempus Bound","text":""},{"location":"games/games-t/#terra-ventura","title":"Terra Ventura","text":""},{"location":"games/games-t/#tetragun","title":"TETRAGUN","text":""},{"location":"games/games-t/#this-side-up","title":"This Side Up","text":""},{"location":"games/games-t/#touhou-gensokyo-survivors","title":"Touhou: Gensokyo Survivors","text":""},{"location":"games/games-t/#tower-tactics-liberation","title":"Tower Tactics: Liberation","text":""},{"location":"games/games-t/#trash-of-the-titans","title":"Trash of the Titans","text":""},{"location":"games/games-t/#trollery-delayma","title":"Trollery Delayma","text":""},{"location":"games/games-t/#truffle","title":"TRUFFLE","text":""},{"location":"games/games-t/#turing-complete","title":"Turing Complete","text":""},{"location":"games/games-t/#twilight-oracle","title":"Twilight Oracle","text":""},{"location":"games/games-u/","title":"Games Using GodotSteam | Starts With U","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-u/#ufotofu-hex","title":"UFOTOFU: Hex","text":""},{"location":"games/games-u/#under-the-yoke","title":"Under The Yoke","text":""},{"location":"games/games-u/#undergrown","title":"Undergrown","text":""},{"location":"games/games-u/#unforgettable-voyage","title":"Unforgettable Voyage","text":""},{"location":"games/games-u/#unloop","title":"Unloop","text":""},{"location":"games/games-u/#unnamed-space-idle","title":"Unnamed Space Idle","text":""},{"location":"games/games-u/#upload-simulator-silicon","title":"Upload Simulator Silicon","text":""},{"location":"games/games-v/","title":"Games Using GodotSteam | Starts With V","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-v/#virtual-cottage","title":"Virtual Cottage","text":""},{"location":"games/games-v/#vlobs","title":"Vlobs","text":""},{"location":"games/games-w/","title":"Games Using GodotSteam | Starts With W","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-w/#wager","title":"Wager","text":""},{"location":"games/games-w/#warja","title":"Warja","text":""},{"location":"games/games-w/#warp-tek","title":"Warp-Tek","text":""},{"location":"games/games-w/#watch-your-plastic-duck","title":"Watch Your Plastic Duck","text":""},{"location":"games/games-w/#watermelon-challenge","title":"Watermelon Challenge","text":""},{"location":"games/games-w/#windowkill","title":"Windowkill","text":""},{"location":"games/games-w/#wizards-way-out","title":"Wizard's Way Out","text":""},{"location":"games/games-w/#woodland-empire","title":"Woodland Empire","text":""},{"location":"games/games-x/","title":"Games Using GodotSteam | Starts With X","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-x/#xanarthraxia","title":"XANARTHRAXIA","text":""},{"location":"games/games-x/#xion-leak","title":"Xion Leak","text":""},{"location":"games/games-x/#xmas-clash","title":"XMas Clash","text":""},{"location":"games/games-x/#xol","title":"XOL","text":""},{"location":"games/games-y/","title":"Games Using GodotSteam | Starts With Y","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-y/#yuke-and-the-book-of-yokai","title":"Yuke and the Book of Yokai","text":""},{"location":"games/games-z/","title":"Games Using GodotSteam | Starts With Z","text":"<p>Here is a showcase of games using the GodotSteam module. Have a game on Steam using GodotSteam? Let me know by sending the game URL to games@godotsteam.com!  Feel free to include up to four additional links like dev-log, Mastodon, Twitter, website, Itch.io page, etc.</p>"},{"location":"games/games-z/#uh-oh","title":"Uh-oh!","text":"<p>Seems there are no games starting with Z yet. If you have one, please feel free to submit it!</p>"},{"location":"howto/gdextension/","title":"How-To GDExtension","text":"<p>For those of you who are comfortable compiling or want to give it a shot, here are some steps to follow.</p> <p>Notes</p> <p>Currently you cannot compile GodotSteam with MinGW so it does require use of Visual Studio redistributables on Windows. Most Windows games will use it so, for the most part, end users are fine. However, if they report any issues with running things, direct them to install the latest Visual Studio redistributables.</p> <p>Follow Godot's documentation to setup the required tools for your operating system.</p> <p> Windows  Linux  Mac</p> <p>This is a little different from the modules as we get GodotSteam's source first and then Godot's.</p>"},{"location":"howto/gdextension/#set-up-tools","title":"Set Up Tools","text":""},{"location":"howto/gdextension/#get-godotsteam-gdextension","title":"Get GodotSteam GDExtension","text":""},{"location":"howto/gdextension/#cloning-the-source","title":"Cloning the Source","text":"<p>You can clone the source into a folder called godotsteam_gdextension like so:</p> <pre><code>git clone -b gdextension https://github.com/GodotSteam/GodotSteam.git godotsteam_gdextension\n</code></pre> <p>Cloning the repo should also pull the sub-module for Godot CPP, so you can skip to Get the Steamworks SDK.</p> <p>However, you may want to change the version of Godot CPP, depending on your target version. If so, read the next section Get Godot CPP.</p>"},{"location":"howto/gdextension/#downloading-the-source","title":"Downloading the Source","text":"<p>Alternatively, you can download the GDExtension source from our repository then unpack it into a folder named godotsteam_extension.  You will need to pull the Godot CPP source yourself if you use this method.</p>"},{"location":"howto/gdextension/#get-godot-cpp","title":"Get Godot CPP","text":""},{"location":"howto/gdextension/#cloning-the-source_1","title":"Cloning the Source","text":"<p>If you changed your target version or manually downloaded the GDExtension source, you can head into the godotsteam_gdextension folder and clone the latest Godot CPP source in a folder called godot-cpp like so:</p> <pre><code>git clone https://github.com/godotengine/godot-cpp.git -b 4.1 godot-cpp\n</code></pre> <p>You may need to change the given tag(s) above from whatever it is to whatever the current version or whatever version you need.</p>"},{"location":"howto/gdextension/#downloading-the-source_1","title":"Downloading the Source","text":"<p>Alternatively, you can download and unpack the Godot CPP source from their Github in a folder called godot-cpp.</p>"},{"location":"howto/gdextension/#compile-the-bindings","title":"Compile the Bindings","text":"<p>In either case, you will want to head into the godot-cpp folder and compile the bindings for your platform. Make sure your slashes are OS appropriate:</p> <pre><code>  scons platform=&lt;your platform&gt; target=template_release\n  scons platform=&lt;your platform&gt; target=template_debug\n</code></pre> <p>Download the Steamworks SDK from Valve's partners site. This requires a Steam developer account.</p> <p>Move the public and redistributable_bin folders from the unzipped Steamworks SDK into the godotsteam_gdextension/godotsteam/sdk/ so you have the following layout:</p> <pre><code>godotsteam_gdextension/\n\u2514\u2500 godotsteam/\n   \u2514\u2500 sdk/\n      \u251c\u2500 public/*\n      \u2514\u2500 redistributable_bin/*\n</code></pre> <p>Before we start compiling, let us make sure everything is in place. Your godotsteam_gdextension directory should look something like this:</p> <p><pre><code>godotsteam_gdextension\n\u2502\u2500 bin/\n\u251c\u2500 godot-cpp/\n\u2502  \u251c\u2500 bin/*\n\u2502  \u251c\u2500 cmake/*\n\u2502  \u251c\u2500 gdextension/*\n\u2502  \u251c\u2500 gen/*\n\u2502  \u251c\u2500 include/*\n\u2502  \u251c\u2500 misc/*\n\u2502  \u251c\u2500 src/*\n\u2502  \u251c\u2500 test/*\n\u2502  \u251c\u2500 tools/*\n\u2502  \u251c\u2500 binding_generator.py\n\u2502  \u2514\u2500 SConstruct\n\u251c\u2500 godotsteam/\n\u2502  \u251c\u2500 doc_classes/*\n\u2502  \u251c\u2500 sdk/\n\u2502  \u2502  \u251c\u2500 public/steam/*\n\u2502  \u2502  \u2514\u2500 redistributable_bin/*\n\u2502  \u251c\u2500 api.json\n\u2502  \u251c\u2500 godotsteam.h\n\u2502  \u251c\u2500 godotsteam.cpp\n\u2502  \u251c\u2500 gdootsteam_constants.h\n\u2502  \u251c\u2500 register_types.cpp\n\u2502  \u251c\u2500 register_types.h\n\u2502  \u2514\u2500 godotsteam.gdextension\n\u2514\u2500 SConstruct\n</code></pre> You probably will not have the bin/ folder in the root so go ahead and create that.</p> <p>Just run the following command for your operating system from the godotsteam_gdextension folder root:</p> Windows PowerShellLinuxmacOS <pre><code>scons platform=windows target=template_release\nscons platform=windows target=template_debug\n</code></pre> <pre><code>scons platform=linuxbsd target=template_release\nscons platform=linuxbsd target=template_debug\n</code></pre> <pre><code>scons platform=macos target=template_release\nscons platform=macos target=template_debug\n</code></pre> <p>The Visual Studio instructions carried over from GDNative probably do not work anymore so they were removed. If anyone would like to contribute new ones, please feel free to do so!</p> <p>When compiling is finished, create a brand new folder somewhere called addons and, inside that, create a folder called godotsteam.</p> <p>Now copy the whole win64/, linuxbsd/, or osx/ folder(s) from within the godotsteam_gdextension/bin/ folder into addons/godotsteam/. We will want to rename that linuxbsd folder to linux64 or linux32 depending on what you created.</p> <p>You will also want to copy the matching Steamworks API file(s) from godotsteam_gdextension/godotsteam/sdk/redistributable_bin/ and put them in with the corresponding platform's folder.</p> <p>This all sound a little confusing? It should look a little something like this:</p> Windows 64-bitWindows 32-bitLinux 64-bitLinux 32-bitMac <pre><code>addons\n\u2514\u2500 godotsteam\n   \u2514\u2500 win64\n      \u2502\u2500 libgodotsteam.windows.template_debug.x86_64.dll\n      \u2502\u2500 libgodotsteam.windows.template_release.x86_64.dll\n      \u2514\u2500 steam_api64.dll\n</code></pre> <pre><code>addons\n\u2514\u2500 godotsteam\n   \u2514\u2500 win32\n      \u2502\u2500 libgodotsteam.windows.template_debug.x86_32.dll\n      \u2502\u2500 libgodotsteam.windows.template_release.x86_32.dll\n      \u2514\u2500 steam_api.dll\n</code></pre> <pre><code>addons\n\u2514\u2500 godotsteam\n   \u2514\u2500 linux64\n      \u2502\u2500 libgodotsteam.linuxbsd.template_debug.x86_64.so\n      \u2502\u2500 libgodotsteam.linuxbsd.template_release.x86_64.so\n      \u2514\u2500 libsteam_api.so\n</code></pre> <pre><code>addons\n\u2514\u2500 godotsteam\n   \u2514\u2500 linux32\n      \u2502\u2500 libgodotsteam.linuxbsd.template_debug.x86_32.so\n      \u2502\u2500 libgodotsteam.linuxbsd.template_release.x86_32.so\n      \u2514\u2500 libsteam_api.so\n</code></pre> <pre><code>addons\n\u2514\u2500 godotsteam\n   \u2514\u2500 osx\n      \u2502\u2500 libgodotsteam.debug.framework\n      \u2502  \u2502\u2500 libgodotsteam.macos.template_debug.universal\n      \u2502  \u2514\u2500 libsteam_api.dylib\n      \u2502\u2500 libgodotsteam.framework\n      \u2502  \u2502\u2500 libgodotsteam.macos.template_release.universal\n      \u2502  \u2514\u2500 libgodotsteam.framework/libsteam_api.dylib\n      \u2514\u2500 libsteam_api.dylib\n</code></pre> <p>Lastly, copy the godotsteam.gdextension file from the base of your godotsteam_gdextensioni folder and place it into the addons/godotsteam/ folder.</p> <p>This can now be added to any project you have; just pop it into the root of the project and go!</p>"},{"location":"howto/gdextension/#get-the-steamworks-sdk","title":"Get the Steamworks SDK","text":""},{"location":"howto/gdextension/#double-checking-folder-file-structure","title":"Double-Checking Folder / File Structure","text":""},{"location":"howto/gdextension/#compiling-time","title":"Compiling Time","text":""},{"location":"howto/gdextension/#all-together-now","title":"All Together Now","text":""},{"location":"howto/gdextension/#renaming-notes","title":"Renaming Notes","text":"<p>Typically we rename the produced shared library files by removing the template_ prefixes and operating system naming like windows, linuxbsd, or macos as those are implied through their parent folders. Just in case you like a tidier plug-in.</p> <p>This GDExtension does not have to be enabled as it is always present if the addon is there.</p> <p>From here you should have access to all of the Steamworks SDK functions and callbacks.</p> <p>You should be able to read the Steamworks API documentation to see what all is available and cross-reference with GodotSteam's documentation.</p> <p>Feel free to check out our tutorials if you want to learn some basics or just start tinkering!</p>"},{"location":"howto/gdextension/#good-to-go","title":"Good to Go","text":""},{"location":"howto/gdnative/","title":"How-To GDNative","text":"<p>For those of you who are comfortable compiling or want to give it a shot, here are some steps to follow.</p> <p>Notes</p> <p>Currently you cannot compile GodotSteam with MinGW so it does require use of Visual Studio redistributables on Windows. Most Windows games will use it so, for the most part, end users are fine. However, if they report any issues with running things, direct them to install the latest Visual Studio redistributables.</p> <p>Follow Godot's documentation to setup the required tools for your operating system.</p> <p> Windows  Linux  Mac</p> <p>This is a little different from the modules as we get GodotSteam's source first and then Godot's.</p>"},{"location":"howto/gdnative/#set-up-tools","title":"Set Up Tools","text":""},{"location":"howto/gdnative/#get-godotsteam-gdnative","title":"Get GodotSteam GDNative","text":""},{"location":"howto/gdnative/#cloning-the-source","title":"Cloning the Source","text":"<p>You can clone the source into a folder called godotsteam_gdnative like so:</p> <pre><code>git clone -b gdnative https://github.com/GodotSteam/GodotSteam.git godotsteam_gdnative\n</code></pre> <p>Cloning the repo should also pull the sub-module for Godot CPP, so you can skip to Get the Steamworks SDK.</p> <p>However, you may want to change the version of Godot CPP, depending on your target version. If so, read the next section Get Godot CPP.</p>"},{"location":"howto/gdnative/#downloading-the-source","title":"Downloading the Source","text":"<p>Alternatively, you can download the GDNative source from our repository then unpack it into a folder named godotsteam_gdnative.  You will need to pull the Godot CPP source yourself if you use this method.</p>"},{"location":"howto/gdnative/#get-godot-cpp","title":"Get Godot CPP","text":""},{"location":"howto/gdnative/#cloning-the-source_1","title":"Cloning the Source","text":"<p>If you changed your target version or manually downloaded the GDNative source, you can head into the godotsteam_gdnative folder and clone the latest Godot CPP source in a folder called godot-cpp like so:</p> <pre><code>git clone https://github.com/godotengine/godot-cpp.git -b godot-3.5.1-stable godot-cpp\n</code></pre> <p>You may need to change the given tag(s) above from whatever it is to whatever the current version or whatever version you need.</p>"},{"location":"howto/gdnative/#downloading-the-source_1","title":"Downloading the Source","text":"<p>Alternatively, you can download and unpack the Godot CPP source from their Github in a folder called godot-cpp.</p>"},{"location":"howto/gdnative/#compile-the-bindings","title":"Compile the Bindings","text":"<p>In either case, you will want to head into the godot-cpp folder and compile the bindings for your platform. Make sure your slashes are OS appropriate:</p> <pre><code>scons platform=&lt;your platform&gt; generate_bindings=yes target=release\n</code></pre> <p>Download the Steamworks SDK from Valve's partners site. This requires a Steam developer account.</p> <p>Move the public and redistributable_bin folders from the unzipped Steamworks SDK into the godotsteam_gdnative/godotsteam/sdk/ so you have the following layout:</p> <pre><code>godotsteam_gdnative/\n\u2514\u2500 godotsteam/\n   \u2514\u2500 sdk/\n      \u251c\u2500 public/*\n      \u2514\u2500 redistributable_bin/*\n</code></pre> <p>Before we start compiling, let us make sure everything is in place. Your godotsteam_gdextension directory should look something like this:</p> <p><pre><code>godotsteam_gdnative\n\u2502\u2500 bin/\n\u251c\u2500 godot-cpp/\n\u2502  \u251c\u2500 bin/*\n\u2502  \u251c\u2500 godot-headers/*\n\u2502  \u251c\u2500 include/*\n\u2502  \u251c\u2500 misc/*\n\u2502  \u251c\u2500 src/*\n\u2502  \u251c\u2500 test/*\n\u2502  \u251c\u2500 binding_generator.py\n\u2502  \u2514\u2500 SConstruct\n\u251c\u2500 godotsteam/\n\u2502  \u251c\u2500 sdk/\n\u2502  \u2502  \u251c\u2500 public/steam/*\n\u2502  \u2502  \u2514\u2500 redistributable_bin/*\n\u2502  \u251c\u2500 godotsteam.h\n\u2502  \u251c\u2500 godotsteam.cpp\n\u2502  \u251c\u2500 gdootsteam_constants.h\n\u2502  \u2514\u2500 init.cpp\n\u251c\u2500 VisualC/*\n\u2514\u2500 SConstruct\n</code></pre> You probably will not have the bin/ folder in the root so go ahead and create that.</p> <p>Just run the following command for your operating system from the godotsteam_gdextension folder root:</p> Windows Powershell / VS PromptWindows VSLinuxMac <pre><code>scons platform=windows production=yes target=release\n</code></pre> <p>Follow these steps for Visual Studio (big thanks to willnationsdev):</p> <ul> <li> Create a new Visual Studio project.</li> <li> Name it GDNative and make sure it DOES NOT create a directory.<ul> <li>Uncheck the box here.</li> </ul> </li> <li> Select the GDNative folder we were working in.</li> <li> Choose Win32 Desktop Wizard template.</li> <li> Select options for both a dynamic library (.dll) and an empty project.</li> <li> Things should look like this:   <pre><code>GDNative -godot-cpp -godot_headers -lib -GDNative --.vs --GDNative.sln --GDNative.vcxproj --GDNative.vcsproj.filters -src\n</code></pre></li> <li> Make sure you have a debug, x64 configuration for the solution.<ul> <li>The options are located in the toolbar at the top left.</li> </ul> </li> <li> Go to \"Project &gt; GDNative Properties\" to open the project properties.</li> <li> Ensure you are on the x64 Debug configurations at the top and make these changes:<ul> <li>VC++ Directories &gt; Include Directories. Add 'GDNative\\godot-cpp\\include', 'GDNative\\godot-cpp\\include\\core', and 'GDNative\\godot-cpp\\godot-headers' to the list.</li> <li>VC++ Directories &gt; Library Directories. Add 'GDNative\\godotsteam'.</li> <li>VC++ Directories &gt; Source Directories. Add 'GDNative\\godotsteam'.</li> <li>C/C++ &gt; Linker &gt; System. Subsystem = \"Console (/SUBSYSTEM:CONSOLE)\"</li> <li>C/C++ &gt; Linker &gt; Input. Add \"godot-cpp.windows.64.lib\" (without quotes) to the Additional Dependencies parameter.</li> </ul> </li> <li> Click on Apply and then Save.</li> <li> Now build the solution.</li> </ul> <pre><code>scons platform=linux production=yes target=release\n</code></pre> <pre><code>scons platform=osx production=yes target=release\n</code></pre> <p>When compiling is finished, create a brand new folder somewhere called addons and, inside that, create a folder called godotsteam.</p> <p>Now copy the whole win64/, linuxbsd/, or osx/ folder(s) from within the godotsteam_gdnative/bin/ folder into addons/godotsteam/. We will want to rename that linuxbsd folder to x11.</p> <p>You will also want to copy the matching Steamworks API file(s) from godotsteam_gdnative/godotsteam/sdk/redistributable_bin/ and put them in with the corresponding platform's folder.</p> <p>This all sound a little confusing? It should look a little something like this:</p> WindowsLinuxMac <pre><code>addons\n\u2514\u2500 godotsteam\n   \u2514\u2500 win64\n      \u2502\u2500 godotsteam.dll\n      \u2514\u2500 steam_api64.dll\n</code></pre> <pre><code>addons\n\u2514\u2500 godotsteam\n   \u2514\u2500 x11\n      \u2502\u2500 libgodotsteam.so\n      \u2514\u2500 libsteam_api.so\n</code></pre> <pre><code>addons\n\u2514\u2500 godotsteam\n   \u2514\u2500 osx\n      \u2502\u2500 libgodotsteam.dylib\n      \u2514\u2500 libsteam_api.dylib\n</code></pre>"},{"location":"howto/gdnative/#get-the-steamworks-sdk","title":"Get the Steamworks SDK","text":""},{"location":"howto/gdnative/#double-checking-folder-file-structure","title":"Double-Checking Folder / File Structure","text":""},{"location":"howto/gdnative/#compiling-time","title":"Compiling Time","text":""},{"location":"howto/gdnative/#all-together-now","title":"All Together Now","text":""},{"location":"howto/gdnative/#making-godotsteamgdnlib","title":"Making godotsteam.gdnlib","text":"<p>In a text editor, create a file called godotsteam.gdnlib and place the following inside this file then save it in the addons/godotsteam/ folder:</p> <pre><code>[general]\nsingleton=false\nload_once=true\nsymbol_prefix=\"godot_\"\nreloadable=true\n\n[entry]\n(read below)\n\n[dependencies]\n(read below)\n</code></pre> <p>Replace (read below) with the following, based on platform. You can also use all three if you have the right files.</p> Using WindowsUsing LinuxUsing OSX <pre><code>[entry]\nWindows.64=\"res://addons/godotsteam/win64/godotsteam.dll\"\n\n[dependencies]\nWindows.64=[ \"res://addons/godotsteam/win64/steam_api64.dll\" ]\n</code></pre> <pre><code>[entry]\nX11.64=\"res://addons/godotsteam/x11/libgodotsteam.so\"\n\n[dependencies]\nX11.64=[ \"res://addons/godotsteam/x11/libsteam_api.so\" ]\n</code></pre> <pre><code>[entry]\nOSX.64=\"res://addons/godotsteam/osx/libgodotsteam.dylib\"\n\n[dependencies]\nOSX.64=[ \"res://addons/godotsteam/osx/libsteam_api.dylib\" ]\n</code></pre> <p>To double-check this worked, place the addons folder in a Godot project then open the .gdnlib file in the Inspector. It will have the correct data in the GUI editor that pops up in the bottom panel.</p>"},{"location":"howto/gdnative/#making-godotsteamgdns","title":"Making godotsteam.gdns","text":"<p>In a text editor, create a file called godotsteam.gdns and place the following inside this file then save it in the addons/godotsteam/ folder:</p> <pre><code>[gd_resource type=\"NativeScript\" load_steps=2 format=2]\n\n[ext_resource path=\"res://addons/godotsteam/godotsteam.gdnlib\" type=\"GDNativeLibrary\" id=1]\n\n[resource]\n\nresource_name = \"godotsteam\"\nclass_name = \"Steam\"\nlibrary = ExtResource( 1 )\nscript_class_name = \"Steam\"\n</code></pre>"},{"location":"howto/gdnative/#making-steamgd","title":"Making steam.gd","text":"<p>In a text editor, create a file called steam.gd and place the following inside this file then save it in the addons/godotsteam/ folder:</p> <pre><code>extends Node\n\nonready var Steam: Object = preload(\"res://addons/godotsteam/godotsteam.gdns\").new()\nvar steam_app_id: int = 480   # or your game's app ID\n\n\nfunc _init() -&gt; void:\n  OS.set_environment(\"SteamAppId\", str(steam_app_id))\n  OS.set_environment(\"SteamGameId\", str(steam_app_id))\n\nfunc _ready():\n  var initialize_response: Dictionary = Steam.steamInitEx()\n  print(initialize_response)\n</code></pre> <p>After placing the addons/ folder into your project, you will want to navigate to Project &gt; Project Settings in the editor and click on Autoload then add your steam.gd as a singleton, with the name Steam.</p> <p>GodotSteam GDNative will behave a little differently than the modules or GDExtension since it has to be loaded in and passed to an object in the steam.gd file.</p> <p>While you can call functions from Steam like you would normally with the GodotSteam modules, they have to be added to your steam.gd script like this:</p> <pre><code>name = Steam.getPersonaName()\ncountry = Steam.getIPCountry()\nrunning = Steam.isSteamRunning()\n\nfunc setAchievement(achieve: String) -&gt;v void:\n  Steam.setAchievement( achieve )\n</code></pre> <p>If you call Steamworks function outside of that script, however they must be prefaced with another Steam. like this:</p> <pre><code>name = Steam.Steam.getPersonaName()\ncountry = Steam.Steam.getIPCountry()\nrunning = Steam.Steam.isSteamRunning()\n\nfunc setAchievement(achieve: String) -&gt; void:\n  Steam.Steam.setAchievement( achieve )\n</code></pre> <p>It may be less verbose and messy to write your functions in the steam.gd file then just reference them in other scripts.</p> <p>From here you should have access to all of the Steamworks SDK functions and callbacks.</p> <p>You should be able to read the Steamworks API documentation to see what all is available and cross-reference with GodotSteam's documentation.</p> <p>Feel free to check out our tutorials if you want to learn some basics or just start tinkering!</p>"},{"location":"howto/gdnative/#good-to-go","title":"Good to Go","text":""},{"location":"howto/gdnative/#final-notes","title":"Final Notes","text":"<p>GDNative on Windows has some odd glitch with setRichPresence() where sometimes the key is sent as the value; this bug does not exist in the Linux or OSX versions of GodotSteam GDNative nor in any versions of the GodotSteam module nor any versions of the GodotSteam GDExtension. In this case it is deemed unfixable.</p>"},{"location":"howto/modules/","title":"How-To Modules","text":"<p>For those of you who are comfortable compiling or want to give it a shot, here are some steps to follow.</p> <p>Notes</p> <p>Currently you cannot compile GodotSteam with MinGW so it does require use of Visual Studio redistributables on Windows. Most Windows games will use it so, for the most part, end users are fine. However, if they report any issues with running things, direct them to install the latest Visual Studio redistributables.</p> <p>Follow Godot's documentation to setup the required tools for your operating system.</p> <p> Windows  Linux  Mac</p>"},{"location":"howto/modules/#set-up-tools","title":"Set Up Tools","text":""},{"location":"howto/modules/#get-godot","title":"Get Godot","text":""},{"location":"howto/modules/#cloning-the-source","title":"Cloning the Source","text":"<p>You can clone the latest Godot source in a folder called godot like so:</p> Godot 2.xGodot 3.xGodot 4.x <pre><code>git clone https://github.com/godotengine/godot.git -b 2.1.6-stable godot\n</code></pre> <pre><code>git clone https://github.com/godotengine/godot.git -b 3.5.3-stable godot\n</code></pre> <pre><code>git clone https://github.com/godotengine/godot.git -b 4.2.1-stable godot\n</code></pre> <p>You may need to change the given tag(s) above from whatever it is to whatever the current version or whatever version you need.</p>"},{"location":"howto/modules/#downloading-the-source","title":"Downloading the Source","text":"<p>Alternatively, you can download and unpack the Godot source from their Github into a folder called godot.</p>"},{"location":"howto/modules/#get-godotsteam","title":"Get GodotSteam","text":""},{"location":"howto/modules/#cloning-the-source_1","title":"Cloning the Source","text":"<p>Head into the godot/modules/ folder and clone the source like so:</p> Godot 2.xGodot 3.xGodot 4.x <pre><code>git clone -b godot2 https://github.com/GodotSteam/GodotSteam.git godotsteam\n</code></pre> <pre><code>git clone -b godot3 https://github.com/GodotSteam/GodotSteam.git godotsteam\n</code></pre> <pre><code>git clone -b godot4 https://github.com/GodotSteam/GodotSteam.git godotsteam\n</code></pre>"},{"location":"howto/modules/#downloading-the-source_1","title":"Downloading the Source","text":"<p>Alternatively, you can download the branch you need from our repository then unpack it into a folder named godotsteam inside your Godot source godot/modules/ folder.</p> <p>Download the Steamworks SDK from Valve's partners site. This requires a Steam developer account.</p> <p>Move the public and redistributable_bin folders from the unzipped Steamworks SDK into the godot/modules/godotsteam/sdk/ so you have the following layout:</p> <pre><code>godot/\n\u2514\u2500 modules/\n   \u2514\u2500 godotsteam/\n      \u2514\u2500 sdk/\n         \u251c\u2500 public/*\n         \u2514\u2500 redistributable_bin/*\n</code></pre> <p>Before we start compiling, let us make sure everything is in place. Your godot directory should look something like this:</p> <pre><code>godot/\n\u2514\u2500 modules/\n   \u2514\u2500 godotsteam/\n      \u251c\u2500 doc_classes/\n      \u251c\u2500 sdk/\n      \u2502  \u251c\u2500 public/*\n      \u2502  \u2514\u2500 redistributable_bin/*\n      \u251c\u2500 config.py\n      \u251c\u2500 godotsteam.cpp\n      \u251c\u2500 godotsteam.h\n      \u251c\u2500 godotsteam_constants.h\n      \u251c\u2500 register_types.cpp\n      \u251c\u2500 register_types.h\n      \u2514\u2500 SCsub\n</code></pre> <p>You can also just put the godotsteam directory where ever you like and just point to it in SCONS when compiling: </p> <pre><code>custom_modules='../path/to/dir/godotsteam'\n</code></pre> <p>To compile editors, use this SCONS line:</p> Godot 2.x, 3.xGodot 4.x <pre><code>scons platform=&lt;your platform&gt; production=yes tools=yes target=release_debug\n</code></pre> <pre><code>scons platform=&lt;your platform&gt; tools=yes target=editor\n</code></pre> <p>To compile debug templates, use this SCONS line:</p> Godot 2.x, 3.xGodot 4.x <pre><code>scons platform=&lt;your platform&gt; production=yes tools=no target=release_debug\n</code></pre> <pre><code>scons platform=&lt;your platform&gt; tools=no target=template_debug\n</code></pre> <p>To compile release templates, use this SCONS line:</p> Godot 2.x, 3.xGodot 4.x <pre><code>scons platform=&lt;your platform&gt; production=yes tools=no target=release\n</code></pre> <pre><code>scons platform=&lt;your platform&gt; tools=no target=template_release\n</code></pre>"},{"location":"howto/modules/#get-the-steamworks-sdk","title":"Get the Steamworks SDK","text":""},{"location":"howto/modules/#double-checking-folder-file-structure","title":"Double-Checking Folder / File Structure","text":""},{"location":"howto/modules/#compiling-time","title":"Compiling Time","text":""},{"location":"howto/modules/#a-linux-note","title":"A Linux Note","text":"<p>If using Ubuntu 16.10 or higher and having issues with PIE security in GCC, use <code>LINKFLAGS='-no-pie'</code> to get an executable instead of a shared library.</p> <p>When the compiling is finished, make sure to copy the Steam shared library, for your operating system, from godot/modules/godotsteam/sdk/redistributable_bin/ folder to the newly-compiled Godot binary location.</p> <p>By default, it should be in the godot/bin/ folder. You can move them to a new location as long as you keep the two files together.</p> <p>Missing Shared Library</p> <p>A lack of the Steam API .dll/.so/.dylib for your respective OS will cause the editor or game to fail and crash when testing or running the game outside of the Steam client.</p>"},{"location":"howto/modules/#all-together-now","title":"All Together Now","text":""},{"location":"howto/modules/#a-general-note","title":"A General Note","text":"<p>Some people report putting the Steam API file inside their project folder fixes some issues.</p>"},{"location":"howto/modules/#a-mac-note","title":"A Mac Note","text":"<p>For MacOS, the libsteam_api.dylib must be in the Content/MacOS/ folder in your application zip or the game will crash.</p>"},{"location":"howto/modules/#a-linux-note_1","title":"A Linux Note","text":"<p>For Linux, you may have to load the overlay library for Steam overlay to work:</p> <pre><code>export LD_PRELOAD=~/.local/share/Steam/ubuntu12_32/gameoverlayrenderer.so;~/.local/share/Steam/ubuntu12_64/gameoverlayrenderer.so\n\nor \n\nexport LD_PRELOAD=~/.local/share/Steam/ubuntu12_32/gameoverlayrenderer.so;\nexport LD_PRELOAD=~/.local/share/Steam/ubuntu12_64/gameoverlayrenderer.so;\n</code></pre> <p>This can be done in an .sh file that runs these before running your executable. This issue may not arise for all users and can also just be done by the user in a terminal separately. You can read more about it in our Linux Caveats doc.</p> <p>From here you should have access to all of the Steamworks SDK functions and callbacks.</p> <p>You should be able to read the Steamworks API documentation to see what all is available and cross-reference with GodotSteam's documentation.</p> <p>Feel free to check out our tutorials if you want to learn some basics or just start tinkering!</p>"},{"location":"howto/modules/#good-to-go","title":"Good to Go","text":""},{"location":"howto/multiplayer_peer/","title":"How-To Compile Multiplayer Peer","text":"<p>For those of you who are comfortable compiling or want to give it a shot, here are some steps to follow.</p> <p>Notes</p> <p>Currently you cannot compile GodotSteam with MinGW so it does require use of Visual Studio redistributables on Windows. Most Windows games will use it so, for the most part, end users are fine. However, if they report any issues with running things, direct them to install the latest Visual Studio redistributables.</p> <p>Follow Godot's documentation to setup the required tools for your operating system.</p> <p> Windows  Linux  Mac</p> <p>Regardless of which option you pick, make sure it is for Godot version 4.0 or higher.</p>"},{"location":"howto/multiplayer_peer/#set-up-tools","title":"Set Up Tools","text":""},{"location":"howto/multiplayer_peer/#get-godot","title":"Get Godot","text":""},{"location":"howto/multiplayer_peer/#cloning-the-source","title":"Cloning the Source","text":"<p>You can clone the latest Godot source in a folder called godot like so:</p> <p><pre><code>git clone https://github.com/godotengine/godot.git -b 4.2.1-stable godot\n</code></pre> You may need to change the tag from 4.2.1-stable to whatever the current version is or whatever version you need.</p>"},{"location":"howto/multiplayer_peer/#downloading-the-source","title":"Downloading the Source","text":"<p>Alternatively, you can download and unpack the Godot source from their Github into a folder called godot.</p>"},{"location":"howto/multiplayer_peer/#get-godotsteam","title":"Get GodotSteam","text":""},{"location":"howto/multiplayer_peer/#cloning-the-source_1","title":"Cloning the Source","text":"<p>Head into the godot/modules/ folder and clone the source like so:</p> <pre><code>git clone -b godot4 https://github.com/GodotSteam/GodotSteam.git godotsteam\n</code></pre>"},{"location":"howto/multiplayer_peer/#downloading-the-source_1","title":"Downloading the Source","text":"<p>Alternatively, you can download the godot4 branch from our repository then unpack it into a folder named godotsteam inside your Godot source godot/modules/ folder.</p> <p>Head into the godot/modules folder and clone the source like so:</p> <p><pre><code>git clone -b multiplayer-peer https://github.com/GodotSteam/GodotSteam.git godotsteam_multiplayer\n</code></pre> Alternatively, you can download the multiplayer-peer branch from our repository then unpack it into a folder called godotsteam_multiplayer inside your Godot source godot/modules/ folder.</p> <p>Download the Steamworks SDK from Valve's partners site. This requires a Steam developer account.</p> <p>Move the public and redistributable_bin folders from the unzipped Steamworks SDK into the godot/modules/godotsteam/sdk/ so you have the following layout:</p> <pre><code>godot/\n\u2514\u2500 modules/\n    \u2514\u2500 godotsteam/\n        \u2514\u2500 sdk/\n            \u251c\u2500 public/*\n            \u2514\u2500 redistributable_bin/*\n</code></pre> <p>Before we start compiling, let us make sure everything is in place. Your godot directory should look something like this:</p> <pre><code>godot/\n\u2514\u2500 modules/\n    \u251c\u2500 godotsteam/\n    \u2502  \u251c\u2500 doc_classes/\n    \u2502  \u251c\u2500 sdk/\n    \u2502  \u2502  \u251c\u2500 public/*\n    \u2502  \u2502  \u2514\u2500 redistributable_bin/*\n    \u2502  \u251c\u2500 config.py\n    \u2502  \u251c\u2500 godotsteam.cpp\n    \u2502  \u251c\u2500 godotsteam.h\n    \u2502  \u251c\u2500 godotsteam_constants.h\n    \u2502  \u251c\u2500 register_types.cpp\n    \u2502  \u251c\u2500 register_types.h\n    \u2502  \u2514\u2500 SCsub\n    \u2514\u2500 godotsteam_multiplayer/\n        \u251c\u2500 config.py\n        \u251c\u2500 register_types.cpp\n        \u251c\u2500 register_types.h\n        \u251c\u2500 SCsub\n        \u251c\u2500 steam_id.cpp\n        \u251c\u2500 steam_id.h\n        \u251c\u2500 steam_multiplayer_peer.cpp\n        \u2514\u2500 steam_multiplayer_peer.h\n</code></pre> <p>You can also just put the godotsteam and godotsteam_multiplayer directories where ever you like and just point to them in SCONS when compiling: </p> <pre><code>custom_modules='../path/to/dir/godotsteam, ../path/to/dir/godotsteam_multiplayer'\n</code></pre> <p>To compile editors, use this SCONS line:</p> <pre><code>scons platform=&lt;your platform&gt; tools=yes target=editor\n</code></pre> <p>To compile debug templates, use this SCONS line:</p> <pre><code>scons platform=&lt;your platform&gt; tools=no target=template_debug\n</code></pre> <p>To compile release templates, use this SCONS line:</p> <pre><code>scons platform=&lt;your platform&gt; tools=no target=template_release\n</code></pre>"},{"location":"howto/multiplayer_peer/#get-godotsteam-multiplayer-peer","title":"Get GodotSteam Multiplayer Peer","text":""},{"location":"howto/multiplayer_peer/#get-the-steamworks-sdk","title":"Get the Steamworks SDK","text":""},{"location":"howto/multiplayer_peer/#double-checking-folder-file-structure","title":"Double-Checking Folder / File Structure","text":""},{"location":"howto/multiplayer_peer/#compiling-time","title":"Compiling Time","text":""},{"location":"howto/multiplayer_peer/#a-linux-note","title":"A Linux Note","text":"<p>If using Ubuntu 16.10 or higher and having issues with PIE security in GCC, use <code>LINKFLAGS='-no-pie'</code> to get an executable instead of a shared library.</p> <p>When the compiling is finished, make sure to copy the Steam shared library, for your operating system, from godot/modules/godotsteam/sdk/redistributable_bin/ folder to the newly-compiled Godot binary location.</p> <p>By default, it should be in the godot/bin/ folder. You can move them to a new location as long as you keep the two files together.</p> <p>Missing Shared Library</p> <p>A lack of the Steam API .dll/.so/.dylib for your respective OS will cause the editor or game to fail and crash when testing or running the game outside of the Steam client.</p>"},{"location":"howto/multiplayer_peer/#all-together-now","title":"All Together Now","text":""},{"location":"howto/multiplayer_peer/#a-general-note","title":"A General Note","text":"<p>Some people report putting the Steam API file inside their project folder fixes some issues.</p>"},{"location":"howto/multiplayer_peer/#a-mac-note","title":"A Mac Note","text":"<p>For MacOS, the libsteam_api.dylib must be in the Content/MacOS/ folder in your application zip or the game will crash.</p>"},{"location":"howto/multiplayer_peer/#a-linux-note_1","title":"A Linux Note","text":"<p>For Linux, you may have to load the overlay library for Steam overlay to work:</p> <pre><code>export LD_PRELOAD=~/.local/share/Steam/ubuntu12_32/gameoverlayrenderer.so;~/.local/share/Steam/ubuntu12_64/gameoverlayrenderer.so\n\nor \n\nexport LD_PRELOAD=~/.local/share/Steam/ubuntu12_32/gameoverlayrenderer.so;\nexport LD_PRELOAD=~/.local/share/Steam/ubuntu12_64/gameoverlayrenderer.so;\n</code></pre> <p>This can be done in an .sh file that runs these before running your executable. This issue may not arise for all users and can also just be done by the user in a terminal separately. You can read more about it in our Linux Caveats doc.</p> <p>From here you should have access to all of the Steamworks SDK functions and callbacks, as well as use Godot's RPC, MultiplayerSynchronizer node, and MultiplayerSpawner node.</p> <p>You should be able to read the Steamworks API documentation to see what all is available and cross-reference with GodotSteam's documentation.</p> <p>Feel free to check out our tutorials if you want to learn some basics or just start tinkering!</p>"},{"location":"howto/multiplayer_peer/#good-to-go","title":"Good to Go","text":""},{"location":"howto/server/","title":"How-To Servers","text":"<p>For those of you who are comfortable compiling or want to give it a shot, here are some steps to follow.</p> <p>Notes</p> <p>Currently you cannot compile GodotSteam with MinGW so it does require use of Visual Studio redistributables on Windows. Most Windows games will use it so, for the most part, end users are fine. However, if they report any issues with running things, direct them to install the latest Visual Studio redistributables.</p> <p>Follow Godot's documentation to setup the required tools for your operating system.</p> <p> Windows  Linux  Mac</p>"},{"location":"howto/server/#set-up-tools","title":"Set Up Tools","text":""},{"location":"howto/server/#get-godot","title":"Get Godot","text":""},{"location":"howto/server/#cloning-the-source","title":"Cloning the Source","text":"<p>You can clone the latest Godot source in a folder called godot like so:</p> Godot 3.xGodot 4.x <pre><code>git clone https://github.com/godotengine/godot.git -b 3.5.3-stable godot\n</code></pre> <pre><code>git clone https://github.com/godotengine/godot.git -b 4.2.1-stable godot\n</code></pre> <p>You may need to change the given tag(s) above from whatever it is to whatever the current version or whatever version you need.</p>"},{"location":"howto/server/#downloading-the-source","title":"Downloading the Source","text":"<p>Alternatively, you can download and unpack the Godot source from their Github into a folder called godot.</p>"},{"location":"howto/server/#get-godotsteam-server","title":"Get GodotSteam Server","text":""},{"location":"howto/server/#cloning-the-source_1","title":"Cloning the Source","text":"<p>Head into the godot/modules/ folder and clone the source like so:</p> Godot 3.xGodot 4.x <pre><code>git clone -b godot3 https://github.com/GodotSteam/GodotSteam-Server.git godotsteam_server\n</code></pre> <pre><code>git clone -b godot4 https://github.com/GodotSteam/GodotSteam-Server.git godotsteam_server\n</code></pre>"},{"location":"howto/server/#downloading-the-source_1","title":"Downloading the Source","text":"<p>Alternatively, you can download the branch you need from our repository then unpack it into a folder named godotsteam_server inside your Godot source godot/modules/ folder.</p> <p>Download the Steamworks SDK from Valve's partners site. This requires a Steam developer account.</p> <p>Move the public and redistributable_bin folders from the unzipped Steamworks SDK into the godot/modules/godotsteam_server/sdk/ so you have the following layout:</p> <pre><code>godot/\n\u2514\u2500 modules/\n   \u2514\u2500 godotsteam_server/\n      \u2514\u2500 sdk/\n         \u251c\u2500 public/*\n         \u2514\u2500 redistributable_bin/*\n</code></pre> <p>Before we start compiling, let us make sure everything is in place. Your godot directory should look something like this:</p> <pre><code>godot/\n\u2514\u2500 modules/\n   \u2514\u2500 godotsteam_server/\n      \u251c\u2500 doc_classes/\n      \u251c\u2500 sdk/\n      \u2502  \u251c\u2500 public/*\n      \u2502  \u2514\u2500 redistributable_bin/*\n      \u251c\u2500 config.py\n      \u251c\u2500 godotsteam_server.cpp\n      \u251c\u2500 godotsteam_server.h\n      \u251c\u2500 register_types.cpp\n      \u251c\u2500 register_types.h\n      \u2514\u2500 SCsub\n</code></pre> <p>You can also just put the godotsteam_server directory where ever you like and just point to it in SCONS when compiling: </p> <pre><code>custom_modules='../path/to/dir/godotsteam_server'\n</code></pre> <p>To compile editors, use this SCONS line:</p> Godot 3.xGodot 4.x <pre><code>scons platform=&lt;your platform&gt; production=yes tools=yes target=release_debug\n</code></pre> <pre><code>scons platform=&lt;your platform&gt; tools=yes target=editor\n</code></pre> <p>To compile debug templates, use this SCONS line:</p> Godot 3.xGodot 4.x <pre><code>scons platform=&lt;your platform&gt; production=yes tools=no target=release_debug\n</code></pre> <pre><code>scons platform=&lt;your platform&gt; tools=no target=template_debug\n</code></pre> <p>To compile release templates, use this SCONS line:</p> Godot 3.xGodot 4.x <pre><code>scons platform=&lt;your platform&gt; production=yes tools=no target=release\n</code></pre> <pre><code>scons platform=&lt;your platform&gt; tools=no target=template_release\n</code></pre>"},{"location":"howto/server/#get-the-steamworks-sdk","title":"Get the Steamworks SDK","text":""},{"location":"howto/server/#double-checking-folder-file-structure","title":"Double-Checking Folder / File Structure","text":""},{"location":"howto/server/#compiling-time","title":"Compiling Time","text":""},{"location":"howto/server/#a-linux-note","title":"A Linux Note","text":"<p>If using Ubuntu 16.10 or higher and having issues with PIE security in GCC, use <code>LINKFLAGS='-no-pie'</code> to get an executable instead of a shared library.</p> <p>When the compiling is finished, make sure to copy the Steam shared library, for your operating system, from godot/modules/godotsteam_server/sdk/redistributable_bin/ folder to the newly-compiled Godot binary location.</p> <p>By default, it should be in the godot/bin/ folder. You can move them to a new location as long as you keep the two files together.</p> <p>Missing Shared Library</p> <p>A lack of the Steam API .dll/.so/.dylib for your respective OS will cause the editor or game to fail and crash when testing or running the game outside of the Steam client.</p>"},{"location":"howto/server/#all-together-now","title":"All Together Now","text":""},{"location":"howto/server/#a-general-note","title":"A General Note","text":"<p>Some people report putting the Steam API file inside their project folder fixes some issues.</p>"},{"location":"howto/server/#a-mac-note","title":"A Mac Note","text":"<p>For MacOS, the libsteam_api.dylib must be in the Content/MacOS/ folder in your application zip or the game will crash.</p>"},{"location":"howto/server/#a-linux-note_1","title":"A Linux Note","text":"<p>For Linux, you may have to load the overlay library for Steam overlay to work:</p> <pre><code>export LD_PRELOAD=~/.local/share/Steam/ubuntu12_32/gameoverlayrenderer.so;~/.local/share/Steam/ubuntu12_64/gameoverlayrenderer.so\n\nor \n\nexport LD_PRELOAD=~/.local/share/Steam/ubuntu12_32/gameoverlayrenderer.so;\nexport LD_PRELOAD=~/.local/share/Steam/ubuntu12_64/gameoverlayrenderer.so;\n</code></pre> <p>This can be done in an .sh file that runs these before running your executable. This issue may not arise for all users and can also just be done by the user in a terminal separately. You can read more about it in our Linux Caveats doc.</p> <p>From here you should have access to all of the Steamworks Server SDK functions and callbacks.</p> <p>You should be able to read the Steamworks API documentation to see what all is available and cross-reference with GodotSteam's documentation.</p> <p>Feel free to check out our tutorials if you want to learn some basics or just start tinkering!</p>"},{"location":"howto/server/#good-to-go","title":"Good to Go","text":""},{"location":"issues/common_issues/","title":"Common Issues","text":"<p>What could possibly go wrong? Well, we will cover some of those common pitfalls people find themselves in. This should help you troubleshoot some of the basics for when things don't seem to be working.  You can also come ask questions on Discord.</p>"},{"location":"issues/common_issues/#achievements-stats-leaderboard","title":"Achievements, Stats, Leaderboard","text":""},{"location":"issues/common_issues/#achievements-not-working","title":"Achievements Not Working","text":"<p>Sometimes your brand new achievements don't seem to be triggering. One cause can be that you didn't publish them in the Steamworks back-end. Once they are added into Steam's system, you'll need to publish the changes to be able to work with them.</p> <p>Some users have also found that getting or setting achievements doesn't work at all until the player's current stats have been retrieved. GodotSteam should do this by default when you initialize Steamworks; unless, that is, you passed <code>false</code> to either <code>steamInit()</code> or <code>steamInitEx()</code>.  If so, just call <code>requestCurrentStats()</code> or <code>requestUserStats()</code>.</p>"},{"location":"issues/common_issues/#leaderboard-names","title":"Leaderboard Names","text":"<p>I haven't actually confirmed this yet, but it seems that a dash in the leaderboard name will cause it to fail. For example, this-leaderboard will probably not work but this_leaderboard will.</p> <p>Also remember that leaderboards need to be published to be functional.</p> <p>On occasion folks will download the pre-compiled editor (module version) and then install the plug-in from the Godot Asset Library. This will result in a few weird errors as you will probably be making duplicate calls.</p>"},{"location":"issues/common_issues/#dont-mix-the-module-and-plug-in","title":"Don't Mix the Module and Plug-in","text":""},{"location":"issues/common_issues/#using-plug-in-first","title":"Using Plug-In First","text":"<p>If you installed the plug-in and want to switch to the pre-compiled module, or your own compiled version; you'll need to completely remove the plug-in from you project's folder and in the settings.</p> <p>If using Godot 4 and the GodotSteam GDExtension, check in the .godot folder for any traces of the extension in your extension_list.cfg and remove it.</p>"},{"location":"issues/common_issues/#using-module-first","title":"Using Module First","text":"<p>If you are coming from the pre-compiled modules versions and want to switch to the plug-ins, make sure you remove the Steam shared library file (steam_api64.dll, libsteam_api.so, or libsteam_api.dylib) from either the root of your project or sitting next to your editor executable.</p> <p>In some cases, this will prevent the plug-in from loading correctly.</p> <p>If you are using Godot Engine that has double-precision enabled, using the GDNative or GDExtension plug-ins may crash the editor as they are not compiled with double-precision.</p> <p>If you need this feature, you will need to self-compile the editor or plugi-ns.</p> <p>GDNative has some additional quirks to its usage. If these issues impact your game's development or release, please switch to the GodotSteam 3 pre-compiled editors and templates after uninstalling the GDNative plug-in.</p>"},{"location":"issues/common_issues/#double-precision-editor-crashes","title":"Double-Precision Editor Crashes","text":""},{"location":"issues/common_issues/#gdnative","title":"GDNative","text":""},{"location":"issues/common_issues/#no-enums-or-constants","title":"No Enums or Constants","text":"<p>There is no way to access Steam's enums or contants in GDNative.</p>"},{"location":"issues/common_issues/#rich-presence","title":"Rich Presence","text":"<p>Rich presence will work fine on all operating systems except Windows.  It will occasionally make the value the key on random calls.</p> <p>Thankfully, Furcifer shared some code to help with this issue. You can read more about it in the Rich Presence tutorial!</p>"},{"location":"issues/common_issues/#getting-lobbies","title":"Getting Lobbies","text":"<p>For whatever reason, the get lobby callback would not return a single array like everything else so the callback will send an array of lobbies and the total count.</p>"},{"location":"issues/common_issues/#initialization","title":"Initialization","text":""},{"location":"issues/common_issues/#steam_appidtxttxt","title":"steam_appid.txt.txt","text":"<p>If you aren't using the environment variables to set what game you're running, then you're probably using the older method of seatting your game's app ID in the <code>steam_appid.txt</code> file. For Windows users, when creating the <code>steam_appid.txt</code> file you need to watch out for the dreaded <code>.txt.txt</code> extension. If you have extensions hidden in the file explorer, this is more likely to happen since you can't see that extra <code>.txt</code>. If you do have them hidden, make sure to skip adding <code>.txt</code> to the end.</p>"},{"location":"issues/common_issues/#error-79-when-initializing","title":"Error 79 When Initializing","text":"<p>This can have quite a few causes but a common one is not having your depots or packages set up correctly. Check out the packages page in the official Steamworks SDK documentation for more on how to do it.</p>"},{"location":"issues/common_issues/#error-steam-connecttoglobaluser-failed","title":"Error <code>steam ConnectToGlobalUser failed.</code>","text":"<p>This error may be seen on initialization. This can have a few causes:</p> <ul> <li>Steam is not started</li> <li>The currently signed-in user does not have access to the game (i.e. it's not in the users Steam Library)</li> </ul> <p>Some people get <code>Parse Error: The identifier Steam isn't declared in the current scope</code>. If you get this error, one of the following is the cause:</p> <ul> <li>Either you're not using a pre-compiled editor.</li> <li>You didn't actually include GodotSteam in your build when compiling.</li> <li>You're using a non-GodotSteam template when exporting from a GodotSteam-enabled editor.</li> </ul>"},{"location":"issues/common_issues/#parse-error","title":"Parse Error","text":""},{"location":"issues/common_issues/#steam-client","title":"Steam Client","text":""},{"location":"issues/common_issues/#game-does-not-appear-in-steam-library","title":"Game Does Not Appear In Steam Library","text":"<p>When you do not have access to the game you created, you likely haven't received a grant for it! If you have created the Steam App with the currently signed-in account, you should have received an autogrant. To check whether you have an autogrant, go to:</p> <ol> <li>Your Steam Dashboard</li> <li>Under Users &amp; Permissions</li> <li>Select Overview</li> </ol> <p>Make sure, the <code>Developer Comp</code> package is there, as shown in the screenshot below: </p> <p>If it is not there, you need to add it. To do this, click the <code>Add/Manage Groups</code> button on this very screen. Then, on the next screen, select the Group for your app that includes your account (likely called <code>Everyone</code>, which includes all partner account members). On the next screen, you should then be able to add the autogrant:</p> <p></p>"},{"location":"issues/common_issues/#steam-inputs","title":"Steam Inputs","text":""},{"location":"issues/common_issues/#steam-eating-godots-inputs","title":"Steam Eating Godot's Inputs","text":"<p>Sometimes Steam will \"eat\" inputs meant for Godot so you get no controller responses. If you aren't using Steam Inputs class, you can go into the game's setting and just turn Inputs off.  This will allow Godot to resume getting input data.</p>"},{"location":"issues/common_issues/#steam-overlay","title":"Steam Overlay","text":""},{"location":"issues/common_issues/#forward-vulkan","title":"Forward+ / Vulkan","text":"<p>Every so often folks will find that Steam overlay does not work or flickers when running their project from the Godot 4.x editor or a standalone Forward+ build outside of Steam. This has been the case since the Godot 4 alpha builds. Steam overlay should work fine when using Compability / OpenGL mode.</p> <p>The Steam overlay will render correctly once a Forward+ build is run from the Steam client itself, as Steam injects the overlay during boot. When run from Steam as a Non-Steam app, the overlay will display correctly, but won't be tied to the app ID, so achievements and game artwork won't show up inside the overlay.</p>"},{"location":"issues/common_issues/#driver-updates","title":"Driver Updates","text":"<p>Certain driver versions on GPUs will allow Steam overlay to work with Forward+ mode. If the overlay isn't working, you may want to try changing version numbers.</p> <p>A user also reported that with NVidia driver version 546.33, in Forward+ mode, that the game stuttered / jittered a bit when Steam was initialized. However, the stuttering went away when switching to Compatibility mode.</p>"},{"location":"issues/common_issues/#other-solutions","title":"Other Solutions","text":"<p>There is also a nice video about getting overlay to work without messing with drivers, thanks to FinePointCGI:</p> <p>  'How To Fix Your Steam Overlay' by FinePointCGI</p>"},{"location":"issues/linux_issues/","title":"Issues - Linux Platform","text":"<p>There are issues some users might run into on Linux when using Godot and GodotSteam.</p> <p>There is apparently an issue with games using GLES 2 and systems running Mesa 20.3.5 through 21.2.5 that causes the Steam overlay to not work or the game to crash. As of now there is no solution to fix this, except to use GLES 3 instead or a Mesa version outside that small window.</p> <p>You may run into the following error:</p> <pre><code>error while loading shared libraries: libsteam_api.so: cannot open shared object file: No such file or directory\n</code></pre> <p>This means you forgot to place <code>libsteam_api.so</code> next to your executable. Remember to include it along with your shipped game, as described in the Export and Shipping tutorial.</p> <p>The Flatpak version of Steam will not work with GodotSteam in testing (through the editor) as it will be unable to find the running process correctly.  This may or may not affect the Steam version of Godot and downloading the plug-in version through the Asset Library; I have not yet tested this setup.</p> <p>At the time of writing, we have not found a way to get these two talking.  However, your shipped game will work fine.  Also, if anyone knows how to solve this, please let us know!</p> <p>If you are using something like Fedora Atomic, you can install Distrobox to work around this.</p>"},{"location":"issues/linux_issues/#gles-2-mesa-overlay-crash","title":"GLES 2 / Mesa / Overlay Crash","text":""},{"location":"issues/linux_issues/#libsteam_apiso-issues","title":"Libsteam_api.so Issues","text":""},{"location":"issues/linux_issues/#steam-on-flatpak","title":"Steam on Flatpak","text":""},{"location":"issues/mac_issues/","title":"Issues - Mac Platform","text":"<p>There are issues some users might run into on macOS when using Godot and GodotSteam.</p> <p>From user canardbleu, a handy tip about using the pre-compiled editors and macOS M1 and M2 machines.</p> <p>Their team said \"[we were] unable to launch any scene because of the 'files &amp; folders' permission popup that keeps popping and popping. Fortunately, we were able to find a workaround by executing the following command.\"</p> <pre><code>codesign -s - --deep /Applications/GodotEditor.app\n</code></pre>"},{"location":"issues/mac_issues/#m1-and-m2-machine-issues","title":"M1 and M2 Machine Issues","text":""},{"location":"projects/components/","title":"GodotSteam Components","text":"<p>A collection of editor tools and custom nodes to make the process of setting up Steamworks integration faster.  The project will be open-source and can be found on Github.</p> <p>Everyone who donates to the project through Github Sponsors will have early access to Components and all updates before public roll-out.</p> <p>Once available, you can download GodotSteam Components from either Github or the Godot Asset Library.</p> <p>  Github   Godot Asset Library </p> <ul> <li> <p> SteamAchievementIcon</p> <p>A custom Sprite2D node to fetching and displaying your Steam achievement icons.</p> </li> <li> <p> Inventory Item Editor</p> <p>Editor tool for interacting with Inventory item VDFs.</p> </li> <li> <p> Steamworks VDF Editor</p> <p>Editor tool for interacting with your game's Steam Pipe VDFs.</p> </li> <li> <p> SteamLobby</p> <p>A custom lobby node and scene that can be dropped into your project and modified.</p> </li> <li> <p> SteamChat</p> <p>A custom chat node and scene companion set for SteamLobby. </p> </li> </ul> <p>Here is a list of some planned components to be developed after the current list of components is completed:</p> <ul> <li> <p> Inputs Editor</p> <p>Editor tool for interacting with Steam Inputs VDF files for use in your game.</p> </li> <li> <p> SteamInputs</p> <p>A custom Inputs node for interacting with the Steam Inputs class.</p> </li> <li> <p> Networking Messages</p> <p>A boilerplate script for using Steam Networking Messages class.</p> </li> <li> <p> Networking P2P</p> <p>A boilerplate script for using Steam Networking class.</p> </li> <li> <p> Networking Sockets</p> <p>A boilerplate script for using Steam Networking Sockets class.</p> </li> <li> <p> UGC Editor</p> <p>Editor tool for interacting with UGC / Workshop items and related files.</p> </li> <li> <p> Voice Chat</p> <p>An update for SteamChat to use Steam Voice functionality.</p> </li> </ul> <p>Currently in development features are actively being worked on in Skillet.</p>"},{"location":"projects/components/#currently-in-development","title":"Currently In Development","text":""},{"location":"projects/components/#planned-development","title":"Planned Development","text":""},{"location":"projects/skillet/","title":"Skillet","text":"<p>An open-source and free-to-play game built to showcase GodotSteam's functionality. The game being shared as open-source will allow developers to see how things work in Steamworks and Godot with real-world examples. Users may be copy and modify the code for their own needs and games. Since it is meant to be educational, it will be designed in a somewhat simplified way to accommodate all levels.</p> <p>Planned release for Skillet is sometime in December with the repo going live sometime in October or once substantial work has been completed on the main game loop and systems.</p> <p>Skillet will showcase the majority of Valve's Steamworks SDK with the following:</p> <ul> <li>Achievements and statistics</li> <li>Workshop / UGC</li> <li>Inventory</li> <li>Input</li> <li>Apps like checking other owned games and DLC</li> <li>Remote Play for online / local co-op</li> </ul> <p>More to come as development continues.</p>"},{"location":"projects/skillet/#what-is-it","title":"What Is It?","text":""},{"location":"projects/skillet/#showcasing-steamworks","title":"Showcasing Steamworks","text":""},{"location":"projects/skillet/#game-modes","title":"Game Modes","text":""},{"location":"projects/skillet/#trial-by-fire","title":"Trial by Fire","text":"<p>The normal mode. Players must avoid being ignited by various arena hazards. Though players cannot attack each other directly, everything is very bouncy and causes knockback.  Watch out.  Last player standing wins.</p>"},{"location":"projects/skillet/#hot-potato","title":"Hot Potato","text":"<p>Standing on the heated up pan will increase \"combustion\" meter; when it's full the player burst into flames. Various objects get tossed into the pan as the match goes on and melt down. Use them while you can.  Last player standing wins.</p>"},{"location":"projects/skillet/#pass-the-torch","title":"Pass The Torch","text":"<p>A tag-like mode where one player starts as The Match and must tag other players, igniting them. These burning players may now also spread the fire while they have life left to do so.  Last player standing wins.</p>"},{"location":"projects/skillet/#fire-water-sponge","title":"Fire-Water-Sponge","text":"<p>A take on Rock-Paper-Scissors where players are split into three groups that can only affect the appropriate teams. Fire burns sponge, sponge absorbs water, water douses fire.  Last team standing wins.</p> <p>Since Skillet is free-to-play, we will be offering two DLC packs: Godot Dinner Party and GodotSteam Snack Pack. Of course, any donations through Github Sponsors goes towards Skillet's development and the general GodotSteam development.</p>"},{"location":"projects/skillet/#support-through-dlc","title":"Support Through DLC","text":""},{"location":"projects/skillet/#godot-dinner-party","title":"Godot Dinner Party","text":"<p>This DLC contains some Godot-themed skins and cosmetics as well as other Godot-made games' cosmetics. All proceeds from this DLC go to the Godot Foundation after Valve's cut. You can also donate to Godot directly here.</p>"},{"location":"projects/skillet/#godotsteam-snack-pack","title":"GodotSteam Snack Pack","text":"<p>This DLC contains additional skins and cosmetics based on GodotSteam and other creations.</p> <p>At launch, Skillet has some additional cosmetics and skins from based on other Godot-made games. If you own these games, the skins will unlock when you boot it up. The cosmetics and skins will drop into your Steam inventory and can be traded with friends or other players. Additionally, some will be available in the Godot Dinner Party DLC that will release on launch too.</p> Brotato by Blobfish Chillquarium by Ben Reber District Panic by Asfar GAMES Drift: Space Survival by KAR Games Lila's Sky Ark by Monolith of Minds Resolutiion by Monolith of Minds Satryn Deluxe by Maybell\ud83c\udf3b Virtual Cottage by DU&amp;I WindowKill by torcado <p>Post-launch we will reach out to more devs about adding more cosmetics and skins and, of course, any developer making a game with Godot can create a pull request in Skillet's repo to add their own cosmetics to the game.  If you would like to have your game included in Skillet, feel free to reach out by e-mail.</p>"},{"location":"projects/skillet/#featuring-godot-made-games","title":"Featuring Godot-Made Games","text":""},{"location":"projects/skillet/#the-licenses","title":"The Licenses","text":""},{"location":"projects/skillet/#code","title":"Code","text":"<p>The code from Skillet is licensed under MIT license. You may use any code from the repo for your projects as is or modified; in free or commercial games.</p>"},{"location":"projects/skillet/#art-assets","title":"Art Assets","text":"<p>The art assets in Skillet are housed in a private repo and are not available publicly or allowed to be used in any other projects. Skillet's public repo will contain placeholder versions that are licensed under Creative Commons BY-NC-SA 4.0.</p>"},{"location":"projects/skillet/#font-assets","title":"Font Assets","text":"<p>Both fonts used in Skillet were purchased and licensed from Creative Fabrica but are not included in the public repo due to licensing restriction.</p>"},{"location":"tutorials/achievement_icons/","title":"Tutorials - Achievement Icons","text":"<p>This quick tutorial will cover to how get achievement icons from Steam's servers. It was made because there are some extra steps folks need to use to render the images and it may not be very clear otherwise.</p> Relevant GodotSteam classes and functions <ul> <li>User Stats class<ul> <li>getAchievementIcon()</li> <li>requestCurrentStats()</li> </ul> </li> <li>Utils class<ul> <li>getImageRGBA()</li> <li>getImageSize()</li> </ul> </li> </ul> <p>Before you can get achievement icons you first need to have retrieved the user's stats from Steam. This is done by default when initializing Steam, but can optionally be disabled. This tutorial assumes that you have already received the user stats. See requestCurrentStats() for more information if needed.</p> <p>First you will need to request the icon handle by using the achievement's API name you set in the Steamworks back-end:</p> <pre><code>var icon_handle: int = Steam.getAchievementIcon(\"ACHIEVEMENT_NAME\")\n</code></pre> <p>This handle is an ID used to get information about the image's size and a byte array (buffer) of the pixel data:</p> <pre><code>var icon_size: Dictionary = Steam.getImageSize(icon_handle)\nvar icon_buffer: Dictionary = Steam.getImageRGBA(icon_handle)\n</code></pre> <p>Note that the <code>getImageRGBA()</code> function can be somewhat expensive so it is recommended to only call this once per image handle and cache the result if you will need to access the image data multiple times.</p> <p>This buffer is a dictionary that contains two keys: <code>success</code> and <code>buffer</code> which contains the actual image data for our icon. However, as it is simply binary data, we need to load it into an Image so that Godot can use it as a Texture. The format of the data in the buffer is RGBA8 when we receive it from Steam, so we need to tell Godot how to make sense of it by specifying it as such:</p> Godot 2.x, 3.xGodot 4.x <pre><code>var icon_image: Image = Image.new()\nicon_image.create_from_data(icon_size.width, icon_size.height, false, Image.FORMAT_RGBA8, icon_buffer[\"buffer\"])\n</code></pre> <pre><code>var icon_image: Image = Image.create_from_data(icon_size.width, icon_size.height, false, Image.FORMAT_RGBA8, icon_buffer[\"buffer\"])\n</code></pre> <p>The size of the image is determined by the images you uploaded when configuring achievements on the Steamworks back-end. Valve recommends larger (256x256) images. If you want to display the image at a different size, say 64x64, you can optionally resize it now. Check the Godot documentation on <code>Image.resize()</code> for which interpolation mode best suits your needs.</p> <pre><code>icon_image.resize(64, 64, Image.INTERPOLATE_LANCZOS)\n</code></pre> <p>Now that all the pixels are set in the right places, we can create the actual texture which will be displayed:</p> Godot 2.x, 3.xGodot 4.x <pre><code>var icon_texture: ImageTexture = ImageTexture.new()\nicon_texture.create_from_image(icon_image)\n</code></pre> <pre><code>var icon_texture: ImageTexture = ImageTexture.create_from_image(icon_image)\n</code></pre> <p>Finally we can display the icon. Using the previous <code>icon_texture</code>, we can place this icon on our waiting Sprite or TextureRect, etc.</p> <p><pre><code>$Sprite.texture = icon_texture\n</code></pre> <p>Our complete example should look something like this:</p> Godot 2.x, 3.xGodot 4.x <pre><code># Get the image's handle\nvar icon_handle: int = Steam.getAchievementIcon(\"ACH_WIN_ONE_GAME\")\n\n# Get the image data\nvar icon_size: Dictionary = Steam.getImageSize(icon_handle)\nvar icon_buffer: Dictionary = Steam.getImageRGBA(icon_handle)\n\n# Create the image for loading\nvar icon_image: Image = Image.new()\nicon_image.create_from_data(icon_size.width, icon_size.height, false, Image.FORMAT_RGBA8, icon_buffer[\"buffer\"])\n\n# Create a texture from the image\nvar icon_texture: ImageTexture = ImageTexture.new()\nicon_texture.create_from_image(icon_image)\n\n# Display the texture on a sprite node\n$Sprite.texture = icon_texture\n</code></pre> <pre><code># Get the image's handle\nvar icon_handle: int = Steam.getAchievementIcon(\"ACH_WIN_ONE_GAME\")\n\n# Get the image data\nvar icon_size: Dictionary = Steam.getImageSize(icon_handle)\nvar icon_buffer: Dictionary = Steam.getImageRGBA(icon_handle)\n\n# Create the image for loading\nvar icon_image: Image = Image.create_from_data(icon_size.width, icon_size.height, false, Image.FORMAT_RGBA8, icon_buffer[\"buffer\"])\n\n# Create a texture from the image\nvar icon_texture: ImageTexture = ImageTexture.create_from_image(icon_image)\n\n# Display the texture on a sprite node\n$Sprite.texture = icon_texture\n</code></pre> <p>And that's how you display an achievement icon.</p>"},{"location":"tutorials/achievement_icons/#prerequisites","title":"Prerequisites","text":""},{"location":"tutorials/achievement_icons/#getting-the-handle-and-buffer","title":"Getting the Handle and Buffer","text":""},{"location":"tutorials/achievement_icons/#creating-the-image","title":"Creating the Image","text":""},{"location":"tutorials/achievement_icons/#all-in-one","title":"All-In-One","text":""},{"location":"tutorials/achievement_icons/#extra-resources","title":"Extra Resources","text":""},{"location":"tutorials/achievement_icons/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/authentication/","title":"Tutorials - Authentication","text":"<p>In this tutorial we will talk about authenticating users with Steam. Networking is out of scope for this tutorial; you will need to implement your own networking code. You can check out the lobbies and p2p networking tutorials for more on that, or even use Godot's high-level networking. You can read more about the whole authentication process in Steam's documentation page on the subject.</p> Relevant GodotSteam classes and functions <ul> <li>User class<ul> <li>beginAuthSession()</li> <li>cancelAuthTicket()</li> <li>endAuthSession()</li> <li>getAuthSessionTicket()</li> </ul> </li> </ul> <p>First, in both your clients and server, you'll want to set two variables: <code>auth_ticket</code> and <code>client_auth_tickets</code>. You will keep the local client's ticket dictionary in <code>auth_ticket</code>, obviously, and a list of all connected clients in your <code>client_auth_tickets</code> array. More on that later.</p> <pre><code># Set up some variables\nvar auth_ticket: Dictionary     # Your auth ticket\nvar client_auth_tickets: Array  # Array of tickets from other clients\n</code></pre> <p>Now, we'll set up the signals for authentication callbacks:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func _ready() -&gt; void:\n    Steam.connect(\"get_auth_session_ticket_response\", self, \"_on_get_auth_session_ticket_response\")\n    Steam.connect(\"validate_auth_ticket_response\", self, \"_on_validate_auth_ticket_response\")\n</code></pre> <pre><code>func _ready() -&gt; void:\n    Steam.get_auth_session_ticket_response.connect(_on_get_auth_session_ticket_response)\n    Steam.validate_auth_ticket_response.connect(_on_validate_auth_ticket_response)\n</code></pre> <p>Next we implement the respective functions for when we receive the signals:</p> <pre><code># Callback from getting the auth ticket from Steam\nfunc _on_get_auth_session_ticket_response(this_auth_ticket: int, result: int) -&gt; void:\n    print(\"Auth session result: %s\" % result)\n    print(\"Auth session ticket handle: %s\" % this_auth_ticket)\n</code></pre> <p>Our <code>_on_get_auth_session_ticket_response()</code> function will print out the auth ticket's handle and whether getting the ticket was successful (returns a <code>1</code>) or not. You can add logic for success or failure based on your game's needs. If successful, you'll probably want to send your new ticket to the server or another client for validation at this point.</p> <p>Speaking of validation:</p> <pre><code># Callback from attempting to validate the auth ticket\nfunc _on_validate_auth_ticket_response(auth_id: int, response: int, owner_id: int) -&gt; void:\n    print(\"Ticket Owner: %s\" % auth_id)\n\n    # Make the response more verbose, highly unnecessary but good for this example\n    var verbose_response: String\n    match response:\n        0: verbose_response = \"Steam has verified the user is online, the ticket is valid and ticket has not been reused.\"\n        1: verbose_response = \"The user in question is not connected to Steam.\"\n        2: verbose_response = \"The user doesn't have a license for this App ID or the ticket has expired.\"\n        3: verbose_response = \"The user is VAC banned for this game.\"\n        4: verbose_response = \"The user account has logged in elsewhere and the session containing the game instance has been disconnected.\"\n        5: verbose_response = \"VAC has been unable to perform anti-cheat checks on this user.\"\n        6: verbose_response = \"The ticket has been canceled by the issuer.\"\n        7: verbose_response = \"This ticket has already been used, it is not valid.\"\n        8: verbose_response = \"This ticket is not from a user instance currently connected to steam.\"\n        9: verbose_response = \"The user is banned for this game. The ban came via the Web API and not VAC.\"\n    print(\"Auth response: %s\" % verbose_response)\n    print(\"Game owner ID: %s\" % owner_id)\n</code></pre> <p>The <code>_on_validate_auth_ticket_response()</code> function is received in response to <code>beginAuthSession()</code> when the ticket has been validated. It sends back the Steam ID of the user being authorized, the result of the validation (success is <code>0</code> as shown above), and finally the Steam ID of the user that owns the game.</p> <p>As Valve notes, the owner of the game and the user being authorized may be different if the game is borrowed from Steam Family Library Sharing. Inside this function, you can again put in whatever logic your game requires. You will probably want to add the client to the server if successful, obviously.</p> <p>First you'll want to get an auth ticket from Steam and store it in your <code>auth_ticket</code> dictionary variable; this way you can pass it along to the server or other clients as needed:</p> <pre><code>auth_ticket = Steam.getAuthSessionTicket()\n</code></pre> <p>This function also has an optional <code>identity</code> you can pass to it but defaults to <code>null</code>. This identity can correspond to one of your networking identities set up with the Networking Types class.</p> <p>Now that you have your auth ticket, you'll want to pass it along to the server or other clients for validation.</p> <p>Your server or other clients will now want to take your auth ticket and validate it before allowing you to join the game. In a peer-to-peer situation, every client will want to validate the ticket of every other player. The server or clients will want to pass your <code>auth_ticket</code> dictionary's buffer and size, as well as your Steam ID, to <code>beginAuthSession()</code>. For this we'll create a <code>validate_auth_session()</code> function:</p> <pre><code>func validate_auth_session(ticket: Dictionary, steam_id: int) -&gt; void:\n    var auth_response: int = Steam.beginAuthSession(ticket.buffer, ticket.size, steam_id)\n\n    # Get a verbose response; unnecessary but useful in this example\n    var verbose_response: String\n    match auth_response:\n        0: verbose_response = \"Ticket is valid for this game and this Steam ID.\"\n        1: verbose_response = \"The ticket is invalid.\"\n        2: verbose_response = \"A ticket has already been submitted for this Steam ID.\"\n        3: verbose_response = \"Ticket is from an incompatible interface version.\"\n        4: verbose_response = \"Ticket is not for this game.\"\n        5: verbose_response = \"Ticket has expired.\"\n    print(\"Auth verifcation response: %s\" % verbose_response))\n\n    if auth_response == 0:\n        print(\"Validation successful, adding user to client_auth_tickets\")\n        client_auth_tickets.append({\"id\": steam_id, \"ticket\": ticket.id})\n\n    # You can now add the client to the game\n</code></pre> <p>If the response is <code>0</code> (meaning the ticket is valid), you can allow the player to connect to the server or game. A callback will also be received and trigger our <code>_on_validate_auth_ticket_response()</code> function which, as we saw before, sends along the Steam ID of the auth ticket provider, the result, and the Steam ID of the owner of the game. This callback will also be triggered when another user cancels their auth ticket. More on that later.</p> <p>After the ticket is validated, you'll want to save the player's Steam ID and their ticket handle in your <code>client_auth_tickets</code> array either as an array or dictionary so they can be called later to cancel the auth sessions. In our example above, we used a dictionary so we can just pull the ticket handle by the user's Steam ID.</p> <p>Finally when the game is over or the client is leaving the game, you'll want to cancel your own auth ticket and end the auth sessions with other players.</p> <p>When the client is ready to leave the game, they will pass their own ticket handle to the <code>cancelAuthTicket()</code> function like so:</p> <pre><code>Steam.cancelAuthTicket(auth_ticket.id)\n</code></pre> <p>This will trigger the <code>_on_validate_auth_ticket_response()</code> function for the server or other clients to let them know the player has left and invalidated their auth ticket. Additionally, you should call <code>endAuthSession()</code> to also close out the auth session with the server or other clients:</p> <pre><code>Steam.endAuthSession(steam_id)\n</code></pre> <p>You will need to pass the Steam ID of every client connected. You can do this in a loop from your <code>client_auth_tickets</code> array like so:</p> <pre><code>for this_client_ticket in client_auth_tickets:\n    Steam.endAuthSession(this_client_ticket.id)\n\n    # Then remove this client from the ticket array\n    client_auth_tickets.erase(this_client_ticket)\n</code></pre> <p>The Steamworks documentation states that each player must cancel their own auth ticket(s) and end any auth sessions started with other players.</p> <p>That concludes this simple tutorial for authenticated sessions.</p>"},{"location":"tutorials/authentication/#setting-up-signals","title":"Setting Up Signals","text":""},{"location":"tutorials/authentication/#getting-your-auth-ticket","title":"Getting Your Auth Ticket","text":""},{"location":"tutorials/authentication/#validating-the-auth-ticket","title":"Validating the Auth Ticket","text":""},{"location":"tutorials/authentication/#canceling-auth-tickets-and-ending-auth-sessions","title":"Canceling Auth Tickets and Ending Auth Sessions","text":""},{"location":"tutorials/authentication/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/authentication/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/auto_matchmaking/","title":"Tutorials - Lobby Auto-Matchmaking","text":"<p>A quick, requested tutorial is auto-matchmaking lobbies. While this example does not show how to match specific criteria, it will be noted where you can place such matches. This tutorial is basically an extension of the lobbies and P2P networking tutorials. Because of that we'll focus only on what's different; please refer to the aforementioned tutorials for additional information and layouts.</p> Relevant GodotSteam classes and functions <ul> <li>Matchmaking class<ul> <li>addRequestLobbyListDistanceFilter()</li> <li>getLobbyData()</li> <li>getNumLobbyMembers()</li> <li>joinLobby()</li> <li>requestLobbyList()</li> </ul> </li> </ul> <p>First let's set up some variables to fill in later:</p> <pre><code>var lobby_id: int = 0\nvar lobby_max_players: int = 2\nvar lobby_members: Array = []\nvar matchmaking_phase: int = 0\n</code></pre> <p>Carried over from the lobby tutorial is <code>lobby_id</code>, which obviously houses the lobby's ID, and <code>lobby_members</code>, which will be an array of dictionaries of lobby members and their Steam ID 64's.</p> <p>New to this tutorial is <code>matchmaking_phase</code> which keeps track of which iteration of the matchmaking search our code does. Also new is <code>lobby_max_players</code> which is used to check if the lobby has space for our player.</p> <p>All of the <code>_ready()</code> function callback connections will be the same.</p> <p>For our purposes, we will create a button named \"Auto Matchmake\" and connect a <code>on_pressed</code> signal to it called <code>_on_auto_matchmake_pressed()</code>. Here is the function that triggers when that button is pressed:</p> <pre><code># Start the auto matchmaking process.\nfunc _on_auto_matchmake_pressed() -&gt; void:\n    # Set the matchmaking process over\n    matchmake_phase = 0\n\n    # Start the loop!\n    matchmaking_loop()\n</code></pre> <p>This starts the main loop that looks for a matching lobby for your player to join:</p> <pre><code># Iteration for trying different distances\nfunc matchmaking_loop() -&gt; void:\n    # If this matchmake_phase is 3 or less, keep going\n    if matchmake_phase &lt; 4:\n        ###\n        # Add other filters for things like game modes, etc.\n        # Since this is an example, we cannot set game mode or text match features.\n        # However you could use addRequestLobbyListStringFilter to look for specific\n        # text in lobby metadata to match different criteria.\n\n        ###\n        # Set the distance filter\n        Steam.addRequestLobbyListDistanceFilter(matchmake_phase)\n\n        # Request a list\n        Steam.requestLobbyList()\n\n    else:\n        print(\"[STEAM] Failed to automatically match you with a lobby. Please try again.\")\n</code></pre> <p>As it notes in the code above, you could have a list of different filters the player can pick from before searching for a lobby. These can be applied to terms that <code>addRequestLobbyListStringFilter()</code> looks for ahead of time. Things like game modes, maps, difficulties, etc.</p> <p>Very important is our <code>addRequestLobbyListDistanceFilter()</code> and <code>matchmake_phase</code> variable. We are starting with \"close\" / 0 and ending with \"worldwide\" 3; hence at 4 it fails to find anything and prompts the user to try again.</p> <p>This loop function will trigger a callback once it finds some lobbies to check through. Sorting through our matches should look like this:</p> <pre><code># A lobby list was created, find a possible lobby\nfunc _on_lobby_match_list(lobbies: Array) -&gt; void:\n    # Set attempting_join to false\n    var attempting_join: bool = false\n\n    # Show the list \n    for this_lobby in lobbies:\n        # Pull lobby data from Steam\n        var lobby_name: String = Steam.getLobbyData(this_lobby, \"name\")\n        var lobby_nums: int = Steam.getNumLobbyMembers(this_lobby)\n\n        ###\n        # Add other filters for things like game modes, etc.\n        # Since this is an example, we cannot set game mode or text match features.\n        # However, much like lobby_name, you can use Steam.getLobbyData to get other\n        # preset lobby defining data to append to the next if statement.\n        ###\n\n        # Attempt to join the first lobby that fits the criteria\n        if lobby_nums &lt; lobby_max_players and not attempting_join:\n            # Turn on attempting_join\n            attempting_join = true\n            print(\"Attempting to join lobby...\")\n            Steam.joinLobby(this_lobby)\n\n    # No lobbies that matched were found, go onto the next phase\n    if not attempting_join:\n        # Increment the matchmake_phase\n        matchmake_phase += 1\n        matchmaking_loop()\n</code></pre> <p>This will go through every lobby returned and, if none of them match, it will iterate the <code>matchmake_phase</code> variable and start the loop again but moving one step further in the distance filter.</p> <p>Much like the previous additional filters, you can sort by other lobby data in the manner the <code>lobby_name</code> data is acquired. These bits of information can be added to a lobby when it is created, making this process easier.</p> <p>The first lobby that matches your criteria and has space for the user, triggers the <code>joinLobby()</code> function to fire and the player should soon join their automatically found lobby.</p>"},{"location":"tutorials/auto_matchmaking/#set-up","title":"Set Up","text":""},{"location":"tutorials/auto_matchmaking/#finding-a-lobby","title":"Finding a Lobby","text":""},{"location":"tutorials/auto_matchmaking/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/auto_matchmaking/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/avatars/","title":"Tutorials - Avatars","text":"<p>You may want to get the current player's avatar, or someone else's, and display it in your game. This tutorial will walk you through the basics of avatar retrieval and passing it to a sprite so you can use it.</p> Relevant GodotSteam classes and functions <ul> <li>Friends class<ul> <li>getPlayerAvatar</li> </ul> </li> </ul> <p>The default Steamworks functions to get player avatars requires multiple steps. However, GodotSteam has a unique function which makes getting the avatar data incredibly easy. Just use the following:</p> <pre><code>Steam.getPlayerAvatar()\n</code></pre> <p>This function has optional parameters. By default it will get medium-sized (64x64) avatar data for the current player. But you may pass it either <code>Steam.AVATAR_SMALL</code> (32x32), <code>Steam.AVATAR_MEDIUM</code> (64x64), or <code>Steam.AVATAR_LARGE</code> (128x128 or larger) to get different sizes; the numerical counterparts to these enums (1, 2, or 3) will also work. Additionally you can pass along a Steam ID64 to get avatar data for a specific user.</p> <p>To retrieve the avatar data buffer, you'll need to hook the signal for the callback:</p> Godot 2.x, 3.xGodot 4.x <pre><code>Steam.connect(\"avatar_loaded\", self, \"_on_loaded_avatar\")\n</code></pre> <pre><code>Steam.avatar_loaded.connect(_on_loaded_avatar)\n</code></pre> <p>This will return the user's Steam ID, the avatar's size, and the data buffer for rendering the image. If you have read the Achievement Icons tutorial, this should all look pretty familiar. Our <code>_on_loaded_avatar</code> function will look something like this:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func _on_loaded_avatar(user_id: int, avatar_size: int, avatar_buffer: PoolByteArray) -&gt; void:\n    print(\"Avatar for user: %s\" % user_id)\n    print(\"Size: %s\" % avatar_size)\n\n    # Create the image for loading\n    avatar_image = Image.new()\n    avatar_image.create_from_data(avatar_size, avatar_size, false, Image.FORMAT_RGBA8, avatar_buffer)\n\n    # Optionally resize the image if it is too large\n    if avatar_size &gt; 128:\n        avatar_image.resize(128, 128, Image.INTERPOLATE_LANCZOS)\n\n    # Apply the image to a texture\n    var avatar_texture: ImageTexture = ImageTexture.new()\n    avatar_texture.create_from_image(avatar_image)\n\n    # Set the texture to a Sprite, TextureRect, etc.\n    $Sprite.set_texture(avatar_texture)\n</code></pre> <pre><code>func _on_loaded_avatar(user_id: int, avatar_size: int, avatar_buffer: PackedByteArray) -&gt; void:\n    print(\"Avatar for user: %s\" % user_id)\n    print(\"Size: %s\" % avatar_size)\n\n    # Create the image and texture for loading\n    var avatar_image: Image = Image.create_from_data(avatar_size, avatar_size, false, Image.FORMAT_RGBA8, avatar_buffer)\n\n    # Optionally resize the image if it is too large\n    if avatar_size &gt; 128:\n        avatar_image.resize(128, 128, Image.INTERPOLATE_LANCZOS)\n\n    # Apply the image to a texture\n    var avatar_texture: ImageTexture = ImageTexture.create_from_image(avatar_image)\n\n    # Set the texture to a Sprite, TextureRect, etc.\n    $Sprite.set_texture(avatar_texture)\n</code></pre> <p>Naturally that texture could be applied elsewhere, depending on where you place this function.</p> <p>That covers the basics of getting player avatars.</p>"},{"location":"tutorials/avatars/#request-the-avatar","title":"Request the Avatar","text":""},{"location":"tutorials/avatars/#retrieve-and-create-the-image","title":"Retrieve and Create the Image","text":""},{"location":"tutorials/avatars/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/avatars/#video-tutorials","title":"Video Tutorials","text":"<p>Prefer video tutorials? Feast your eyes and ears!</p> <p>'Getting Your Avatar Picture and Processing It' by FinePointCGI</p> <p>'How Do We Load Our Friends Avatar' by FinePointCGI</p>"},{"location":"tutorials/avatars/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/c-sharp/","title":"Tutorials - C-Sharp","text":"<p>Every so often we get someone who asks how to use GodotSteam with C# so I figured I would write this up. First and foremost, I have never used C# so my understanding of it is prety much null and void.</p> <p>To the point, GodotSteam does not have a C# version currently. I am in the process of adding said builds to our Github Actions list so we can start producing them with every update!</p> <p>Thankfully, for those of you using the GDExtension version of the project, there is a lovely project that will help!  Thanks to LauraWebdev, we have this cool plug-in: GodtoSteam C# Bindings</p> <p>While I am still trying to get up to speed on all this C# business, you can read more about how it works on Github. There are even some excellent pieces of example code!</p>"},{"location":"tutorials/c-sharp/#wheres-the-mono-build","title":"Where's The Mono Build?","text":""},{"location":"tutorials/c-sharp/#workarounds","title":"Workarounds","text":""},{"location":"tutorials/c-sharp/#steammultiplayerpeer","title":"SteamMultiplayerPeer","text":"<p>If you are using SteamMultiplayerPeer for networking you can use a C# wrapper. It's currently not merged but there is a PR. You can put the script anywhere in your Godot project and it will work with the rest of the C# bindings above.</p> <p>The awesome folks at Chickensoft are all about C#, visit them here or at their Discord:</p> <p> Chickensoft Website</p> <p> Chickensoft Discord</p> <p>More often than not, I will refer C# users to one of two wonderful libraries for Steamworks and C#:</p> <p> Facepunch.Steamworks by the makers of Rust and Garry's Mod</p> <p> Steamworks.NET by the super-nice Riley Labrecque</p> <p>I have no idea how you actually integrate these with Godot but some members of our Discord do. I will try reaching out to them at some point for additions to this tutorial.</p>"},{"location":"tutorials/c-sharp/#other-resources","title":"Other Resources","text":""},{"location":"tutorials/exporting_shipping/","title":"Tutorials - Exporting and Shipping","text":"<p>This topic comes up a lot and also trips folks up a lot; so this tutorial is here to help.</p> <p>Exporting and shipping your game with GodotSteam is pretty easy once you get the flow down. This tutorial assumes you are downloading pre-compiled versions of the GodotSteam templates instead of compiling them; however, it will obviously work the same with the ones you compile yourself.</p> <p>To being our export process, first click on the \"Project\" button in the top menu then select \"Export...\" from the drop-down.</p> <p></p> <p>Since the pre-compiles are never debug-release versions, you must make sure that only the release field contains a template and that the debug field is empty. This next step is important and also where people often get stuck:</p> <p></p> <p>If you have the debug field filled in, especially while using the pre-compiled templates, the export process will fail. Also, if you use a non-GodotSteam template here or leave the release field blank as well, you will end up with an executable that crashes like so:</p> <pre><code>Parse Error: The identifier \"Steam\" isn't declared in the current scope.\n</code></pre> <p>Obviously, because the Steamworks API isn't present without a GodotSteam template, the executable will not understand any Steam functions. Also take note that the OSX export screen has a reversed order for the debug and release fields, for some reason:</p> <p></p> <p>On the last export screen, just before the process begins, make sure you turn the debugging option off:</p> <p></p> <p>If you do not, your executable will crash since we are not using debug-release templates. That being said, if you compile the templates yourself and actually create debug-release templates then you can ignore both debug-specific parts above.</p> <p>If you are using the GDNative or GDExtension version of GodotSteam, you will need to use the normal Godot templates either installed throught the normal editor or downloaded from their site. Using the GodotSteam templates with the GDNative or GDExtension version will cause you a lot of issues.</p> <p>Also take note of any additional files Godot exports for you like the godotsteam.dll / libgodotsteam.so / libgodotsteam.dylib because these must also be shipped with your game.</p> <p>If you followed our guide about how to remove Steam from your game without maintaing multiple codebases, you probably don't want the extra files either.  Thankfully AdriaandeJongh shared the information with us and a handy image too:</p> <p>I found that as long as you don't call any methods on the Steam class provided by this plugin, you can actually simply not export those binaries like so...</p> <p></p> <p>While this may work with the plug-ins, you will most likely have to ship the Steam API shared libraries if using the pre-compiles since Steam is always present.  I have not confirmed this yet though.</p> <p>For Windows and Linux, shipping is relatively simple. You just need your game's executable, any accompanying .pck file, and the Steamworks API file.</p> WindowsLinuxMac <p>Use the <code>steam_api.dll</code> for 32-bit or <code>steam_api64.dll</code> for 64-bit.</p> <p>Make sure you use the <code>libsteam_api.so</code> file from the correct folder. I am not sure why Valve did not differentiate, in naming, between 32 and 64-bit files for Linux, but they do not.</p> <p>The Steamworks redistributables are already included in your app directory so there's not thing else to add.</p> <p>Your exported game's directory should look something like this:</p> <p></p> <p>At this point, you are ready to upload your game to Steam!  You can read more about that process on the offical Steamworks SDK documentation.  And, as usual, if you run into any issues, please contact us on the project's GitHub issues page or the Discord server.</p> <p>Let's also touch on some other small things next.</p>"},{"location":"tutorials/exporting_shipping/#exporting-for-modules-pre-compiles","title":"Exporting for Modules / Pre-Compiles","text":""},{"location":"tutorials/exporting_shipping/#exporting-for-gdnative-gdextension","title":"Exporting for GDNative / GDExtension","text":""},{"location":"tutorials/exporting_shipping/#exporting-without-steam","title":"Exporting Without Steam","text":""},{"location":"tutorials/exporting_shipping/#shipping","title":"Shipping","text":""},{"location":"tutorials/exporting_shipping/#no-steam_appidtxt-needed","title":"No steam_appid.txt Needed","text":"<p>You will notice that the <code>steam_appid.txt</code> is not included. This file is only used for running your game outside of the Steam client so that it knows which game you are playing. When run through the Steam client, Steam is aware of what game you are playing, thus it is not necessary. Valve recommends that you do not ship this file with your game, as it can potentially cause issues.</p>"},{"location":"tutorials/exporting_shipping/#macos-differences","title":"macOS Differences","text":"<p>There are a few extra steps beyond these since macOS games / apps are contained in an <code>.app</code> folder. Instead of repeating it here, you can read more about the process in the Mac Exporting tutorial.</p>"},{"location":"tutorials/exporting_shipping/#gdnative-gdextension-caveats","title":"GDNative / GDExtension Caveats","text":"<p>As mentioned earlier, you will also need to include the godotsteam.dll / libgodotsteam.so / libgodotsteam.dylib file that was extracted during the exporting process.</p> <p>As the title mentions, this step is completely optional. Personally, I do not import template zips when exporting games; however, I figured it was worth covering for those of you who do. And for those who do, there is now a separate template zip available in the GodotSteam release section which has all the operating system templates in one package.</p> <p>Just like installing the official template zips, you want to click on the \"Editor\" option at the top then select \"Manage Export Templates...\" in the drop-down. Like so:</p> <p></p> <p>On the next screen you will want to click on the \"Install From File\" button and find your godotsteam-xxx-templates.tpz file. The editor will then install these templates so they will be available during export.</p> <p></p> <p>Despite \"installing\" the templates, you will still have to select them in the custom template fields during export; which is why this step is optional.</p>"},{"location":"tutorials/exporting_shipping/#template-importing-optional","title":"Template Importing (Optional)","text":""},{"location":"tutorials/exporting_shipping/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/exporting_shipping/#video-tutorials","title":"Video Tutorials","text":"<p>Prefer video tutorials? Feast your eyes and ears!</p> <p>  'Godot + Steam tutorial | Export' by BluePhoenixGames</p> <p>  'How Do You Export Your Game' by FinePointCGI</p>"},{"location":"tutorials/external/","title":"External Resources","text":"<p>We have quite a few tutorials and many more in the works but the more the merrier! Game development is hard enough so we have a list of all external resources we know about that might help you understand, or work with, Steam easier.</p> <p>  'Godot + Steam Tutorial' by BluePhoenixGames </p> <p>  'Godot Tutorial: GodotSteam Lobby System' by DawnsCrow Games</p> <p>  'Integrating Steamworks' by FinePointCGI </p> <p>  'GodotSteam Series' by Gwizz</p> <p>  'GodotSteam and SteamMultiplayerPeer' by Michael Macha</p> <p>  'Godot + Steam | How To Upload To Steam + Add Achievements' by BluePhoenixGames</p> <p>  'GodotSteamHL' by JDare </p> <p>  'SteamMultiplayer GDExtension' by ScriptsEngineer </p> <p>  'Integrating Steam Input with Godot 4' by Furd</p> <p>  'GodotSteam: How To Upload and Download UGC' by Forgotten Dream Games</p> <p>  'Godot Auto Export' by Mr.Eliptik</p> <p>  'GodotSteam and SteamMultiplayerPeer' by Michael Macha</p> <p>  Valve's Official Steamworks SDK Site</p> <p>  'Debugging the Steamworks API' by Valve </p> <p>  'How to debug Windows games on Steam Deck' by Valve </p> <p>  'Overview of debugging tools' by Godot </p> <p>  'Steam Upload GUI' by RPicster </p> <p>  'Godot Steam Devkit Notifier' by tuc0w</p> <p>  'Godot4 - Deploy To SteamOS' by taw.moe</p> <p>  'GodotSteam C# Bindings' by taw.moe</p> <p>  ChickenSoft C# Tools </p> <p>  'Godot-Steam-API' by SamsFace</p> <p>  'EIRTeam.Steamworks' by EIRTeam</p> <p>  'Godot Steam Audio' by stechyo</p> <p>If you make tutorials or guides related to GodotSteam, or just know of some we missed, please feel free to send them in by e-mail to tutorials@godotsteam.com or just submit a pull-request to our documentation repo!</p>"},{"location":"tutorials/external/#video-tutorials","title":"Video Tutorials","text":""},{"location":"tutorials/external/#godot-networking-steam","title":"Godot Networking + Steam","text":""},{"location":"tutorials/external/#text-tutorials","title":"Text Tutorials","text":""},{"location":"tutorials/external/#debugging-resources","title":"Debugging Resources","text":""},{"location":"tutorials/external/#steam-related-godot-tools","title":"Steam-related Godot Tools","text":""},{"location":"tutorials/external/#c-sharp-tools","title":"C-Sharp Tools","text":""},{"location":"tutorials/external/#other-steam-apis-for-godot","title":"Other Steam APIs For Godot","text":""},{"location":"tutorials/external/#know-of-more","title":"Know Of More?","text":""},{"location":"tutorials/friends_lobbies/","title":"Tutorials - Friends' Lobbies","text":"<p>In this quick tutorial we will cover how to get a dictionary of any lobbies belonging to friends that are visible to the user. This was created as it's a pretty common feature for multiplayer games.</p> Relevant GodotSteam classes and functions <ul> <li>Friends class<ul> <li>getFriendByIndex</li> <li>getFriendCount</li> <li>getFriendGamePlayed</li> </ul> </li> <li>Matchmaking class<ul> <li>createLobby</li> </ul> </li> <li>Utils class<ul> <li>getAppID</li> </ul> </li> </ul> <p>We will break down the different Steam functions to call first before looking at the code samples.</p> <pre><code>var number_of_friends: int = Steam.getFriendCount(Steam.FRIEND_FLAG_IMMEDIATE)\n</code></pre> <p>This must be run before <code>getFriendByIndex()</code> according to the Steamworks documentation. We'll be using this to iterate over each friend in our friends list.</p> <pre><code>var steam_id: int = Steam.getFriendByIndex(index, Steam.FRIEND_FLAG_IMMEDIATE)\n</code></pre> <p>Inside of the loop we'll call <code>getFriendByIndex()</code> to get the Steam ID of our friend at this index.</p> <p>Notes</p> <p>You must use the same friend flag as the one used when calling <code>getFriendCount()</code>. Refer to the FriendFlags enum for valid options and the Steamworks documentation on the friend flags for what they mean.</p> <pre><code>var game_info: Dictionary = Steam.getFriendGamePlayed(steam_id)\n</code></pre> <p>With our friend's Steam ID we can now get information about the game our friend may or may not be playing.</p> <p>This dictionary will be empty if the friend is offline or not playing a game. Otherwise, here are the fields and possible values inside this dictionary:</p> <ul> <li>id: int<ul> <li>The app ID of the game they are playing.</li> </ul> </li> <li>lobby: int or String<ul> <li>If the friend is in a lobby visible to this user, it will be an int of the Lobby ID</li> <li>Otherwise, it will be a String equal to: <code>\"No valid lobby\"</code></li> </ul> </li> <li>ip: String</li> <li>game_port: int</li> <li>query_port: int<ul> <li>Depends on the lobby settings, but <code>ip</code>, <code>game_port</code>, and <code>query_port</code> will probably all just be zeros.</li> </ul> </li> </ul> <pre><code>func get_lobbies_with_friends() -&gt; Dictionary:\n    var results: Dictionary = {}\n\n    for i in range(0, Steam.getFriendCount()):\n        var steam_id: int = Steam.getFriendByIndex(i, Steam.FRIEND_FLAG_IMMEDIATE)\n        var game_info: Dictionary = Steam.getFriendGamePlayed(steam_id)\n\n        if game_info.empty():\n            # This friend is not playing a game\n            continue\n        else:\n            # They are playing a game, check if it's the same game as ours\n            var app_id: int = game_info['id']\n            var lobby = game_info['lobby']\n\n            if app_id != Steam.getAppID() or lobby is String:\n                # Either not in this game, or not in a lobby\n                continue\n\n            if not results.has(lobby):\n                results[lobby] = []\n\n            results[lobby].append(steam_id)\n\n    return results\n</code></pre> <p>If you would rather get back a dictionary of <code>friend_id -&gt; lobby_id</code> you can instead use:</p> <pre><code>func get_friends_in_lobbies() -&gt; Dictionary:\n    var results: Dictionary = {}\n\n    for i in range(0, Steam.getFriendCount()):\n        var steam_id: int = Steam.getFriendByIndex(i, Steam.FRIEND_FLAG_IMMEDIATE)\n        var game_info: Dictionary = Steam.getFriendGamePlayed(steam_id)\n\n        if game_info.empty():\n            # This friend is not playing a game\n            continue\n        else:\n            # They are playing a game, check if it's the same game as ours\n            var app_id: int = game_info['id']\n            var lobby = game_info['lobby']\n\n            if app_id != Steam.getAppID() or lobby is String:\n                # Either not in this game, or not in a lobby\n                continue\n\n            results[steam_id] = lobby\n\n    return results\n</code></pre> <p>From here you can create your UI however you like, and simply call <code>joinLobby(lobby_id)</code> when the user has made a selection.</p> <p>In the likely case that you are not running <code>get_lobbies_with_friends()</code> every frame, there's a small chance a user might click on a lobby a friend has since left, or worse, a lobby that no longer exists.</p> <p>This is a little check you can do before joining the lobby:</p> <pre><code># Check if a friend is in a lobby\nfunc is_a_friend_still_in_lobby(steam_id: int, lobby_id: int) -&gt; bool:\n    var game_info: Dictionary = Steam.getFriendGamePlayed(steam_id)\n\n    if game_info.empty():\n        return false\n\n    # They are in a game\n    var app_id: int = game_info.id\n    var lobby = game_info.lobby\n\n    # Return true if they are in the same game and have the same lobby_id\n    return app_id == Steam.getAppID() and lobby is int and lobby == lobby_id\n</code></pre> <p>If you don't see any lobbies while testing, make sure to check the flags for how the lobby was created.</p> <p>For instance, you won't be able to see a lobby with this flag:</p> <pre><code>Steam.create_lobby(Steam.LOBBY_TYPE_INVISIBLE, 8)\n</code></pre> <p>If the lobby is configured in such a way that it's invisible to you, or at max capacity, then Steam won't provide a lobby ID.</p>"},{"location":"tutorials/friends_lobbies/#functions-explained","title":"Functions Explained","text":""},{"location":"tutorials/friends_lobbies/#putting-it-all-together","title":"Putting It All Together","text":""},{"location":"tutorials/friends_lobbies/#checking-if-a-friend-is-still-in-a-lobby","title":"Checking if a Friend Is Still in a Lobby","text":""},{"location":"tutorials/friends_lobbies/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/initializing/","title":"Tutorials - Initializing Steam","text":"<p>In this tutorial, we will cover the basic initialization of Steamworks in your game; as well as getting callbacks globally. Check out the common issues tutorial if you have issues getting things to work too.</p> <p>Please note, this tutorial is only valid for the module and GDExtension versions of GodotSteam; the GDNative version will already have these functions present in the <code>steam.gd</code> autoload script.</p> Relevant GodotSteam classes and functions <ul> <li>Main class<ul> <li>steamInit()</li> <li>steamInitEx()</li> <li>run_callbacks()</li> </ul> </li> <li>Apps class<ul> <li>isSubscribed()</li> </ul> </li> <li>Friends class<ul> <li>getPersonaName()</li> </ul> </li> <li>User class<ul> <li>getSteamID()</li> <li>loggedOn()</li> </ul> </li> <li>Utils class<ul> <li>isSteamRunningOnSteamDeck()</li> </ul> </li> </ul> <p>Before we go any further, it is recommended that you enable logging in your project if you have not done so. This will help both you, and us, debug any issues you might run into down the road.</p> <p>Of course, if you have a custom logging system, don't worry about this.</p> Godot 2.x, 3.xGodot 4.x <p>To enable logging in the Godot editor, go to: Projects &gt; Project Settings &gt; Logging &gt; File Logging and check Enable File Logging. This will start placing logs in your project's user data folder. Where are these, you might ask?  Check out the official Godot Engine documentation to find the locations.</p> <p></p> <p>To enable logging in the Godot editor, go to: Projects &gt; Project Settings &gt; Debug &gt; File Logging and check Enable File Logging. This will start placing logs in your project's user data folder. Where are these, you might ask?  Check out the official Godot Engine documentation to find the locations.</p> <p></p> <p>When the game is run through the Steam client, it already knows which game you are playing. However, during development and testing, you must supply a valid app ID somehow. Typically, if you do not already have an app ID, you can use app ID 480 which is Valve's SpaceWar example game.</p> <p>You can set the app ID in one of three ways, depending on what is easiest for you:</p>"},{"location":"tutorials/initializing/#preparation","title":"Preparation","text":""},{"location":"tutorials/initializing/#steam-app-id","title":"Steam App ID","text":""},{"location":"tutorials/initializing/#method-1-steam_appidtxt","title":"Method 1: steam_appid.txt","text":"<p>Create a steam_appid.txt file and with only the app ID as the text. This file must be where ever your regular Godot or GodotSteam-enabled editor is located. Though, in the case of plug-ins, sometimes it must be in the root of your project to work correctly.</p> <p>Also, when shipping your game to Steam, do not include this file as it is not needed. Granted it won't hurt anything if you do.</p>"},{"location":"tutorials/initializing/#method-2-pass-it-to-initialization","title":"Method 2: Pass It To Initialization","text":"<p>You can pass the app ID to either <code>steamInit</code> or <code>steamInitEx</code> to set it during initialization. This will be the second argument passed; the first being whether you want the local user's statistics and achievements to be pulled during the initialization.  For example:</p> <pre><code>var initialize_response: Dictionary = steamInitEx( true, 480 )\nprint(\"Did Steam initialize?: %s \" % initialize_response)\n</code></pre> <p>If you use this method, you must pass a true or false as for the first argument.</p> <p>Notes</p> <p>This functionality does not exist in GDNative. It only exists in GodotSteam 3.22 and up for Godot 3.x and GodotSteam 4.5 and up for Godot 4.x and GDExtension.</p>"},{"location":"tutorials/initializing/#method-3-set-environment-variables","title":"Method 3: Set Environment Variables","text":"<p>You can set two environment variables in an autoload GDscript or the first GDscript to run; preferably the script where you run the Steam initialization function and preferably in the <code>_init()</code> function. For example:</p> <pre><code>func _init() -&gt; void:\n    # Set your game's Steam app ID here\n    OS.set_environment(\"SteamAppId\", str(480))\n    OS.set_environment(\"SteamGameId\", str(480))\n</code></pre> <p>Thanks to user B0TLANNER for providing this method.</p> <p>In my personal projects, I usually create an auto-load GDscript called <code>global.gd</code> which is added as a singleton.</p> <p>I then create a function called <code>initialize_steam()</code> and add the code below. This is then called from the <code>_ready()</code> function in my <code>global.gd</code>:</p> <pre><code>func _ready() -&gt; void:\n    initialize_steam()\n\n\nfunc initialize_steam() -&gt; void:\n    var initialize_response: Dictionary = Steam.steamInitEx()\n    print(\"Did Steam initialize?: %s \" % initialize_response)\n</code></pre> <p>By default, <code>steamInitEx()</code> will query Steamworks for the local user's current statistics and send this data back as a callback (signal). You can pass a boolean (false) to the function to prevent this behavior: <code>steamInitEx(false)</code>.</p> <p><code>steamInitEx()</code> will always send back a dictionary with two keys / values:</p> <ul> <li>verbal - The verbose, text version of status</li> <li>status<ul> <li>0 - Successfully initialized</li> <li>1 - Some other failure</li> <li>2 - We cannot connect to Steam, steam probably isn't running</li> <li>3 - Steam client appears to be out of date</li> </ul> </li> </ul> <p>The returned dictionary from <code>steamInitEx()</code> can be printed and ignored. However, there are certain conditions where you might not know why the game crashed at boot or does something unexpected; especially in development. For these cases we will check if Steamworks was actually initialized and to stop the game if anything is amiss, we do this:</p> <pre><code>func initialize_steam() -&gt; void:\n    var initialize_response: Dictionary = Steam.steamInitEx()\n    print(\"Did Steam initialize?: %s\" % initialize_response)\n\n    if initialize_response['status'] &gt; 0:\n        print(\"Failed to initialize Steam, shutting down: %s\" % initialize_response)\n        get_tree().quit()\n</code></pre> <p>This code will obviously shut down the game if Steam does not initialize and returns a status of anything except 0.  You may just want to capture the failure data and continue on, though the Steamworks functionality won't quite work.</p> <p>Most times, in development, getting a failure will probably be caused by a missing API file (steam_api.dll, libsteam_api.so, libsteam_api.dylib) or not setting the game's app ID by one of the methods mentioned earlier.</p> <p>In any case, the intialization functions should give you a pretty good idea of why it failed. If you still cannot figure it out, please contact us for assistance!</p> <p>There are a ton of functions you can call just after initialization to gather more data about your user; everything from location, to language used, to avatars, etc. We will just cover some basic things that are commonly used:</p> <pre><code>var is_on_steam_deck: bool = Steam.isSteamRunningOnSteamDeck()\nvar is_online: bool = Steam.loggedOn()\nvar is_owned: bool = Steam.isSubscribed()\nvar steam_id: int = Steam.getSteamID()\nvar steam_username: String = Steam.getPersonaName()\n</code></pre> <p>This will check if Steam is online, if the app is running on the Steam Deck, get the current user's Steam ID64, and check if the current user owns the game. You can also have the game turn itself off if the current user does not own the game by simply doing this:</p> <pre><code>if is_owned == false:\n    print(\"User does not own this game\")\n    get_tree().quit()\n</code></pre> <p>Notes</p> <p>Shutting the game down with this is_owned behavior might cause problems from people using Family Share, Free Weekends, or other methods of trying the game out. There are other functions to check for those conditions which you might want to consider.</p> <p>There are other things you may want to do during a boot-up process after Steamworks is initialized, like getting current achievements or statistics, but we'll cover that in another tutorial.</p> <p>A very important piece of Steamworks is getting callbacks from Steam itself in response to different function. To receive callbacks you will need to have the <code>run_callbacks()</code> function running somewhere; preferably every frame or so.  There are two methods available:</p>"},{"location":"tutorials/initializing/#initialize-steam","title":"Initialize Steam","text":""},{"location":"tutorials/initializing/#checking-for-errors","title":"Checking For Errors","text":""},{"location":"tutorials/initializing/#getting-more-data","title":"Getting More Data","text":""},{"location":"tutorials/initializing/#callbacks","title":"Callbacks","text":""},{"location":"tutorials/initializing/#method-1-add-it-to-_process","title":"Method 1: Add It To _process()","text":"<p>The standard method has been adding the <code>Steam.run_callbacks()</code> function to the <code>_process()</code> function like so:</p> <pre><code>func _process(_delta: float) -&gt; void:\n    Steam.run_callbacks()\n</code></pre> <p>I highly suggest, much like the initialization process, you put this <code>_process()</code> function with the <code>Steam.run_callbacks()</code> in a global (singleton) script so it is always checking for callbacks. Though, if you want, you can put it in any <code>_process()</code> function in any given script that might be using callback information.</p>"},{"location":"tutorials/initializing/#method-2-pass-it-to-initialization_1","title":"Method 2: Pass It To Initialization","text":"<p>You can pass true as the third argument to either initialization function and have GodotSteam check for callbacks internally. Like so:</p> <p><pre><code>var initialize_response: Dictionary = steamInitEx(false, 480, true)\nprint(\"Did Steam initialize?: %s \" % initialize_response)\n</code></pre> However, you must pass the first two arguments which are whether you want the local user's statistics and achievements pulled during initialization and the game's app ID.</p> <p>Notes</p> <p>The argument does not exist in the GDExtension version currently. This only works in GodotSteam 3.22 or newer for Godot 3.x and in GodotSteam 4.5 or newer for Godot 4.x.</p> <p>Some users have noticed that if their <code>run_callbacks</code> sits in a script or node that can be paused, said callbacks will fail to trigger. Make sure this function resides in a script or node that is always processing!</p> <p>Putting it together should give us something like this:</p> Without internal app ID and callbacksWith internal app ID and callbacks <pre><code>extends Node\n\n# Steam variables\nvar is_on_steam_deck: bool = false\nvar is_online: bool = false\nvar is_owned: bool = false\nvar steam_app_id: int = 480\nvar steam_id: int = 0\nvar steam_username: String = \"\"\n\n\nfunc _init() -&gt; void:\n    # Set your game's Steam app ID here\n    OS.set_environment(\"SteamAppId\", str(steam_app_id))\n    OS.set_environment(\"SteamGameId\", str(steam_app_id))\n\n\nfunc _ready() -&gt; void:\n    initialize_steam()\n\n\nfunc _process(_delta: float) -&gt; void:\n    Steam.run_callbacks()\n\n\nfunc initialize_steam() -&gt; void:\n    var initialize_response: Dictionary = Steam.steamInitEx()\n    print(\"Did Steam initialize?: %s\" % initialize_response)\n\n    if initialize_response['status'] &gt; 0:\n        print(\"Failed to initialize Steam. Shutting down. %s\" % initialize_response)\n        get_tree().quit()\n\n    # Gather additional data\n    is_on_steam_deck = Steam.isSteamRunningOnSteamDeck()\n    is_online = Steam.loggedOn()\n    is_owned = Steam.isSubscribed()\n    steam_id = Steam.getSteamID()\n    steam_username = Steam.getPersonaName()\n\n    # Check if account owns the game\n    if is_owned == false:\n        print(\"User does not own this game\")\n        get_tree().quit()\n</code></pre> <pre><code>extends Node\n\n# Steam variables\nvar is_on_steam_deck: bool = false\nvar is_online: bool = false\nvar is_owned: bool = false\nvar steam_app_id: int = 480\nvar steam_id: int = 0\nvar steam_username: String = \"\"\n\n\nfunc _ready() -&gt; void:\n    initialize_steam()\n\n\nfunc initialize_steam() -&gt; void:\n    var initialize_response: Dictionary = Steam.steamInitEx(false, steam_app_id, true)\n    print(\"Did Steam initialize?: %s\" % initialize_response)\n\n    if initialize_response['status'] &gt; 0:\n        print(\"Failed to initialize Steam. Shutting down. %s\" % initialize_response)\n        get_tree().quit()\n\n    # Gather additional data\n    is_on_steam_deck = Steam.isSteamRunningOnSteamDeck()\n    is_online = Steam.loggedOn()\n    is_owned = Steam.isSubscribed()\n    steam_id = Steam.getSteamID()\n    steam_username = Steam.getPersonaName()\n\n    # Check if account owns the game\n    if is_owned == false:\n        print(\"User does not own this game\")\n        get_tree().quit()\n</code></pre> <p>This covers the initialization and basic set-up.</p>"},{"location":"tutorials/initializing/#altogether-now","title":"Altogether Now","text":""},{"location":"tutorials/initializing/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/initializing/#video-tutorials","title":"Video Tutorials","text":"<p>Prefer video tutorials? Feast your eyes and ears!</p> <p>  'Godot + Steam tutorial' by BluePhoenixGames</p> <p>  'Integrating Steamworks' by FinePointCGI</p> <p>  'Godot 4 Steam Integration' by Gwizz</p>"},{"location":"tutorials/initializing/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/inputs/","title":"Tutorials - Steamworks Inputs","text":"<p>This is a placeholder for the upcoming Inputs tutorial.</p>"},{"location":"tutorials/leaderboards/","title":"Tutorials - Leaderboards","text":"<p>This tutorial will cover setting up leaderboards for your games. I will add more to this tutorial at a later date with other functions but this should cover all the basics for working with leaderboards.</p> Relevant GodotSteam classes and functions <ul> <li>User Stats class<ul> <li>findLeaderboard()</li> <li>uploadLeaderboardScore()</li> <li>setLeaderboardDetailsMax()</li> <li>downloadLeaderboardEntries()</li> <li>downloadLeaderboardEntriesForUsers()</li> </ul> </li> </ul> <p>First, let's get our signals set up.</p> Godot 2.x, 3.xGodot 4.x <pre><code>Steam.connect(\"leaderboard_find_result\", self, \"_on_leaderboard_find_result\")\nSteam.connect(\"leaderboard_score_uploaded\", self, \"_on_leaderboard_score_uploaded\")\nSteam.connect(\"leaderboard_scores_downloaded\", self, \"_on_leaderboard_scores_downloaded\")\n</code></pre> <pre><code>Steam.leaderboard_find_result.connect(_on_leaderboard_find_result)\nSteam.leaderboard_score_uploaded.connect(_on_leaderboard_score_uploaded)\nSteam.leaderboard_scores_downloaded.connect(_on_leaderboard_scores_downloaded)\n</code></pre> <p>We'll go over each signal and related function in order. First, you'll need to pass your leaderboard's Steamworks back-end name to the <code>findLeaderboard()</code> function like so:</p> <pre><code>Steam.findLeaderboard( your_leaderboard_name )\n</code></pre> <p>Once Steam finds your leaderboard it will pass back the handle to the <code>leaderboard_find_result</code> callback. The <code>_on_leaderboard_find_result()</code> function that it is connected to it should look something like this:</p> <pre><code>func _on_leaderboard_find_result(handle: int, found: int) -&gt; void:\n    if found == 1:\n        leaderboard_handle = handle\n        print(\"Leaderboard handle found: %s\" % leaderboard_handle)\n    else:\n        print(\"No handle was found\")\n</code></pre> <p>Once you have this handle you can use all the additional functions. Please note you do not need to save the leaderboard handle since it is stored internally. However, you will only be able to work with one leaderboard at a time unless you store them locally in a variable. I would keep a dictionary of handles locally like:</p> <pre><code>var leaderboard_handles: Dictionary = {\n    \"top_score\": handle1,\n    \"most_kills\": handle2,\n    \"most_games\": handlde3\n    }\n</code></pre> <p>This way you can call whatever handle you need when updating leaderboards quickly. Otherwise you have to query each leaderboard again with <code>findLeaderboard()</code> then wait for the callback then upload the new score. If you aren't updating leaderboards frequently or that many of them, then using the internally stored handle will probably work fine.</p> <p>Before we can download scores, we need to upload them. The function itself is pretty simple:</p> <pre><code>Steam.uploadLeaderboardScore( score, keep_best, details, handle )\n</code></pre> <p>The first argument is, obviously, the score. The second is if you want the score to update regardless of whether it is better than the current score for the user. The third are details which must be integers; they essentially can be anything but here is what Valve says about it.  The fourth is the leaderboard handle we are updating. You do not have to pass the handle though, if you want to use the internally stored one.</p> <p>Once you pass a score to Steam, you should receive a callback from <code>leaderboard_score_uploaded</code>. This will trigger our <code>_on_leaderboard_score_uploaded()</code> function:</p> <pre><code>func _on_leaderboard_score_uploaded(success: int, this_handle: int, this_score: Dictionary) -&gt; void:\n    if success == 1:\n        print(\"Successfully uploaded scores!\")\n        # Add additional logic to use other variables passed back\n    else:\n        print(\"Failed to upload scores!\")\n</code></pre> <p>For the most part you are just looking for a success of 1 to tell that it worked. However, you may with to use the additional variables passed back by the signal for logic in your game. They are contained in the dictionary called <code>this_score</code> which contains these keys:</p> <ul> <li>score: the new score as it stands</li> <li>score_changed: if the score was changed (0 if false, 1 if true)</li> <li>new_rank: the new global rank of this player</li> <li>prev_rank: the previous rank of this player</li> </ul>"},{"location":"tutorials/leaderboards/#set-up","title":"Set Up","text":""},{"location":"tutorials/leaderboards/#uploading-scores","title":"Uploading Scores","text":""},{"location":"tutorials/leaderboards/#passing-extra-details","title":"Passing Extra Details","text":"<p>If you want to pass extra details, here are some neat hints from sepTN:</p> <p>You can add small data as detail, for example embedding the character name (as a string) into that leaderboard entry. If you try to put detail that has a bigger size than possible, it will simply ignore it.  To retrieve it, you need to process it again because Steam will spit out arrays (PackedInt32Array).</p> <p>Here is some code that was shared:</p> Godot 2.x / 3.xGodot 4.x <pre><code># Godot 2 and 3 have no equivalent for to_int32_array I am aware of. Any corrections welcome!\n#\nSteam.uploadLeaderboardScore(score, keep_best, var2bytes(details), handle)\n</code></pre> <pre><code>Steam.uploadLeaderboardScore(score, keep_best, var_to_bytes(details).to_int32_array(), handle)\n</code></pre> <p>When you download these scores and need to get our score details back to something readable, make sure you reverse this with <code>bytes_to_var()</code> or <code>bytes2var()</code> on Godot 4 and Godot 3 respectively.</p>"},{"location":"tutorials/leaderboards/#downloading-scores","title":"Downloading Scores","text":""},{"location":"tutorials/leaderboards/#setting-max-details-or-not","title":"Setting Max Details Or Not","text":"<p>Naturally you'll want to display leaderboard scores to the player. But before we pull any leaderboard entries, we need to set the maximum amount of details each one contains by setting the <code>setLeaderboardDetailsMax()</code> function up:</p> <p><pre><code>var details_max: int = Steam.setLeaderboardDetailsMax( value )\nprint(\"Max details: %s\" % details_max)\n</code></pre> In GodotSteam versions 4.6 or older, by default, the value is set to 0 but you may want to change it to match the number of details you upload with scores from the previous section. If you do not save any details with the scores you can safely ignore this part and move on to just requesting leaderboard entries.</p> <p>In GodotSteam 4.6.1 and higher, the default value for max leaderboard details is 256 or the Steam maximum. This change makes it so you don't have to call <code>setLeaderboardDetailsMax()</code> first anymore; only if you want to change the max or turn off details.</p>"},{"location":"tutorials/leaderboards/#getting-scores","title":"Getting Scores","text":"<p>In most cases you'll want to use <code>downloadLeaderboardEntries()</code>, but you can also use <code>downloadLeaderboardEntriesForUsers()</code> by passing an array of users' Steam IDs to it. Both will respond with the same callback, but <code>downloadLeaderboardEntriesForUsers()</code> does not allow as much control over what you can request:</p> <pre><code>Steam.downloadLeaderboardEntries( 1, 10, Steam.LEADERBOARD_DATA_REQUEST_GLOBAL, leaderboard_handle )\n\nSteam.downloadLeaderboardEntriesForUsers( user_array, leaderboard_handle )\n</code></pre> <p>Just like uploading, downloading scores does not require a leaderboard handle to be included if you are using the internally stored one. You will noticed, as I mentioned above, that <code>downloadLeaderboardEntriesForUsers()</code> only takes an array of users' Steam IDs as it's other argument whereas <code>downloadLeaderboardEntries()</code> has quite a few others; which we will cover right now.</p> <p>The first argument the index of entries you are starting with; this is usually 1 for your first request. The second argument is the last index to retrieve; there isn't a listed cap to this number but make it something you can display easily like 10 or so. The third argument is the type of data request; you can read more details about it in the SDK documentation. For a quick overview:</p> Leaderboard Data Request Enums Values Descriptions LEADERBOARD_DATA_REQUEST_GLOBAL 0 Used for a sequential range by leaderboard rank. LEADERBOARD_DATA_REQUEST_GLOBAL_AROUND_USER 1 Used to get entries relative to the user's entry. You may want to use negatives for the start to get entries before the user's. LEADERBOARD_DATA_REQUEST_FRIENDS 2 Used to get all entries for friends for the current user. Start and end arguments are ignored. LEADERBOARD_DATA_REQUEST_USERS 3 Used internally by Steam, do not use this. <p>After you request leaderboard entries, you should receive a <code>leaderboard_scores_downloaded</code> callback which will trigger our <code>_on_leaderboard_scores_downloaded()</code> function. That function should look similar to this:</p> <pre><code>func _on_leaderboard_scores_downloaded(message: String, this_leaderboard_handle: int, result: Array) -&gt; void:\n    print(\"Scores downloaded message: %s\" % message)\n\n    # Save this for later leaderboard interactions, if you want\n    var leaderboard_handle: int = this_leaderboard_handle\n\n    # Add logic to display results\n    for this_result in result:\n        # Use each entry that is returned\n</code></pre> <p>The message is just a basic message to inform you to the status the download; whether successful or not and why. The second piece sent back are the results as an array. Each entry in the array is actually a dictionary like so:</p> <ul> <li>score: this user's score</li> <li>steam_id: this user's Steam ID; you can use this to get their avatar, name, etc.</li> <li>global_rank: obviously their global ranking for this leaderboard</li> <li>ugc_handle: handle for any UGC that is attached to this entry</li> <li>details: any details you stored with this entry for later use</li> </ul> <p>A user in our Discord noted that sometimes <code>downloadLeaderboardEntriesForUsers()</code> would trigger a callback but have zero entries. Oddly, they reported that creating a second leaderboard then deleting the first one would fix this.  While I don't understand why this would be the case, in the event you come across this, perhaps try this solution!</p>"},{"location":"tutorials/leaderboards/#possible-oddities","title":"Possible Oddities","text":""},{"location":"tutorials/leaderboards/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/leaderboards/#video-tutorials","title":"Video Tutorials","text":"<p>Prefer video tutorials? Feast your eyes and ears!</p> <p>  'How To Build Leaderboards Out' by FinePointCGI</p> <p>  'Godot 4 Steam Leaderboards' by Gwizz</p>"},{"location":"tutorials/leaderboards/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/lobbies/","title":"Tutorials - Lobbies","text":"<p>One of the more requested tutorials is multiplayer lobbies and P2P networking through Steam; this tutorial specifically covers the lobby portion and our P2P tutorial covers the other half. Please note, only use this as a starting point.</p> <p>I'd also like to suggest you check out the Additional Resources section of this tutorial before continuing on.</p> Relevant GodotSteam classes and functions <ul> <li>Matchmaking class<ul> <li>addRequestLobbyListFilterSlotsAvailable()</li> <li>addRequestLobbyListNearValueFilter()</li> <li>addRequestLobbyListNumericalFilter()</li> <li>addRequestLobbyListResultCountFilter()</li> <li>addRequestLobbyListStringFilter()</li> <li>createLobby()</li> <li>getLobbyData()</li> <li>getLobbyMemberByIndex()</li> <li>getNumLobbyMembers()</li> <li>joinLobby()</li> <li>leaveLobby()</li> <li>requestLobbyList()</li> <li>sendLobbyChatMsg()</li> <li>setLobbyData()</li> <li>setLobbyJoinable()</li> </ul> </li> <li>Networking class<ul> <li>allowP2PPacketRelay()</li> <li>closeP2PSessionWithUser()</li> </ul> </li> <li>Friends class<ul> <li>getFriendPersonaName()</li> </ul> </li> </ul> <p>First let's set up some variables to fill in later:</p> <pre><code>const PACKET_READ_LIMIT: int = 32\n\nvar lobby_data\nvar lobby_id: int = 0\nvar lobby_members: Array = []\nvar lobby_members_max: int = 10\nvar lobby_vote_kick: bool = false\nvar steam_id: int = 0\nvar steam_username: String = \"\"\n</code></pre> <p>Your Steam ID and username may actually be in a different GDScript, especially if you use the <code>global.gd</code> the way I do mentioned in the initialization tutorial. The most important will be the <code>lobby_id</code>, which obviously houses the lobby's ID, and <code>lobby_members</code>, which will be an array of dictionaries of lobby members and their Steam ID 64's.</p> <p>Next we'll want to set up the signal connections for Steamworks and a command line checker like so:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func _ready() -&gt; void:\n    Steam.connect(\"join_requested\", self, \"_on_lobby_join_requested\")\n    Steam.connect(\"lobby_chat_update\", self, \"_on_lobby_chat_update\")\n    Steam.connect(\"lobby_created\", self, \"_on_lobby_created\")\n    Steam.connect(\"lobby_data_update\", self, \"_on_lobby_data_update\")\n    Steam.connect(\"lobby_invite\", self, \"_on_lobby_invite\")\n    Steam.connect(\"lobby_joined\", self, \"_on_lobby_joined\")\n    Steam.connect(\"lobby_match_list\", self, \"_on_lobby_match_list\")\n    Steam.connect(\"lobby_message\", self, \"_on_lobby_message\")\n    Steam.connect(\"persona_state_change\", self, \"_on_persona_change\")\n\n    # Check for command line arguments\n    check_command_line()\n</code></pre> <pre><code>func _ready() -&gt; void:\n    Steam.join_requested.connect(_on_lobby_join_requested)\n    Steam.lobby_chat_update.connect(_on_lobby_chat_update)\n    Steam.lobby_created.connect(_on_lobby_created)\n    Steam.lobby_data_update.connect(_on_lobby_data_update)\n    Steam.lobby_invite.connect(_on_lobby_invite)\n    Steam.lobby_joined.connect(_on_lobby_joined)\n    Steam.lobby_match_list.connect(_on_lobby_match_list)\n    Steam.lobby_message.connect(_on_lobby_message)\n    Steam.persona_state_change.connect(_on_persona_change)\n\n    # Check for command line arguments\n    check_command_line()\n</code></pre> <p>We will get into each of these below. You noticed we added a check for command line arguments. Here is how our basic function will look:</p> <pre><code>func check_command_line() -&gt; void:\n    var these_arguments: Array = OS.get_cmdline_args()\n\n    # There are arguments to process\n    if these_arguments.size() &gt; 0:\n\n        # A Steam connection argument exists\n        if these_arguments[0] == \"+connect_lobby\":\n\n            # Lobby invite exists so try to connect to it\n            if int(these_arguments[1]) &gt; 0:\n\n                # At this point, you'll probably want to change scenes\n                # Something like a loading into lobby screen\n                print(\"Command line lobby ID: %s\" % these_arguments[1])\n                join_lobby(int(these_arguments[1]))\n</code></pre> <p>This is important if the player is accepting a Steam invite or right-clicks a friend's name then selects 'Join Game' or 'Join Lobby' and doesn't have the game open. Doing either action will launch the game with the additional command <code>+connect_lobby &lt;Steam Lobby ID&gt;</code>. Sadly Godot doesn't really understand this command argument so our <code>check_command_line()</code> function has to be written to work within those constraints.</p> <p>Additionally, you'll need to add the appropriate scene name to your Steamworks launch options on the Steamworks website. You'll want to add the full scene path (res://your-scene.tscn) on the Arguments line in your launch option. You can read more about that, with details, in this link. Big thanks to Antokolos for answering this issue and providing a solid example.</p> <p>Next we'll set up our lobby creation functions. You'll probably want to connect this function to a button somewhere in your game:</p> <pre><code>func create_lobby() -&gt; void:\n    # Make sure a lobby is not already set\n    if lobby_id == 0:\n        Steam.createLobby(Steam.LOBBY_TYPE_PUBLIC, lobby_members_max)\n</code></pre> <p>In this example we have <code>createLobby()</code> using our variables and enum. The first variables covers the type of lobby; we are using a public lobby open to all. There are, of course, four settings in total you can use:</p> Lobby Type Enums Values Descriptions LOBBY_TYPE_PRIVATE 0 The only way to join the lobby is from an invite. LOBBY_TYPE_FRIENDS_ONLY 1 Joinable by friends and invitees, but does not show up in the lobby list. LOBBY_TYPE_PUBLIC 2 Returned by search and visible to friends. LOBBY_TYPE_INVISIBLE 3 Returned by search, but not visible to other friends. <p>The second variable is the maximum number of players allowed to join the lobby. This cannot be set higher than 250.</p> <p>Next we'll cover the callback from Steam saying the lobby has been created:</p> <pre><code>func _on_lobby_created(connect: int, this_lobby_id: int) -&gt; void:\n    if connect == 1:\n        # Set the lobby ID\n        lobby_id = this_lobby_id\n        print(\"Created a lobby: %s\" % lobby_id)\n\n        # Set this lobby as joinable, just in case, though this should be done by default\n        Steam.setLobbyJoinable(lobby_id, true)\n\n        # Set some lobby data\n        Steam.setLobbyData(lobby_id, \"name\", \"Gramps' Lobby\")\n        Steam.setLobbyData(lobby_id, \"mode\", \"GodotSteam test\")\n\n        # Allow P2P connections to fallback to being relayed through Steam if needed\n        var set_relay: bool = Steam.allowP2PPacketRelay(true)\n        print(\"Allowing Steam to be relay backup: %s\" % set_relay)\n</code></pre> <p>Once this callback fires, you'll have your lobby ID which you can pass off to our <code>lobby_id</code> variable for later use. As the note says, the lobby should be set to joinable by default but, just in case, we add it here. You can make the lobby unjoinable too.</p> <p>You can also set some lobby data now; which can be whatever key / value pair you want. I'm not aware of a maximum amount of pairs you can set.</p> <p>And you'll notice I set <code>allowP2PPacketRelay()</code> to true at this point; this allows, as the note mentions, P2P connections to fallback to being relayed through Steam if needed. This usually happens if you have NAT or firewall issues.</p> <p>Now that we can create lobbies, let's query and pull a list of lobbies. I usually have a button that will open a lobby interface which is a list of buttons, one per lobby:</p> <pre><code>func _on_open_lobby_list_pressed() -&gt; void:\n    # Set distance to worldwide\n    Steam.addRequestLobbyListDistanceFilter(Steam.LOBBY_DISTANCE_FILTER_WORLDWIDE)\n\n    print(\"Requesting a lobby list\")\n    Steam.requestLobbyList()\n</code></pre> <p>Before requesting the lobby list with <code>requestLobbyList()</code> you can add more search queries like:</p> <p><code>addRequestLobbyListStringFilter()</code>Allows you to look for specific works in the lobby metadata</p> <p><code>addRequestLobbyListNumericalFilter()</code>Adds a numerical comparions filter (&lt;=, &lt;, =, &gt;, &gt;=, !=)</p> <p><code>addRequestLobbyListNearValueFilter()</code>Gives results closes to the specified value you give</p> <p><code>addRequestLobbyListFilterSlotsAvailable()</code>Only returns lobbies with a specified amount of open slots available</p> <p><code>addRequestLobbyListResultCountFilter()</code>Sets how many results you want returned</p> <p><code>addRequestLobbyListDistanceFilter()</code>Sets the distance to search for lobbies, like:</p> Lobby Distance Enums Values Checking Distances LOBBY_DISTANCE_FILTER_CLOSE 0 Close LOBBY_DISTANCE_FILTER_DEFAULT 1 Default LOBBY_DISTANCE_FILTER_FAR 2 Far LOBBY_DISTANCE_FILTER_WORLDWIDE 3 Worldwide <p>Once you set all, some, or none of these, you can then call <code>requestLobbyList()</code>. Once it pulls your lobby list it will fire a callback <code>_on_lobby_match_list()</code>. You can then loop through the lobbies however you want.</p> <p>In our example code, I do something like this to make buttons for each lobby:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func _on_lobby_match_list(these_lobbies: Array) -&gt; void:\n    for this_lobby in these_lobbies:\n        # Pull lobby data from Steam, these are specific to our example\n        var lobby_name: String = Steam.getLobbyData(this_lobby, \"name\")\n        var lobby_mode: String = Steam.getLobbyData(this_lobby, \"mode\")\n\n        # Get the current number of members\n        var lobby_num_members: int = Steam.getNumLobbyMembers(this_lobby)\n\n        # Create a button for the lobby\n        var lobby_button: Button = Button.new()\n        lobby_button.set_text(\"Lobby %s: %s [%s] - %s Player(s)\" % [this_lobby, lobby_name, lobby_mode, lobby_num_members])\n        lobby_button.set_size(Vector2(800, 50))\n        lobby_button.set_name(\"lobby_%s\" % this_lobby)\n        lobby_button.connect(\"pressed\", self, \"join_lobby\", [this_lobby])\n\n        # Add the new lobby to the list\n        $Lobbies/Scroll/List.add_child(lobby_button)\n</code></pre> <pre><code>func _on_lobby_match_list(these_lobbies: Array) -&gt; void:\n    for this_lobby in these_lobbies:\n        # Pull lobby data from Steam, these are specific to our example\n        var lobby_name: String = Steam.getLobbyData(this_lobby, \"name\")\n        var lobby_mode: String = Steam.getLobbyData(this_lobby, \"mode\")\n\n        # Get the current number of members\n        var lobby_num_members: int = Steam.getNumLobbyMembers(this_lobby)\n\n        # Create a button for the lobby\n        var lobby_button: Button = Button.new()\n        lobby_button.set_text(\"Lobby %s: %s [%s] - %s Player(s)\" % [this_lobby, lobby_name, lobby_mode, lobby_num_members])\n        lobby_button.set_size(Vector2(800, 50))\n        lobby_button.set_name(\"lobby_%s\" % this_lobby)\n        lobby_button.connect(\"pressed\", Callable(self, \"join_lobby\").bind(this_lobby))\n\n        # Add the new lobby to the list\n        $Lobbies/Scroll/List.add_child(lobby_button)\n</code></pre> <p>You should now have a way to call lobby lists and display them.</p> <p>Next we'll tackle joining a lobby. Clicking one of the lobby buttons we created in the last step will fire this function:</p> <pre><code>func join_lobby(this_lobby_id: int) -&gt; void:\n    print(\"Attempting to join lobby %s\" % lobby_id)\n\n    # Clear any previous lobby members lists, if you were in a previous lobby\n    lobby_members.clear()\n\n    # Make the lobby join request to Steam\n    Steam.joinLobby(this_lobby_id)\n</code></pre> <p>This will attempt to join the lobby you click on and, when it succeeds, it will fire the <code>_on_lobby_joined()</code> callback:</p> <pre><code>func _on_lobby_joined(this_lobby_id: int, _permissions: int, _locked: bool, response: int) -&gt; void:\n    # If joining was successful\n    if response == Steam.CHAT_ROOM_ENTER_RESPONSE_SUCCESS:\n        # Set this lobby ID as your lobby ID\n        lobby_id = this_lobby_id\n\n        # Get the lobby members\n        get_lobby_members()\n\n        # Make the initial handshake\n        make_p2p_handshake()\n\n    # Else it failed for some reason\n    else:\n        # Get the failure reason\n        var fail_reason: String\n\n        match response:\n            Steam.CHAT_ROOM_ENTER_RESPONSE_DOESNT_EXIST: fail_reason = \"This lobby no longer exists.\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_NOT_ALLOWED: fail_reason = \"You don't have permission to join this lobby.\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_FULL: fail_reason = \"The lobby is now full.\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_ERROR: fail_reason = \"Uh... something unexpected happened!\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_BANNED: fail_reason = \"You are banned from this lobby.\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_LIMITED: fail_reason = \"You cannot join due to having a limited account.\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_CLAN_DISABLED: fail_reason = \"This lobby is locked or disabled.\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_COMMUNITY_BAN: fail_reason = \"This lobby is community locked.\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_MEMBER_BLOCKED_YOU: fail_reason = \"A user in the lobby has blocked you from joining.\"\n            Steam.CHAT_ROOM_ENTER_RESPONSE_YOU_BLOCKED_MEMBER: fail_reason = \"A user you have blocked is in the lobby.\"\n\n        print(\"Failed to join this chat room: %s\" % fail_reason)\n\n        #Reopen the lobby list\n        _on_open_lobby_list_pressed()\n</code></pre> <p>For a more clear explanation of these chat room responses, check out the enums listings in the Friends class.</p> <p>If the player is already in-game and accepts a Steam invite or clicks on a friend in their friend list then selects 'Join Game' from there, it will trigger the <code>join_requested</code> callback. This function will handle that:</p> <pre><code>func _on_lobby_join_requested(this_lobby_id: int, friend_id: int) -&gt; void:\n    # Get the lobby owner's name\n    var owner_name: String = Steam.getFriendPersonaName(friend_id)\n\n    print(\"Joining %s's lobby...\" % owner_name)\n\n    # Attempt to join the lobby\n    join_lobby(this_lobby_id)\n</code></pre> <p>It will then follow the normal <code>join_lobby()</code> process of setting up all lobby members, handshakes, etc. Not to sound repetitive, but note again that if the player is not in-game and accepts a Steam invite or joins a game through the friends list then we are back to the command line situation talked about earlier.</p> <p>Depending on how you set up your lobby interface, you'll probably want the player to see some kind of chat window with a player list. Our <code>get_lobby_members()</code> will help with finding out who all is in this lobby:</p> <pre><code>func get_lobby_members() -&gt; void:\n    # Clear your previous lobby list\n    lobby_members.clear()\n\n    # Get the number of members from this lobby from Steam\n    var num_of_members: int = Steam.getNumLobbyMembers(lobby_id)\n\n    # Get the data of these players from Steam\n    for this_member in range(0, num_of_members):\n        # Get the member's Steam ID\n        var member_steam_id: int = Steam.getLobbyMemberByIndex(lobby_id, this_member)\n\n        # Get the member's Steam name\n        var member_steam_name: String = Steam.getFriendPersonaName(member_steam_id)\n\n        # Add them to the list\n        lobby_members.append({\"steam_id\":member_steam_id, \"steam_name\":member_steam_name})\n</code></pre> <p>This will get the lobby members from Steam then loop through and get their names and Steam ID's then append them to our <code>lobby_members</code> array for later use. You can then display this list in your lobby room.</p> <p>Sometimes you will see that a user's name and avatar, sometimes one or the other, won't immediately show up correctly. This is because our local user only really knows about friends and players they have played with; whatever is stored in local cache.</p> <p>A bit after a lobby is joined, this data will be sent by Steam which triggers a <code>persona_state_change</code> callback. You will want to update your player list to reflect this and get the correct name and avatar for unknown players. Our connect <code>_on_persona_change()</code> function will do that:</p> <pre><code># A user's information has changed\nfunc _on_persona_change(this_steam_id: int, _flag: int) -&gt; void:\n    # Make sure you're in a lobby and this user is valid or Steam might spam your console log\n    if lobby_id &gt; 0:\n        print(\"A user (%s) had information change, update the lobby list\" % this_steam_id)\n\n        # Update the player list\n        get_lobby_members()\n</code></pre> <p>All this really does is refresh our lobby list information to get the avatar and name right by re-calling <code>get_lobby_Members()</code> again.</p> <p>You'll also note in the joining lobbies part we fire the initial P2P handshake; this just opens and checks our P2P session:</p> <pre><code>func make_p2p_handshake() -&gt; void:\n    print(\"Sending P2P handshake to the lobby\")\n\n    send_p2p_packet(0, {\"message\": \"handshake\", \"from\": steam_id})\n</code></pre> <p>We won't get into what all this means just yet, but I wanted to show the code for the handshake function here since it is referenced; more on that in the P2P tutorial. Your handshake messages can be anything and disregarded for the most part. Again, it is just to test our P2P session.</p> <p>Now that a player has joined the lobby, everyone in the lobby will receive a callback notifying of the change. We will handle it like this:</p> <pre><code>func _on_lobby_chat_update(this_lobby_id: int, change_id: int, making_change_id: int, chat_state: int) -&gt; void:\n    # Get the user who has made the lobby change\n    var changer_name: String = Steam.getFriendPersonaName(change_id)\n\n    # If a player has joined the lobby\n    if chat_state == Steam.CHAT_MEMBER_STATE_CHANGE_ENTERED:\n        print(\"%s has joined the lobby.\" % changer_name)\n\n    # Else if a player has left the lobby\n    elif chat_state == Steam.CHAT_MEMBER_STATE_CHANGE_LEFT:\n        print(\"%s has left the lobby.\" % changer_name)\n\n    # Else if a player has been kicked\n    elif chat_state == Steam.CHAT_MEMBER_STATE_CHANGE_KICKED:\n        print(\"%s has been kicked from the lobby.\" % changer_name)\n\n    # Else if a player has been banned\n    elif chat_state == Steam.CHAT_MEMBER_STATE_CHANGE_BANNED:\n        print(\"%s has been banned from the lobby.\" % changer_name)\n\n    # Else there was some unknown change\n    else:\n        print(\"%s did... something.\" % changer_name)\n\n    # Update the lobby now that a change has occurred\n    get_lobby_members()\n</code></pre> <p>For the most part this will update when players join or leave the lobby. However, if you add functionality to kick or ban players, it will show that too. At the end of this function, I always update the player list so we can show the correct list of players in the lobby.</p> <p>You may also want players to be able to chat while in the lobby and waiting for a game to start. If you have a LineEdit node for messaging, clicking a \"send\" button should trigger something like this:</p> <pre><code>func _on_send_chat_pressed() -&gt; void:\n    # Get the entered chat message\n    var this_message: String = $Chat.get_text()\n\n    # If there is even a message\n    if this_message.length() &gt; 0:\n        # Pass the message to Steam\n        var was_sent: bool = Steam.sendLobbyChatMsg(lobby_id, this_message)\n\n        # Was it sent successfully?\n        if not was_sent:\n            print(\"ERROR: Chat message failed to send.\")\n\n    # Clear the chat input\n    $Chat.clear()\n</code></pre> <p>The $Chat is your LineEdit and will probably be different in your project. Most importantly is your get the text and send it to <code>sendLobbyChatMsg()</code>.</p> <p>Next we'll handle leaving a lobby. If you have a button do to so, have it connect to this function:</p> <pre><code>func leave_lobby() -&gt; void:\n    # If in a lobby, leave it\n    if lobby_id != 0:\n        # Send leave request to Steam\n        Steam.leaveLobby(lobby_id)\n\n        # Wipe the Steam lobby ID then display the default lobby ID and player list title\n        lobby_id = 0\n\n        # Close session with all users\n        for this_member in lobby_members:\n            # Make sure this isn't your Steam ID\n            if this_member['steam_id'] != steam_id:\n\n                # Close the P2P session\n                Steam.closeP2PSessionWithUser(this_member['steam_id'])\n\n        # Clear the local lobby list\n        lobby_members.clear()\n</code></pre> <p>This will inform Steam you have left the lobby then clear your <code>lobby_id</code> variable, as well as your <code>lobby_members</code> array after it closes your P2P sessions with all players in the lobby. You'll notice at this point we don't have any functions to handle invites through Steam. This will be added in the second half of the lobby tutorial at a later time.</p> <p>That concludes the lobby tutorial. At this point you may want to check out the P2P tutorial which compliments this one. Obviously this code should not be used for production and more for a very, very, very, simple guide on where to start.</p>"},{"location":"tutorials/lobbies/#set-up","title":"Set Up","text":""},{"location":"tutorials/lobbies/#the-_ready-function","title":"The _ready() Function","text":""},{"location":"tutorials/lobbies/#creating-lobbies","title":"Creating Lobbies","text":""},{"location":"tutorials/lobbies/#get-lobby-lists","title":"Get Lobby Lists","text":""},{"location":"tutorials/lobbies/#joining-lobbies","title":"Joining Lobbies","text":""},{"location":"tutorials/lobbies/#getting-lobby-members","title":"Getting Lobby Members","text":""},{"location":"tutorials/lobbies/#persona-changes-avatars-names","title":"Persona Changes / Avatars / Names","text":""},{"location":"tutorials/lobbies/#p2p-handshakes","title":"P2P Handshakes","text":""},{"location":"tutorials/lobbies/#lobby-updates-changes","title":"Lobby Updates / Changes","text":""},{"location":"tutorials/lobbies/#lobby-chat-messages","title":"Lobby Chat / Messages","text":""},{"location":"tutorials/lobbies/#leaving-a-lobby","title":"Leaving A Lobby","text":""},{"location":"tutorials/lobbies/#up-next","title":"Up Next","text":""},{"location":"tutorials/lobbies/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/lobbies/#video-tutorials","title":"Video Tutorials","text":"<p>Prefer video tutorials? Feast your eyes and ears!</p> <p>  'Godot Tutorial: GodotSteam Lobby System' by DawnsCrow Games</p>"},{"location":"tutorials/lobbies/#related-projects","title":"Related Projects","text":"<p>  'GodotSteamHL' by JDare</p>"},{"location":"tutorials/lobbies/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/mac_export/","title":"Tutorials - Mac Exporting","text":"<p>This comes up sometimes so I figured I would cover it. However, as you can notice by scanning the page, it is short and sweet. When exporting for macOS, there are a few minor modifications you must make to the app's ZIP file.</p> <p>For Godot 3.x users, one option you need to make sure is disabled is Codesign. For some users, it makes the game unable to talk to Steam and results in the \"Steam not running\" error. Just check for this during export:</p> <p></p> <p>Apparently, for Godot 4.x users, codesign is fine but you may want to keep the notarizing stuff empty.</p> <p>This one is apparently still valid though Valve says it is only needed on Catalina 10.15, but you will want to <code>disable library validation</code> and <code>allow Dyld environment variables</code> to allow Steamworks to load and the overlay to work properly.</p> Godot 3.xGodot 4.x <p></p> <p></p> <p>There is, by default, a Godot Engine icon already inside the <code>{your game}.app/Contents/Resources</code> folder. You will most likely want to replace it with a fancy version of your game's icon. All you have to do is export your icon and save it as <code>icon.icns</code> then replace it in the same folder, overwriting the original.</p> <p>You should be able to create it online or with a Photoshop plug-in. Unfortunately I don't have any great resources or links for this at the time of writing, but a quick DuckDuckGo search should sort you out.</p> <p>Second, you need to add the following files to your app Contents: - <code>libsteam_api.dylib</code> to <code>{your game}.app/Contents/MacOS</code> folder - <code>libgodotsteam.framework</code> to <code>{your game}.app/Contents/Frameworks</code> folder</p> <p>The <code>libsteam_api.dylib</code> should be in the <code>redistributable_bin/osx</code> folder inside the Steamworks SDK. Make sure it matches the Steamworks API version you are using to compile the editor/template or it will crash.</p> <p>Alternatively, if you are using the pre-compiled one from GodotSteam's GitHub release section, you can thank SapphireMH for already including this file for you!</p> <p>Here is a handy shell script you can run after you export your mac build to zip file.</p> <pre><code>#!/bin/bash\n\nGAME_NAME=\"Your Game\"\n\n# Define the path to the ZIP file\nZIP_FILE=\"./builds/mac/$GAME_NAME.zip\"\n\n# Check if the zip file exists\nif [ -f \"$ZIP_FILE\" ]; then\n    unzip -o \"$ZIP_FILE\" -d \"./builds/mac\" || exit\nfi\n\n# copy dylib file\ncp \"./src/addons/godotsteam/osx/libsteam_api.dylib\" \"./builds/mac/$GAME_NAME.app/Contents/MacOS/libsteam_api.dylib\" || exit\n\n# copy framework folder\ncp -R \"./src/addons/godotsteam/osx/libgodotsteam.framework/\" \"./builds/mac/$GAME_NAME.app/Contents/Frameworks/libgodotsteam.framework/\" || exit\n</code></pre>"},{"location":"tutorials/mac_export/#beware-codesign","title":"Beware Codesign","text":""},{"location":"tutorials/mac_export/#entitlements","title":"Entitlements","text":""},{"location":"tutorials/mac_export/#app-icon","title":"App Icon","text":""},{"location":"tutorials/mac_export/#steamworks-components","title":"Steamworks Components","text":""},{"location":"tutorials/multiplayer_peer/","title":"Tutorials - MultiplayerPeer","text":"<p>This is a placeholder for the upcoming MultiplayerPeer tutorial.</p>"},{"location":"tutorials/networking_messages/","title":"Tutorials - Networking Messages","text":"<p>This is a placeholder for the upcoming Networking Messages tutorial.</p>"},{"location":"tutorials/networking_sockets/","title":"Tutorials - Networking Sockets","text":"<p>This is a placeholder for the upcoming Networking Sockets tutorial.</p>"},{"location":"tutorials/p2p/","title":"Tutorials - P2P Networking","text":"<p>One of the more requested tutorials is multiplayer lobbies and P2P networking through Steam; this tutorial specifically covers the P2P Networking portion and our lobbies tutorial covers the other half.</p> <p>Please note this tutorial uses the older Steamworks Networking class and this is for a basic, turn-based lobby / P2P set-up. Only use this as a starting point.</p> <p>I'd also like to suggest you check out the Additional Resources section of this tutorial before continuing on.</p> Relevant GodotSteam classes and functions <ul> <li>Networking class<ul> <li>acceptP2PSessionWithUser()</li> <li>getAvailableP2PPacketSize()</li> <li>readP2PPacket()</li> <li>sendP2PPacket()</li> </ul> </li> <li>Friends class<ul> <li>getFriendPersonaName()</li> </ul> </li> </ul> <p>Next we'll want to set up the signal connections for Steamworks and a command line checker like so:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func _ready() -&gt; void:\n    Steam.connect(\"p2p_session_request\", self, \"_on_p2p_session_request\")\n    Steam.connect(\"p2p_session_connect_fail\", self, \"_on_p2p_session_connect_fail\")\n\n    # Check for command line arguments\n    check_command_line()\n</code></pre> <pre><code>func _ready() -&gt; void:\n    Steam.p2p_session_request.connect(_on_p2p_session_request)\n    Steam.p2p_session_connect_fail.connect(_on_p2p_session_connect_fail)\n\n    # Check for command line arguments\n    check_command_line()\n</code></pre> <p>We will get into each of these below.</p> <p>We'll also need to set <code>read_p2p_packet()</code> in our <code>_process()</code> function so it is always looking for new packets:</p> <pre><code>func _process(_delta) -&gt; void:\n    Steam.run_callbacks()\n\n    # If the player is connected, read packets\n    if lobby_id &gt; 0:\n        read_p2p_packet()\n</code></pre> <p>If you are using the <code>global.gd</code> autoload singleton then you can omit the <code>run_callbacks()</code> command as they'll be running already.</p> <p>Here is a nice bit of code from tehsquidge for handling packet reading:</p> <pre><code>func _process(delta):\n    Steam.run_callbacks()\n\n    if lobby_id &gt; 0:\n        read_all_p2p_packets()\n\n\nfunc read_all_p2p_packets(read_count: int = 0):\n    if read_count &gt;= PACKET_READ_LIMIT:\n        return\n\n    if Steam.getAvailableP2PPacketSize(0) &gt; 0:\n        read_p2p_packet()\n        read_all_p2p_packets(read_count + 1)\n</code></pre> <p>Next we'll check out the P2P networking functionality. Over in the lobby tutorial, we did a P2P handshake when someone joins the lobby, it would trigger a <code>p2p_session_request</code> callback which would in turn trigger this function:</p> <pre><code>func _on_p2p_session_request(remote_id: int) -&gt; void:\n    # Get the requester's name\n    var this_requester: String = Steam.getFriendPersonaName(remote_id)\n    print(\"%s is requesting a P2P session\" % this_requester)\n\n    # Accept the P2P session; can apply logic to deny this request if needed\n    Steam.acceptP2PSessionWithUser(remote_id)\n\n    # Make the initial handshake\n    make_p2p_handshake()\n</code></pre> <p>It pretty simply acknowledges the session request, accepts it, then sends a handshake back.</p> <p>Inside that handshake there was a call to the <code>read_p2p_packet()</code> function which does this:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func read_p2p_packet() -&gt; void:\n    var packet_size: int = Steam.getAvailableP2PPacketSize(0)\n\n    # There is a packet\n    if packet_size &gt; 0:\n        var this_packet: Dictionary = Steam.readP2PPacket(packet_size, 0)\n\n        if this_packet.empty() or this_packet == null:\n            print(\"WARNING: read an empty packet with non-zero size!\")\n\n        # Get the remote user's ID\n        var packet_sender: int = this_packet['remote_steam_id']\n\n        # Make the packet data readable\n        var packet_code: PoolByteArray = this_packet['data']\n        var readable_data: Dictionary = bytes2var(packet_code)\n\n        # Print the packet to output\n        print(\"Packet: %s\" % readable_data)\n\n        # Append logic here to deal with packet data\n</code></pre> <pre><code>func read_p2p_packet() -&gt; void:\n    var packet_size: int = Steam.getAvailableP2PPacketSize(0)\n\n    # There is a packet\n    if packet_size &gt; 0:\n        var this_packet: Dictionary = Steam.readP2PPacket(packet_size, 0)\n\n        if this_packet.is_empty() or this_packet == null:\n            print(\"WARNING: read an empty packet with non-zero size!\")\n\n        # Get the remote user's ID\n        var packet_sender: int = this_packet['remote_steam_id']\n\n        # Make the packet data readable\n        var packet_code: PackedByteArray = this_packet['data']\n        var readable_data: Dictionary = bytes_to_var(packet_code)\n\n        # Print the packet to output\n        print(\"Packet: %s\" % readable_data)\n\n        # Append logic here to deal with packet data\n</code></pre> <p>If the packet size is greater than zero then it will get the sender's Steam ID and the data they sent. The line <code>bytes2var</code> (Godot 2x., 3.x) or <code>bytes_to_var</code> (Godot 4.x) is very important as it decodes the data back into something you can read and use. After it is decoded you can pass that data to any number of functions for your game.</p> <p>Beyond the handshake, you will probably want to pass a lot of different pieces of data back and forth between players.</p> <p>I have mine set up with two arguments: the first is the recipient as a string and the second is a dictionary. I think the dictionary is best for sending data so you can have a key / value pair to reference and make things less confusing on the receiving end. Each packet will go through the following function:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func send_p2p_packet(this_target: int, packet_data: Dictionary) -&gt; void:\n    # Set the send_type and channel\n    var send_type: int = Steam.P2P_SEND_RELIABLE\n    var channel: int = 0\n\n    # Create a data array to send the data through\n    var this_data: PoolByteArray\n    this_data.append_array(var2bytes(packet_data))\n\n    # If sending a packet to everyone\n    if this_target == 0:\n        # If there is more than one user, send packets\n        if lobby_members.size() &gt; 1:\n            # Loop through all members that aren't you\n            for this_member in lobby_members:\n                if this_member['steam_id'] != steam_id:\n                    Steam.sendP2PPacket(this_member['steam_id'], this_data, send_type, channel)\n\n    # Else send it to someone specific\n    else:\n        Steam.sendP2PPacket(this_target, this_data, send_type, channel)\n</code></pre> <pre><code>func send_p2p_packet(this_target: int, packet_data: Dictionary) -&gt; void:\n            # Set the send_type and channel\n    var send_type: int = Steam.P2P_SEND_RELIABLE\n    var channel: int = 0\n\n    # Create a data array to send the data through\n    var this_data: PackedByteArray\n    this_data.append_array(var_to_bytes(packet_data))\n\n    # If sending a packet to everyone\n    if this_target == 0:\n        # If there is more than one user, send packets\n        if lobby_members.size() &gt; 1:\n            # Loop through all members that aren't you\n            for this_member in lobby_members:\n                if this_member['steam_id'] != steam_id:\n                    Steam.sendP2PPacket(this_member['steam_id'], this_data, send_type, channel)\n\n    # Else send it to someone specific\n    else:\n        Steam.sendP2PPacket(this_target, this_data, send_type, channel)\n</code></pre> <p>The <code>send_type</code> variable will corresponed to these enums and integers:</p> Send Type Enums Values Descriptions P2P_SEND_UNRELIABLE 0 Send unreliable P2P_SEND_UNRELIABLE_NO_DELAY 1 Send unreliable with no delay P2P_SEND_RELIABLE 2 Send reliable P2P_SEND_RELIABLE_WITH_BUFFERING 3 Send reliable with buffering <p>The channel used should match for both read and send functions. You may want to use multiple channels so this should obviously be adjusted.</p> <p>As your game increases in complexity, you may find the amount of data you're sending increases significantly. One of the core tenets of responsive, effective networking is reducing the amount of data you're sending, to reduce the chance of some part becoming corrupted or requiring players of your game to have a very fast internet connection to even play your game.</p> <p>Luckily, we can introduce compression to our send function to shrink the size of the data without needing to change our whole dictionary. The concept is straightforward enough; when we call the var2bytes (Godot 2.x, 3.x) or var_to_bytes (Godot 4.x) function, we turn our dictionary (or some other variable) into a PoolByteArray (Godot 2.x, 3.x) or PackedByteArray (Godot 4.x) and send it over the internet. </p> <p>We can compress the PoolByteArray / PackedByteArray to be smaller with a single line of code:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func send_p2p_packet(target: int, packet_data: Dictionary) -&gt; void:\n    # Set the send_type and channel\n    var send_type: int = Steam.P2P_SEND_RELIABLE\n    var channel: int = 0\n\n    # Create a data array to send the data through\n    var this_data: PoolByteArray\n\n    # Compress the PoolByteArray we create from our dictionary  using the GZIP compression method\n    var compressed_data: PoolByteArray = var2bytes(packet_data).compress(File.COMPRESSION_GZIP)\n    this_data.append_array(compressed_data)\n\n    # If sending a packet to everyone\n    if target == 0:\n        # If there is more than one user, send packets\n        if lobby_members.size() &gt; 1:\n            # Loop through all members that aren't you\n            for this_member in lobby_members:\n                if this_member['steam_id'] != steam_id:\n                    Steam.sendP2PPacket(this_member['steam_id'], this_data, send_type, channel)\n\n    # Else send it to someone specific\n    else:\n        Steam.sendP2PPacket(target, this_data, send_type, channel)\n</code></pre> <pre><code>func send_p2p_packet(target: int, packet_data: Dictionary) -&gt; void:\n    # Set the send_type and channel\n    var send_type: int = Steam.P2P_SEND_RELIABLE\n    var channel: int = 0\n\n    # Create a data array to send the data through\n    var this_data: PackedByteArray\n\n    # Compress the PackedByteArray we create from our dictionary  using the GZIP compression method\n    var compressed_data: PackedByteArray = var_to_bytes(packet_data).compress(FileAccess.COMPRESSION_GZIP)\n    this_data.append_array(compressed_data)\n\n    # If sending a packet to everyone\n    if target == 0:\n        # If there is more than one user, send packets\n        if lobby_members.size() &gt; 1:\n            # Loop through all members that aren't you\n            for this_member in lobby_members:\n                if this_member['steam_id'] != steam_id:\n                    Steam.sendP2PPacket(this_member['steam_id'], this_data, send_type, channel)\n\n    # Else send it to someone specific\n    else:\n        Steam.sendP2PPacket(target, this_data, send_type, channel)\n</code></pre> <p>Of course, we've now sent a compressed PoolByteArray / PackedByteArray to someone else over the internet, so when they receive the packet, they will need to first decompress the PoolByteArray / PackedByteArray before they can decode it. To accomplish this, we add a single line of code to our <code>read_p2p_packet</code> function like so:</p> Godot 2.x, 3.xGodot 4.x <pre><code>func read_p2p_packet() -&gt; void:\n    var packet_size: int = Steam.getAvailableP2PPacketSize(0)\n\n    # There is a packet\n    if packet_size &gt; 0:\n        var this_packet: Dictionary = Steam.readP2PPacket(packet_size, 0)\n\n        if this_packet.empty() or this_packet == null:\n            print(\"WARNING: read an empty packet with non-zero size!\")\n\n        # Get the remote user's ID\n        var packet_sender: int = this_packet['remote_steam_id']\n\n        # Make the packet data readable\n        var packet_code: PoolByteArray = this_packet['data']\n\n        # Decompress the array before turning it into a useable dictionary\n        var readable_data: Dictionary = bytes2var(packet_code.decompress_dynamic(-1, File.COMPRESSION_GZIP))\n\n        # Print the packet to output\n        print(\"Packet: %s\" % readable_data)\n\n        # Append logic here to deal with packet data\n</code></pre> <pre><code>func read_p2p_packet() -&gt; void:\n    var packet_size: int = Steam.getAvailableP2PPacketSize(0)\n\n    # There is a packet\n    if packet_size &gt; 0:\n        var this_packet: Dictionary = Steam.readP2PPacket(packet_size, 0)\n\n        if this_packet.is_empty() or this_packet == null:\n            print(\"WARNING: read an empty packet with non-zero size!\")\n\n        # Get the remote user's ID\n        var packet_sender: int = this_packet['remote_steam_id']\n\n        # Make the packet data readable\n        var packet_code: PackedByteArray = this_packet['data']\n\n        # Decompress the array before turning it into a useable dictionary\n        var readable_data: Dictionary = bytes_to_var(packet_code.decompress_dynamic(-1, FileAccess.COMPRESSION_GZIP))\n\n        # Print the packet to output\n        print(\"Packet: %s\" % readable_data)\n\n        # Append logic here to deal with packet data\n</code></pre> <p>The key point to note here is the format must be the same for sending and receiving. There's a whole lot to read about compression in Godot, far beyond this tutorial; to learn more, read all about it here.</p> <p>For the last part of this tutorial we'll handle P2P failures with the following function which is triggered by the <code>p2p_session_connect_fail</code> callback:</p> <pre><code>func _on_p2p_session_connect_fail(steam_id: int, session_error: int) -&gt; void:\n    # If no error was given\n    if session_error == 0:\n        print(\"WARNING: Session failure with %s: no error given\" % steam_id)\n\n    # Else if target user was not running the same game\n    elif session_error == 1:\n        print(\"WARNING: Session failure with %s: target user not running the same game\" % steam_id)\n\n    # Else if local user doesn't own app / game\n    elif session_error == 2:\n        print(\"WARNING: Session failure with %s: local user doesn't own app / game\" % steam_id)\n\n    # Else if target user isn't connected to Steam\n    elif session_error == 3:\n        print(\"WARNING: Session failure with %s: target user isn't connected to Steam\" % steam_id)\n\n    # Else if connection timed out\n    elif session_error == 4:\n        print(\"WARNING: Session failure with %s: connection timed out\" % steam_id)\n\n    # Else if unused\n    elif session_error == 5:\n        print(\"WARNING: Session failure with %s: unused\" % steam_id)\n\n    # Else no known error\n    else:\n        print(\"WARNING: Session failure with %s: unknown error %s\" % [steam_id, session_error])\n</code></pre> <p>This will print a warning message so you know why the session connection failed. From here you can add any additional functionality you want like retrying the connection or something else.</p> <p>That concludes the P2P tutorial. At this point you may want to check out the lobbies tutorial (if you haven't yet) which compliments this one. Obviously this code should not be used for production and more for a very, very, very, simple guide on where to start.</p>"},{"location":"tutorials/p2p/#the-_ready-function","title":"The _ready() Function","text":""},{"location":"tutorials/p2p/#the-_process-function","title":"The _process() Function","text":""},{"location":"tutorials/p2p/#p2p-networking-session-request","title":"P2P Networking - Session Request","text":""},{"location":"tutorials/p2p/#reading-p2p-packets","title":"Reading P2P Packets","text":""},{"location":"tutorials/p2p/#sending-p2p-packets","title":"Sending P2P Packets","text":""},{"location":"tutorials/p2p/#p2p-session-failures","title":"P2P Session Failures","text":""},{"location":"tutorials/p2p/#next-up","title":"Next Up","text":""},{"location":"tutorials/p2p/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/p2p/#suggested-reading-material","title":"Suggested Reading Material","text":"<p>I highly suggest reading some or all of this to better understand networking.</p> <p>  Valve's networking documentation</p> <p>  'Game Networking Resources' by ThusSpokeNomad</p> <p>  'How to write a network game?' on StackOverflow</p> <p>  Networking by Gaffer On Games</p> <p>  'Client/Server Game Architecture' by Gabriel Gambetta</p>"},{"location":"tutorials/p2p/#related-projects","title":"Related Projects","text":"<p>  'GodotSteamHL' by JDare</p>"},{"location":"tutorials/p2p/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/remove_steam/","title":"Tutorials - Removing Steam Easily","text":"<p>A lot of folks like to ship on other platforms like Playstation, XBox, Switch, Itch.io, etc. Removing deeply embedded Steamworks stuff can be a pain and some have opted to keep separate repositories for their game's Steam version. However, there is an alternative to this: programmatically ignoring the Steamworks bits. Below are some examples shared by users in our Discord.</p> <p>So the example I'll be using for this tutorial is based on solution #2 submitted by Rutger. I am actively using this in my current project.</p> <p>We will create two variable to hold our platform and the Steamworks object then modify the usual <code>initialize_steam()</code> function to look for the Steam singleton before trying to do anything:</p> <pre><code>var this_platform: String = \"steam\"\nvar steam_api: Object = null\n\n# Initialize Steam\nfunc initialize_steam() -&gt; void:\n    if Engine.has_singleton(\"Steam\"):\n        this_platform = \"steam\"\n        steam_api = Engine.get_singleton(\"Steam\")\n\n        var initialized: Dictionary = steam_api.steamInitEx(false)\n\n        print(\"[STEAM] Did Steam initialize?: %s\" % initialized))\n\n        # In case it does fail, let's find out why and null the steam_api object\n        if initialized['status'] &gt; 0:\n            print(\"Failed to initialize Steam, disabling all Steamworks functionality: %s\" % initialized)\n            steam_api = null\n\n        # Is the user online?\n        steam_id = steam_api.getSteamID()\n        steam_name = steam_api.getPersonaName()\n\n    else:\n        this_platform = \"itch\"  # Could be anything else really like a console, etc.\n        steam_id = 0\n        steam_name = \"You\"\n</code></pre> <p>Now we can use the <code>steam_api</code> object to call our Steam functions elsewhere in the game and, without Steamworks present, it won't crash the game due to the missing singleton call.</p> <p>I also create a helper function to quickly check if anything Steam-wise can be used, like so:</p> <pre><code>func is_steam_enabled() -&gt; bool:\n    if this_platform == \"steam\" and steam_api != null:\n        return true\n    return false\n</code></pre> <p>Since it is in my global script, it can be called anywhere I need to use Steam functions. If this function doesn't return true, then I just have my code ignore related Steam portions like so:</p> <pre><code>func fire_steam_achievement(value: int) -&gt; void:\n    if not achievements[value]:\n        achievements[value] = true\n\n        # Pass variable to Steam and fire it off\n        var this_achievement: String = \"ACHIEVE\"+str(value)\n\n        # Now, if Steam exists and is enabled, use the Steamworks functions\n        if is_steam_enabled():\n            var was_set: bool = steam_api.setAchievement(ACHIEVE)\n            print(\"[STEAM] Firing achievement %s, success: %s\" % [this_achievement, was_set])\n\n            var was_stored: bool = steam_api.storeStats()\n            print(\"[STEAM] Statistics stored: %s\" % was_stored)\n</code></pre> <p>So when you need to export for non-Steam platforms, you can just use vanilla Godot templates and you don't have to worry about anything else!  No need for different versions of your game at all.</p> <p>Below we have the two submitted user suggestions on how to pull this off; the example above, as mnetioned, was based on solution #2 but do also check out solution 1 if that makes more sense for you.</p> <p>Albey shared some scripts for his solution in GDScript and there are three separate files. The <code>SteamHandler.gd</code> file which swaps out which version of the game this is:</p> <pre><code>extends Node\n\nvar interface: SteamIntegrationBlank\n\nfunc _ready() -&gt; void:\n    if OS.has_feature(\"Steam\"):\n        interface = load(\"res://Entities/Autoloads/Steam/SteamIntegration.gd\").new()\n    else:\n        interface = load(\"res://Entities/Autoloads/Steam/SteamIntegrationBlank.gd\").new()\n\n    interface.initialise_steam()\n    if interface.status != interface.STATUS_OK:\n        get_tree().quit()\n</code></pre> <p>The <code>SteamIntegrationBlank.gd</code> file which handles what happens when Steam is not present:</p> <pre><code>extends Reference\nclass_name SteamIntegrationBlank\n\nconst STATUS_OK = 1\nconst STATUS_STEAM_NOT_RUNNING = 20\nvar status := STATUS_OK\n\nfunc initialise_steam() -&gt; void:\n    pass\n</code></pre> <p>And finally the <code>SteamIntegration.gd</code> file for when Steam is present:</p> <pre><code>extends SteamIntegrationBlank\n\nconst APP_ID = ***\n\nfunc initialise_steam() -&gt; void:\n    if Steam.restartAppIfNecessary(APP_ID):\n        status = STATUS_STEAM_NOT_RUNNING\n        return\n\n    var init: Dictionary = Steam.steamInit()\n    status = init['status']\n</code></pre> <p>Rutger from Roost Games (maker of Cat Cafe Manager) shared a tidbit about it: \"If anyone is wondering how to do that, since I had to find out through the Switch port, I have a <code>platform</code> global as a wrapper for any platform specific stuff, it just does this in the <code>_ready()</code>\". His example code is as following:</p> <pre><code>if Engine.has_singleton(\"Steam\"):\n    self.platform = \"steam\"\n    self.Steam = Engine.get_singleton(\"Steam\")\n</code></pre> <p>When using the GDExtension of GodotSteam, you need to also alter the <code>extension_list.cfg</code> file located in your .godot folder in your project. If you do not, then the game will produce some errors in your log files when run. They are harmless, however, just a little annoying. There is a proposal to fix this behavior so fingers crossed!</p> <p>Hopefully these examples give you some ideas on how to remove Steamworks features from your game without having to make a bunch of different builds and repositories.</p>"},{"location":"tutorials/remove_steam/#how-we-do-it","title":"How We Do It","text":""},{"location":"tutorials/remove_steam/#solution-1-multiple-files","title":"Solution 1: Multiple Files","text":""},{"location":"tutorials/remove_steam/#solution-2-check-for-singleton","title":"Solution 2: Check For Singleton","text":""},{"location":"tutorials/remove_steam/#caveats-for-gdextension","title":"Caveats For GDExtension","text":""},{"location":"tutorials/rich_presence/","title":"Tutorials - Rich Presence","text":"<p>This short tutorial is all about rich presence for your game; specifically the game's enhanced rich presence. You have probably seen a friend in-game, in your friend list, that has a secondary text string with some information about the game. Usually something about the level they are on, a lobby, number of players, etc. Well, that's what this tutorial is all about.</p> <p>You can read more about enhanced rich presence in the Steamworks documentation.</p> Relevant GodotSteam classes and functions <ul> <li>Friends class<ul> <li>setRichPresence()</li> </ul> </li> </ul> <p>First you will need to set up your localization file in the Steamworks back-end. Obviously without this step the rich presence text does not really work as it has nothing to reference. You will need to set up your text file like this:</p> <pre><code>\"lang\" {\n    \"language\" {\n        \"english\" {\n            \"tokens\" {\n                \"#something1\"   \"Rich presence string\"\n                \"#something2\"   \"Another string\"\n                \"#something_with_input\" \"{something: %input%\"\n            }\n        }\n    }\n}\n</code></pre> <p>Make sure you tab separate the strings in the tokens bracket. Also make sure you publish the changes after your file is uploaded before you try to test it. The changes must be live in Steamworks for it to appear.</p> <p>You can put various languages in their own nests so these show up for users how have their Steam client language set specifically. The first string in each token is what you'll end up using in your game's code.</p> <p>I have a global function, in my <code>global.gd</code> that can be called anywhere in my project and handles this. It is written something like this:</p> <pre><code>func set_rich_presence(token: String) -&gt; void:\n    # Set the token\n    var setting_presence = Steam.setRichPresence(\"steam_display\", token)\n\n    # Debug it\n    print(\"Setting rich presence to \"+str(token)+\": \"+str(setting_presence))\n</code></pre> <p>And in whatever scene you want to set the token:</p> <pre><code>global.set_rich_presence(\"#something1\")\n</code></pre> <p>And now Steam will set the text in your friend's list to what you have set it as in the token list in the Steamworks back-end. You can also hover over your own profile picture to see the in-game text; for testing purposes.</p> <p>There are additional tags you can set which are covered in detail in the SDK documentation here.</p> <p>A weird bug exists in the Windows version of GDNative, both in GodotSteam and Samsfacee's plug-in. Sometimes the <code>setRichPresence()</code> function will send the key as the value. It isn't consistent but happens enough to be noticeable and a pain.</p> <p>Please note this bug does not exist in the pre-compiled module versions nor GDExtension version or the GDNative versions for Linux or OSX.</p> <p>This behavior definitely seems to be a GDNative problem so we can't really fix it on our and an issue has been submitted to the Godot GitHub page.</p> <p>Thankfully, Furcifer has shared some code that should help with this!</p> <pre><code>var iteration = 0\nvar richPresenceKeyValue = []\nvar updatingRichPresence = false\n\nfunc callNextFrame(methodName, arguments = []):\n    get_tree().connect(\"idle_frame\", self, methodName, arguments, CONNECT_ONESHOT)\n\nfunc updateRichPresence():\n    iteration = 0\n    richPresenceKeyValue.clear()\n\n    addRichPresence(\"numwins\", String(Game.getNumWins()))\n    addRichPresence(\"steam_display\", \"#status_Ingame\")\n\n    if not updatingRichPresence:\n        updatingRichPresence = true\n        setPresenceDelayed()\n\nfunc addRichPresence(key, value):\n    richPresenceKeyValue.push_back([key, value])\n    Steam.setRichPresence(key, value)\n\nfunc setPresenceDelayed():\n    var remaining = []\n    for tuple in richPresenceKeyValue:\n        var success = forceSetProperty(tuple[0], tuple[1])\n        if not success:\n            remaining.push_back(tuple)\n\n    richPresenceKeyValue = remaining\n\n    if not richPresenceKeyValue.empty():\n        iteration += 1\n        recallSetPresenceDelayed() # recalls this function after a frame\n    else:\n        updatingRichPresence = false\n\nfunc recallSetPresenceDelayed():\n    Util.callNextFrame(self, \"setPresenceDelayed\")\n\nfunc forceSetProperty(key : String, value : String) -&gt; bool:\n    for i in 10:\n        var setval = Steam.getFriendRichPresence(STEAM_ID, key)\n        if setval == key:\n            #print(\"could not set key \", key, \" - iteration: \", iteration, \"/\",i)\n            Steam.setRichPresence(key, value)\n        else:\n            return true\n\n    return false\n</code></pre>"},{"location":"tutorials/rich_presence/#setting-it-up","title":"Setting It Up","text":""},{"location":"tutorials/rich_presence/#suggested-code","title":"Suggested Code","text":""},{"location":"tutorials/rich_presence/#weird-bug-in-gdnative","title":"Weird Bug In GDNative","text":""},{"location":"tutorials/rich_presence/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/rich_presence/#video-tutorials","title":"Video Tutorials","text":"<p>Prefer video tutorials? Feast your eyes and ears!</p> <p>  'Setting Up Rich Presence' by FinePointCGI</p>"},{"location":"tutorials/rich_presence/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/stats_achievements/","title":"Tutorials - Stats And Achievements","text":"<p>At some point you may want to save statistics to Steam's database and / or use their achievement system. You will want to read up about these in Steam's documentation as I won't be covering the basics on how to set it up in the Steamworks back-end.</p> Relevant GodotSteam classes and functions <ul> <li>User Stats class<ul> <li>requestCurrentStats()</li> <li>getAchievement()</li> <li>setAchievement()</li> <li>setStatFloat()</li> <li>setStatInt()</li> <li>storeStats()</li> </ul> </li> </ul> <p>First thing, you'll want to set up your achievements and statistics in the Steamworks back-end. Most importantly, you want to publish these changes live. If not, they will not be exposed to the Steamworks API and you will get errors when trying to retrieve or set them. Once they have been published you can continue on with this tutorial.</p> <p>When starting up your game, in most cases, you'll want to pull all related achievements and statistics from Steam's servers for the local user. There are a few ways to handle connecting the callback for statistics / achievements data received from Steam's servers. Unless you choose to turn it off by passing <code>false</code> to the <code>steamInit()</code> or <code>steamInitEX()</code> functions; it will automatically request the local user's current statistics and achievements. I generally pass false to prevent this.</p> <p>To retrieve the data from the resulting callback, you need to connect the <code>current_stats_received</code> callback to a function like so:</p> Godot 2.x, 3.xGodot 4.x <pre><code>Steam.connect(\"current_stats_received\", self, \"_on_steam_stats_ready\", [], CONNECT_ONESHOT)\n</code></pre> <pre><code>Steam.current_stats_received.connect(_on_steam_stats_ready)\n</code></pre> <p>You'll notice that <code>CONNECT_ONESHOT</code> is passed along to prevent this from firing more than once. This is because that signal is sent any time stats are updated or received and will run the <code>_on_steam_stats_ready()</code> again.</p> <p>In my use-cases this is not desirable, but it may be in yours. If you don't mind the <code>_on_steam_stats_ready()</code> firing each time, depending on your function's logic, feel free to omit that part like so:</p> Godot 2.x, 3.xGodot 4.x <pre><code>Steam.connect(\"current_stats_received\", self, \"_on_steam_stats_ready\")\n</code></pre> <pre><code>Steam.current_stats_received.connect(_on_steam_stats_ready)\n</code></pre> <p>If you do keep the <code>CONNECT_ONESHOT</code> as I do, I suggest calling for Steam stat updates with <code>requestUserStats()</code> and pass with it the user's Steam ID. This function will work with any user: local or remote. You'll also want to connect it's signal in a similar manner:</p> Godot 2.x, 3.xGodot 4.x <pre><code>Steam.connect(\"user_stats_received\", self, \"_on_steam_stats_ready\")\n</code></pre> <pre><code>Steam.user_stats_received.connect(_on_steam_stats_ready)\n</code></pre> <p>It can be connected to the same function as <code>requestCurrentStats()</code> as they send the same data back. For our example, here is the <code>_on_steam_stats_ready()</code> function we listed in the connected signals:</p> <pre><code>func _on_steam_stats_ready(game: int, result: int, user: int) -&gt; void:\n    print(\"This game's ID: %s\" % game)\n    print(\"Call result: %s\" % result)\n    print(\"This user's Steam ID: %s\" % user)\n</code></pre> <p>In this function you can check if the result is what you expect (ideally it is 1), see if the given stats are for the current player, and check that the game's ID matches. Also you can now pass the achievements and stats to local variables or functions. I will often pass the achievement to a function to parse them correctly as they send back a BOOL for retrieval and a BOOL for earned or not.</p> <pre><code>var achievements: Dictionary = {\"achieve1\":false, \"achieve2\":false, \"achieve3\":false}\n\nfunc _on_steam_stats_ready(game: int, result: int, user: int) -&gt; void:\n    print(\"This game's ID: %s\" % game)\n    print(\"Call result: %s\" % result)\n    print(\"This user's Steam ID: %s\" % user)\n\n    # Get achievements and pass them to variables\n    get_achievement(\"acheive1\")\n    get_achievement(\"acheive2\")\n    get_achievement(\"acheive3\")\n\n    # Get statistics (int) and pass them to variables\n    var highscore: int = Steam.getStatInt(\"HighScore\")\n    var health: int = Steam.getStatInt(\"Health\")\n    var money: int = Steam.getStatInt(\"Money\")\n\n# Process achievements\nfunc get_achievement(value: String) -&gt; void:\n    var this_achievement: Dictionary = Steam.getAchievement(value)\n\n    # Achievement exists\n    if this_achievement['ret']:\n\n        # Achievement is unlocked\n        if this_achievement['achieved']:\n            achievements[value] = true\n\n        # Achievement is locked\n        else:\n            achievements[value] = false\n\n    # Achievement does not exist\n    else:\n        achievements[value] = false\n</code></pre> <p>Setting the achievements and statistics is pretty simple too. We'll start with achievements. You need to tell Steam the achievement is unlocked and then store it so 'pops':</p> <pre><code>Steam.setAchievement(\"achieve1\")\nSteam.storeStats()\n</code></pre> <p>If you don't call <code>storeStats()</code> the achievement pop-up won't trigger but the achievement should be recorded. However, you will still have to call <code>storeStats()</code> at some point to upload them. I generally make a generic function to house this process then call it when needed:</p> <pre><code>func _fire_Steam_Achievement(value: String) -&gt; void:\n    # Set the achievement to an in-game variable\n    achievements[value] = true\n\n    # Pass the value to Steam then fire it\n    Steam.setAchievement(value)\n    Steam.storeStats()\n</code></pre> <p>When that last <code>storeStats()</code> is called the achievement will \"pop\" visually for the user and update their Steam client.</p> <p>Statistics follow a pretty similar process; both int and float based ones. Set them like so:</p> <pre><code>Steam.setStatInt(\"stat1\", value)\nSteam.setStatFloat(\"stat2\", value)\nSteam.storeStats()\n</code></pre> <p>When that last <code>storeStats()</code> is called the stats will update on Steam's servers.</p>"},{"location":"tutorials/stats_achievements/#preparations","title":"Preparations","text":""},{"location":"tutorials/stats_achievements/#getting-steam-statistics-and-achievements","title":"Getting Steam Statistics And Achievements","text":""},{"location":"tutorials/stats_achievements/#working-with-the-data","title":"Working With The Data","text":""},{"location":"tutorials/stats_achievements/#setting-achievements","title":"Setting Achievements","text":""},{"location":"tutorials/stats_achievements/#setting-statistics","title":"Setting Statistics","text":""},{"location":"tutorials/stats_achievements/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/stats_achievements/#video-tutorials","title":"Video Tutorials","text":"<p>Prefer video tutorials? Feast your eyes and ears!</p> <p>  'Godot + Steam tutorial' by BluePhoenixGames</p> <p>  'How Achievements Are Done' by FinePointCGI</p> <p>  'Let's Talk About Statistics' by FinePointCGI</p> <p>  'Godot 4 Steam Achievements' by Gwizz</p>"},{"location":"tutorials/stats_achievements/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/voice/","title":"Tutorials - Voice","text":"<p>In case you want to Steam's Voice functionality in your game, we might as well cover that too! This example is based partialy on this Github repo for networked voice chat in Godot and Valve's SpaceWar example. There are additional ideas, details, and such from users Punny and ynot01.</p> Relevant GodotSteam classes and functions <ul> <li>Friends class<ul> <li>setInGameVoiceSpeaking()</li> </ul> </li> <li>User class<ul> <li>decompressVoice()</li> <li>getAvailableVoice()</li> <li>getVoice()</li> <li>getVoiceOptimalSampleRate()</li> <li>startVoiceRecording()</li> <li>stopVoiceRecording()</li> </ul> </li> </ul> <p>First we will set up a bunch of variables that will get used later on.</p> Godot 2.x, 3.xGodot 4.x <pre><code>var current_sample_rate: int = 48000\nvar has_loopback: bool = false\nvar local_playback: AudioStreamGeneratorPlayback = null\nvar local_voice_buffer: PoolByteArray = PoolByteArray()\nvar network_playback: AudioStreamGeneratorPlayback = null\nvar network_voice_buffer: PoolByteArray = PoolByteArray()\nvar packet_read_limit: int = 5\n</code></pre> <pre><code>var current_sample_rate: int = 48000\nvar has_loopback: bool = false\nvar local_playback: AudioStreamGeneratorPlayback = null\nvar local_voice_buffer: PoolByteArray = PackedByteArray()\nvar network_playback: AudioStreamGeneratorPlayback = null\nvar network_voice_buffer: PoolByteArray = PackedByteArray()\nvar packet_read_limit: int = 5\n</code></pre> <p>A few quick things to mention, <code>has_loopback</code> will toggle whether or not you can hear yourself in voice chat. While not great in-game, it is handy when testing. You also notice <code>local_</code> / <code>network_</code> prefixed variables; these are to house data on your end and someone else's. In theory, the <code>network_</code> will cover all audio output from the network / Steam (anything that isn't you).</p> <p>Also, somewhere in the root of our test, we need to create two <code>AudioStreamPlayer</code> nodes. One named Local and one named Network which we can use as <code>$Local</code> and <code>$Network</code> respectively.</p> <p>In order to add the voice data to the audio stream, we need to set up the <code>AudioStreamGeneratorPlayback</code>. Make sure the <code>AudioStreamPlayer</code> nodes both have and <code>AudioStreamGenerator</code> as their streams. Set the stream's <code>buffer_length</code> to something like 0.1:</p> <pre><code>func _ready() -&gt; void:\n    $Local.stream.mix_rate = current_sample_rate\n    $Local.play()\n    local_playback = $Local.get_stream_playback()\n\n    $Network.stream.mix_rate = current_sample_rate\n    $Network.play()\n    network_playback = $Network.get_stream_playback()\n</code></pre> <p>Also, in our <code>_process()</code> function we will add the call to our <code>check_for_voice()</code> function:</p> <pre><code>func _process(_delta: float) -&gt; void:\n    check_for_voice()\n</code></pre> <p>This function basically just looks to see if there is voice data from Steam available then gets and sends it off to be processed.</p> <pre><code>func check_for_voice() -&gt; void:\n    var available_voice: Dictionary = Steam.getAvailableVoice()\n\n    # Seems there is voice data\n    if available_voice['result'] == Steam.VOICE_RESULT_OK and available_voice['buffer'] &gt; 0:\n        # Valve's getVoice uses 1024 but GodotSteam's is set at 8192?\n        # Our sizes might be way off; internal GodotSteam notes that Valve suggests 8kb\n        # However, this is not mentioned in the header nor the SpaceWar example but -is- in Valve's docs which are usually wrong\n        var voice_data: Dictionary = Steam.getVoice()\n        if voice_data['result'] == Steam.VOICE_RESULT_OK and voice_data['written']:\n            print(\"Voice message has data: %s / %s\" % [voice_data['result'], voice_data['written']])\n\n            # Here we can pass this voice data off on the network\n            Networking.send_message(voice_data['buffer'])\n\n            # If loopback is enable, play it back at this point\n            if has_loopback:\n                print(\"Loopback on\")\n                process_voice_data(voice_data, \"local\")\n</code></pre> <p>Our <code>Networking.send_message</code> function can be whatever P2P networking function you have for sending packets / data. At the time of writing this, I wonder how necessary this is since Steam is recording voice data and we are checking if there is any available; surely it knows who we are talking to, if anyone. Do we need to send this data back as a packet?</p> <p>OK, now that we have something, let's hear it. We may want to use the optimal sample rate instead of whatever we set in our <code>current_sample_rate</code> variable.  In which case we can use this function:</p> <pre><code>func get_sample_rate() -&gt; void:\n    current_sample_rate = Steam.getVoiceOptimalSampleRate()\n    print(\"Current sample rate: %s\" % current_sample_rate)\n</code></pre> <p>This function can be attached to a button. We can also add a toggle to this button to change between the optimal rate or back to our default. When changing the sample rate, remember to change the <code>AudioStreamGenerator</code>'s mix rate too:</p> <pre><code>func get_sample_rate(is_toggled: bool) -&gt; void:\n    if is_toggled:\n        current_sample_rate = Steam.getVoiceOptimalSampleRate()\n    else:\n        current_sample_rate = 48000\n    $Local.stream.mix_rate = current_sample_rate\n    $Network.stream.mix_rate = current_sample_rate\n    print(\"Current sample rate: %s\" % current_sample_rate)\n</code></pre> <p>We have our sample rates figured out so let's try to actual play this data. Since we are just testing things, we will use the <code>local_</code> variables and nodes.</p> Godot 2.x, 3.xGodot 4.x <pre><code>func process_voice_data(voice_data: Dictionary, voice_source: String) -&gt; void:\n    # Our sample rate function above without toggling\n    get_sample_rate()\n\n    var decompressed_voice: Dictionary = Steam.decompressVoice(voice_data['buffer'], voice_data['written'], current_sample_rate)\n\n    if decompressed_voice['result'] == Steam.VOICE_RESULT_OK and decompressed_voice['size'] &gt; 0:\n        print(\"Decompressed voice: %s\" % decompressed_voice['size'])\n\n        if voice_source == \"local\":\n            local_voice_buffer = decompressed_voice['uncompressed']\n            local_voice_buffer.resize(decompressed_voice['size'])\n\n            # We now create an audio stream to put our data into\n            var local_audio: AudioStreamSample = AudioStreamSample.new()\n            local_audio.mix_rate = current_sample_rate\n            local_audio.data = local_voice_buffer\n            local_audio.format = AudioStreamSample.FORMAT_16_BITS\n\n            # Lastly, put this into a node and play it\n            $Local.stream = local_audio\n            $Local.play()\n</code></pre> <pre><code>func process_voice_data(voice_data: Dictionary, voice_source: String) -&gt; void:\n    # Our sample rate function above without toggling\n    get_sample_rate()\n\n    var decompressed_voice: Dictionary = Steam.decompressVoice(voice_data['buffer'], voice_data['written'], current_sample_rate)\n\n    if decompressed_voice['result'] == Steam.VOICE_RESULT_OK and decompressed_voice['size'] &gt; 0:\n        print(\"Decompressed voice: %s\" % decompressed_voice['size'])\n\n        if voice_source == \"local\":\n            local_voice_buffer = decompressed_voice['uncompressed']\n            local_voice_buffer.resize(decompressed_voice['size'])\n\n            # We now iterate through the local_voice_buffer and push the samples to the audio generator\n            for i: int in range(0, mini(local_playback.get_frames_available() * 2, local_voice_buffer.size()), 2):\n                # Steam's audio data is represented as 16-bit single channel PCM audio, so we need to convert it to amplitudes\n                # Combine the low and high bits to get full 16-bit value\n                var raw_value: int = LOCAL_VOICE_BUFFER[0] | (LOCAL_VOICE_BUFFER[1] &lt;&lt; 8)\n                # Make it a 16-bit signed integer\n                raw_value = (raw_value + 32768) &amp; 0xffff\n                # Convert the 16-bit integer to a float on from -1 to 1\n                var amplitude: float = float(raw_value - 32768) / 32768.0\n\n                # push_frame() takes a Vector2. The x represents the left channel and the y represents the right channel\n                local_playback.push_frame(Vector2(amplitude, amplitude))\n\n                # Delete the used samples\n                local_voice_buffer.remove_at(0)\n                local_voice_buffer.remove_at(0)\n</code></pre> <p>So how do we actually get our voice data to Steam? We will need to set up a button that can be toggled and attached to the following function:</p> <pre><code>func record_voice(is_recording: bool) -&gt; void:\n    # If talking, suppress all other audio or voice comms from the Steam UI\n    Steam.setInGameVoiceSpeaking(steam_id, is_recording)\n\n    if is_recording:\n        Steam.startVoiceRecording()\n    else:\n        Steam.stopVoiceRecording()\n</code></pre> <p>Easy-peasy! You will notice our <code>setInGameVoiceSpeaking</code> has a note that it is used to suppress any sounds or whatnot coming from the Steam UI; you'll definitely want to have that.</p> <p>You may want to provide the option for always-on voice chat, in which case you'd probably want to fire this function once in your <code>_ready()</code> or somewhere else to start recording until the player turns it off.</p> <p>And that's the basics of Steam Voice chat. Again, there is a weird choppiness to the playback in this example but surely we can iron that out at some point.</p>"},{"location":"tutorials/voice/#preparations","title":"Preparations","text":""},{"location":"tutorials/voice/#getting-voice-data","title":"Getting Voice Data","text":""},{"location":"tutorials/voice/#processing-voice-data","title":"Processing Voice Data","text":""},{"location":"tutorials/voice/#recording-voice","title":"Recording Voice","text":""},{"location":"tutorials/voice/#additional-resources","title":"Additional Resources","text":""},{"location":"tutorials/voice/#related-projects","title":"Related Projects","text":"<p> 'Godot VOIP' by ikbencasdoei</p>"},{"location":"tutorials/voice/#example-project","title":"Example Project","text":"<p>To see this tutorial in action, check out our GodotSteam Example Project on GitHub. There you can get a full view of the code used which can serve as a starting point for you to branch out from.</p>"},{"location":"tutorials/workshop/","title":"Tutorials - Workshop","text":"<p>A hot topic that comes up: Workshop / UGC. There are a lot of moving parts and we'll probably miss quite a few in this tutorial. Luckily some smart folks have provided some information based on their experiences that we can use.</p> Relevant GodotSteam classes and functions <ul> <li>Friends class<ul> <li>activateGameOverlayToWebPage()</li> </ul> </li> <li>UGC class<ul> <li>createItem()</li> <li>createQueryUserUGCRequest()</li> <li>getItemInstallInfo()</li> <li>getSubscribedItems()</li> <li>getQueryUGCResult()</li> <li>releaseQueryUGCRequest()</li> <li>sendQueryUGCRequest()</li> <li>setReturnOnlyIDs()</li> <li>startItemUpdate()</li> <li>submitItemUpdate()</li> <li>setItemContent()</li> <li>setItemDescription()</li> <li>setItemMetadata()</li> <li>setItemPreview()</li> <li>setItemTags()</li> <li>setItemTitle()</li> <li>setItemUpdateLanguage()</li> <li>setItemVisibility()</li> </ul> </li> <li>User class<ul> <li>getSteamID()</li> </ul> </li> </ul> <p>Before anything else, you'll want to read Valve's write-up on Workshop / UGC which will cover a lot of steps that aren't covered in this tutorial. Once you get through that, you should also read through Valve's write-up on the implementation of Workshop / UGC so you'll be ready to continue on.</p> <p>And, when you're finally read both of those, we can start.</p> <p>KarpPaul of Forgotten Dream Games has given us this pretty great tutorial on uploading and downloading items in Workshop / UGC. Since he has written everything, with code examples, there isn't any reason to reiterate it here when you can just click the link and read it all yourself.</p> <p>Lyaaaaaaaaaaaaaaa submitted some code showing how they use items in Workshop / UGC:</p> <p><pre><code>extends Node\n\nclass_name Steam_Workshop\n\nsignal query_request_success\n\nvar published_items  : Array\nvar steam = SteamAutoload.steam    # I don't use the `Steam` directly to avoid scripts errors in non-steam builds.\n\nvar _app_id        : int =  ProjectSettings.get_setting(\"global/steam_app_id\")\nvar _query_handler : int\nvar _page_number   : int = 1\nvar _subscribed_items : Dictionary\n\nfunc _init() -&gt; void:\n    steam.connect(\"ugc_query_completed\", self, \"_on_query_completed\")\n\n    for item in steam.getSubscribedItems():\n        var info : Dictionary\n        info = get_item_install_info(item)\n        if info[\"ret\"] == true:\n            _subscribed_items[item] = info\n\n\nstatic func open_tos() -&gt; void:\n    var steam = SteamAutoload.steam\n    var tos_url = \"https://steamcommunity.com/sharedfiles/workshoplegalagreement\"\n    steam.activateGameOverlayToWebPage(tos_url)\n\n\nfunc get_item_install_info(p_item_id : int) -&gt; Dictionary:\n    var info : Dictionary\n    info = steam.getItemInstallInfo(p_item_id)\n\n    if info[\"ret\"] == false:\n        var warning = \"Item \" + String(p_item_id) + \" isn't installed or has no content\"\n        # Here your code to log/display errors\n\n    return info\n\n\nfunc get_published_items(p_page : int = 1, p_only_ids : bool = false) -&gt; void:\n    var user_id : int = steam.getSteamID()\n    var list    : int = steam.USER_UGC_LIST_PUBLISHED\n    var type    : int = steam.WORKSHOP_FILE_TYPE_COMMUNITY\n    var sort    : int = steam.USERUGCLISTSORTORDER_CREATIONORDERDESC\n\n    _query_handler = steam.createQueryUserUGCRequest(user_id,\n                                                     list,\n                                                     type,\n                                                     sort,\n                                                     _app_id,\n                                                     _app_id,\n                                                     p_page)\n    steam.setReturnOnlyIDs(_query_handler, p_only_ids)\n    steam.sendQueryUGCRequest(_query_handler)\n\n\nfunc get_item_folder(p_item_id : int) -&gt; String:\n    return _subscribed_items[p_item_id][\"folder\"]\n\n\nfunc fetch_query_result(p_number_results : int) -&gt; void:\n    var result : Dictionary\n    for i in range(p_number_results):\n        result = steam.getQueryUGCResult(_query_handler, i)\n        published_items.append(result)\n\n    steam.releaseQueryUGCRequest(_query_handler)\n\n\nfunc _on_query_completed(p_query_handler    : int,\n                         p_result           : int,\n                         p_results_returned : int,\n                         p_total_matching   : int,\n                         p_cached           : bool) -&gt; void:\n\n    if p_result == steam.RESULT_OK:\n        fetch_query_result(p_results_returned)\n    else:\n        var warning = \"Couldn't get published items. Error: \" + String(p_result)\n        # Here your code to log/display errors\n\n    if p_result == 50:\n        _page_number ++ 1\n        get_published_items(_page_number)\n\n    elif p_result &lt; 50:\n        emit_signal(\"query_request_success\",\n                    p_results_returned,\n                    _page_number)\n</code></pre> <p>Following along with Lyaaaaaaaaaaaaaaa's example, here is a class for your Workshop / UGC items.</p> <pre><code>extends Node\n\nclass_name UGC_Item\n\nsignal item_created\nsignal item_updated\nsignal item_creation_failed\nsignal item_update_failed\n\nvar steam = SteamAutoload.steam # I don't use the `Steam` directly to avoid scripts errors in non-steam builds.\n\nvar _app_id  : int = ProjectSettings.get_setting(\"global/steam_app_id\")\nvar _item_id : int\nvar _update_handler\n\nfunc _init(p_item_id   : int = 0,\n           p_file_type : int = steam.WORKSHOP_FILE_TYPE_COMMUNITY) -&gt; void:\n\n    steam.connect(\"item_created\", self, \"_on_item_created\")\n    steam.connect(\"item_updated\", self, \"_on_item_updated\")\n\n    if p_item_id == 0:\n        steam.createItem(_app_id, p_file_type)\n    else:\n        _item_id = p_item_id\n        start_update(p_item_id)\n\n\nfunc start_update(p_item_id : int) -&gt; void:\n    _update_handler = steam.startItemUpdate(_app_id, p_item_id)\n\n\nfunc update(p_update_description : String = \"Initial commit\") -&gt; void:\n    steam.submitItemUpdate(_update_handler, p_update_description)\n\n\nfunc set_title(p_title : String) -&gt; void:\n    if steam.setItemTitle(_update_handler, p_title) == false:\n        # Here your code to log/display errors\n\n\nfunc set_description(p_description : String = \"\") -&gt; void:\n    if steam.setItemDescription(_update_handler, p_description) == false:\n        # Here your code to log/display errors\n\n\nfunc set_update_language(p_language : String) -&gt; void:\n    if steam.setItemUpdateLanguage(_update_handler, p_language) == false:\n        # Here your code to log/display errors\n\n\nfunc set_visibility(p_visibility : int = 2) -&gt; void:\n    if steam.setItemVisibility(_update_handler, p_visibility) == false:\n        # Here your code to log/display errors\n\n\nfunc set_tags(p_tags : Array = []) -&gt; void:\n    if steam.setItemTags(_update_handler, p_tags) == false:\n        # Here your code to log/display errors\n\n\nfunc set_content(p_content : String) -&gt; void:\n    if steam.setItemContent(_update_handler, p_content) == false:\n        # Here your code to log/display errors\n\n\nfunc set_preview(p_image_preview : String = \"\") -&gt; void:\n    if steam.setItemPreview(_update_handler, p_image_preview) == false:\n        # Here your code to log/display errors\n\n\nfunc set_metadata(p_metadata : String = \"\") -&gt; void:\n    if steam.setItemMetadata(_update_handler, p_metadata) == false:\n        # Here your code to log/display errors\n\n\nfunc get_id() -&gt; int:\n    return _item_id\n\n\nfunc _on_item_created(p_result : int, p_file_id : int, p_accept_tos : bool) -&gt; void:\n    if p_result == steam.RESULT_OK:\n        _item_id = p_file_id\n        # Here your code to log/display success\n        emit_signal(\"item_created\", p_file_id)\n    else:\n        var error = \"Failed creating workshop item. Error: \" + String(p_result)\n        # Here your code to log/display errors\n        emit_signal(\"item_creation_failed\", error)\n\n    if p_accept_tos:\n        Steam_Workshop.open_tos()\n\n\nfunc _on_item_updated(p_result : int, p_accept_tos : bool) -&gt; void:\n    if p_result == steam.RESULT_OK:\n        var item_url = \"steam://url/CommunityFilePage/\" + String(_item_id)\n        # Here your code to log/display success\n        steam.activateGameOverlayToWebPage(item_url)\n        emit_signal(\"item_updated\")\n    else:\n        var error = \"Failed updated workshop item. Error: \" + String(p_result)\n        # Here your code to log/display errors\n        emit_signal(\"item_update_failed\", error)\n\n    if p_accept_tos:\n        Steam_Workshop.open_tos()\n</code></pre> <p>KarpPaul had some information about getting \"access is denied\" from <code>getQueryUGCResult</code>:</p> <p>Regarding the issue that I had with steamworks (Steam.getQueryUGCResult returns \"access is denied\" when the workshop is set visible to developers and customers). I talked to steam support and they were not able to reproduce the error. I checked the ipc log and indeed everything looks normal - no access denied results in steam logs. However, the error is still in the game. No idea why this happens and how, maybe I am doing smth wrong. I wonder if anybody else will encounter this.... anyway, it is not critical, so I just make my workshop visible to everyone and decide to ignore the issue for now.</p>"},{"location":"tutorials/workshop/#before-you-start","title":"Before You Start","text":""},{"location":"tutorials/workshop/#uploading-downloading-in-workshop-ugc","title":"Uploading / Downloading In Workshop / UGC","text":""},{"location":"tutorials/workshop/#using-items-in-workshop-ugc","title":"Using Items In Workshop / UGC","text":""},{"location":"tutorials/workshop/#workshop-ugc-items","title":"Workshop / UGC Items","text":""},{"location":"tutorials/workshop/#weird-issues","title":"Weird Issues","text":""},{"location":"blog/archive/2024/","title":"July 2024","text":""}]}